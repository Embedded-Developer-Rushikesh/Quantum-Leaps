
LED_Intensity_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046bc  080046bc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080046c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000014  080046d8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080046d8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013685  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a22  00000000  00000000  0003370c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00037130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c67  00000000  00000000  00038140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022267  00000000  00000000  00038da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b91  00000000  00000000  0005b00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d074f  00000000  00000000  0006fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004084  00000000  00000000  001402f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00144374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004618 	.word	0x08004618

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004618 	.word	0x08004618

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ctor_Led_Control>:
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AO::ctor_Led_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AO::ctor_Led_Control} ....................................................
void ctor_Led_Control(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
         Led_Contol * const me = &Led_Contol_obj;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <ctor_Led_Control+0x2c>)
 8000508:	607b      	str	r3, [r7, #4]
        QActive_ctor(&me->super, Q_STATE_CAST(&Led_Contol_initial));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <ctor_Led_Control+0x30>)
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fbc0 	bl	8003c94 <QActive_ctor>
        QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	2300      	movs	r3, #0
 800051e:	2204      	movs	r2, #4
 8000520:	f003 fc9e 	bl	8003e60 <QTimeEvt_ctorX>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000034 	.word	0x20000034
 8000530:	08000535 	.word	0x08000535

08000534 <Led_Contol_initial>:
extern TIM_HandleTypeDef htim2;
//${AO::Led_Contol} ..........................................................
Led_Contol  Led_Contol_obj;

//${AO::Led_Contol::SM} ......................................................
QState Led_Contol_initial(Led_Contol * const me, void const * const par) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
    //${AO::Led_Contol::SM::initial}
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3328      	adds	r3, #40	; 0x28
 8000542:	2232      	movs	r2, #50	; 0x32
 8000544:	2132      	movs	r1, #50	; 0x32
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fcbe 	bl	8003ec8 <QTimeEvt_armX>
    return Q_TRAN(&Led_Contol_off);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a03      	ldr	r2, [pc, #12]	; (800055c <Led_Contol_initial+0x28>)
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	2308      	movs	r3, #8
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08000561 	.word	0x08000561

08000560 <Led_Contol_off>:

//${AO::Led_Contol::SM::off} .................................................
QState Led_Contol_off(Led_Contol * const me, QEvt const * const e) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d002      	beq.n	8000578 <Led_Contol_off+0x18>
 8000572:	2b04      	cmp	r3, #4
 8000574:	d00c      	beq.n	8000590 <Led_Contol_off+0x30>
 8000576:	e011      	b.n	800059c <Led_Contol_off+0x3c>
        //${AO::Led_Contol::SM::off}
        case Q_ENTRY_SIG: {
            if(btn_pad_value==false){
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <Led_Contol_off+0x54>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f083 0301 	eor.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <Led_Contol_off+0x2a>
            Led_off();
 8000586:	f000 f869 	bl	800065c <Led_off>
            }
            status_ = Q_HANDLED();
 800058a:	2303      	movs	r3, #3
 800058c:	73fb      	strb	r3, [r7, #15]
            break;
 800058e:	e00b      	b.n	80005a8 <Led_Contol_off+0x48>
        }
        //${AO::Led_Contol::SM::off::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Led_Contol_On);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <Led_Contol_off+0x58>)
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	2308      	movs	r3, #8
 8000598:	73fb      	strb	r3, [r7, #15]
            break;
 800059a:	e005      	b.n	80005a8 <Led_Contol_off+0x48>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <Led_Contol_off+0x5c>)
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
            break;
 80005a6:	bf00      	nop
        }
    }
    return status_;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000030 	.word	0x20000030
 80005b8:	080005c1 	.word	0x080005c1
 80005bc:	08003829 	.word	0x08003829

080005c0 <Led_Contol_On>:

//${AO::Led_Contol::SM::On} ..................................................
QState Led_Contol_On(Led_Contol * const me, QEvt const * const e) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Led_Contol_On+0x18>
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d00c      	beq.n	80005f0 <Led_Contol_On+0x30>
 80005d6:	e011      	b.n	80005fc <Led_Contol_On+0x3c>
        //${AO::Led_Contol::SM::On}
        case Q_ENTRY_SIG: {
            if(btn_pad_value==false){
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <Led_Contol_On+0x54>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	f083 0301 	eor.w	r3, r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <Led_Contol_On+0x2a>
            Led_On();
 80005e6:	f000 f82d 	bl	8000644 <Led_On>
            }
            status_ = Q_HANDLED();
 80005ea:	2303      	movs	r3, #3
 80005ec:	73fb      	strb	r3, [r7, #15]
            break;
 80005ee:	e00b      	b.n	8000608 <Led_Contol_On+0x48>
        }
        //${AO::Led_Contol::SM::On::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Led_Contol_off);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <Led_Contol_On+0x58>)
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	2308      	movs	r3, #8
 80005f8:	73fb      	strb	r3, [r7, #15]
            break;
 80005fa:	e005      	b.n	8000608 <Led_Contol_On+0x48>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <Led_Contol_On+0x5c>)
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
            break;
 8000606:	bf00      	nop
        }
    }
    return status_;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000030 	.word	0x20000030
 8000618:	08000561 	.word	0x08000561
 800061c:	08003829 	.word	0x08003829

08000620 <LED_Intencity_Control>:
QActive * const super_Led_Control =&Led_Contol_obj.super;
//$enddef${AO::super_Led_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AO::LED_Intencity_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AO::LED_Intencity_Control} ...............................................
void LED_Intencity_Control(uint16_t duty_uint16_t) {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,duty_uint16_t);
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LED_Intencity_Control+0x20>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	88fa      	ldrh	r2, [r7, #6]
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000144 	.word	0x20000144

08000644 <Led_On>:
//$enddef${AO::LED_Intencity_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AO::Led_On} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AO::Led_On} ..............................................................
void Led_On(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2120      	movs	r1, #32
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <Led_On+0x14>)
 800064e:	f000 ff77 	bl	8001540 <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000

0800065c <Led_off>:
//$enddef${AO::Led_On} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AO::Led_off} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AO::Led_off} .............................................................
void Led_off(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <Led_off+0x14>)
 8000666:	f000 ff6b 	bl	8001540 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000

08000674 <button_initial>:

//${AO::button} ..............................................................
button button_obj;

//${AO::button::SM} ..........................................................
QState button_initial(button * const me, void const * const par) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
    //${AO::button::SM::initial}
     QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3328      	adds	r3, #40	; 0x28
 8000682:	2232      	movs	r2, #50	; 0x32
 8000684:	2132      	movs	r1, #50	; 0x32
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fc1e 	bl	8003ec8 <QTimeEvt_armX>
    LED_Intencity_Control(LED_DIM);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <button_initial+0x34>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffc5 	bl	8000620 <LED_Intencity_Control>
    return Q_TRAN(&button_DIM);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <button_initial+0x38>)
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	2308      	movs	r3, #8
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000
 80006ac:	080006d9 	.word	0x080006d9

080006b0 <button_button>:

//${AO::button::SM::button} ..................................................
QState button_button(button * const me, QEvt const * const e) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <button_button+0x24>)
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
            break;
 80006c4:	bf00      	nop
        }
    }
    return status_;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	08003829 	.word	0x08003829

080006d8 <button_DIM>:

//${AO::button::SM::button::DIM} .............................................
QState button_DIM(button * const me, QEvt const * const e) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d11b      	bne.n	8000722 <button_DIM+0x4a>
        //${AO::button::SM::button::DIM::TIMEOUT}
        case TIMEOUT_SIG: {
             btn_pad_value=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <button_DIM+0x60>)
 80006f0:	f000 ff0e 	bl	8001510 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <button_DIM+0x64>)
 8000702:	701a      	strb	r2, [r3, #0]
            if(btn_pad_value)
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <button_DIM+0x64>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <button_DIM+0x3e>
            {
            LED_Intencity_Control(LED_MEDIUM);
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <button_DIM+0x68>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff85 	bl	8000620 <LED_Intencity_Control>
            }
            status_ = Q_TRAN(&button_MIDIUM);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <button_DIM+0x6c>)
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	2308      	movs	r3, #8
 800071e:	73fb      	strb	r3, [r7, #15]
            break;
 8000720:	e005      	b.n	800072e <button_DIM+0x56>
        }
        default: {
            status_ = Q_SUPER(&button_button);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <button_DIM+0x70>)
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
            break;
 800072c:	bf00      	nop
        }
    }
    return status_;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020800 	.word	0x40020800
 800073c:	20000030 	.word	0x20000030
 8000740:	20000002 	.word	0x20000002
 8000744:	0800074d 	.word	0x0800074d
 8000748:	080006b1 	.word	0x080006b1

0800074c <button_MIDIUM>:

//${AO::button::SM::button::MIDIUM} ..........................................
QState button_MIDIUM(button * const me, QEvt const * const e) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d11b      	bne.n	8000796 <button_MIDIUM+0x4a>
        //${AO::button::SM::button::MIDIUM::TIMEOUT}
        case TIMEOUT_SIG: {
             btn_pad_value=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <button_MIDIUM+0x60>)
 8000764:	f000 fed4 	bl	8001510 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	bf14      	ite	ne
 800076e:	2301      	movne	r3, #1
 8000770:	2300      	moveq	r3, #0
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <button_MIDIUM+0x64>)
 8000776:	701a      	strb	r2, [r3, #0]
            if(btn_pad_value)
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <button_MIDIUM+0x64>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <button_MIDIUM+0x3e>
            {
            LED_Intencity_Control(LED_FULL);
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <button_MIDIUM+0x68>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff4b 	bl	8000620 <LED_Intencity_Control>
            }
            status_ = Q_TRAN(&button_FULL);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <button_MIDIUM+0x6c>)
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	2308      	movs	r3, #8
 8000792:	73fb      	strb	r3, [r7, #15]
            break;
 8000794:	e005      	b.n	80007a2 <button_MIDIUM+0x56>
        }
        default: {
            status_ = Q_SUPER(&button_button);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <button_MIDIUM+0x70>)
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
            break;
 80007a0:	bf00      	nop
        }
    }
    return status_;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40020800 	.word	0x40020800
 80007b0:	20000030 	.word	0x20000030
 80007b4:	20000004 	.word	0x20000004
 80007b8:	080007c1 	.word	0x080007c1
 80007bc:	080006b1 	.word	0x080006b1

080007c0 <button_FULL>:

//${AO::button::SM::button::FULL} ............................................
QState button_FULL(button * const me, QEvt const * const e) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d11b      	bne.n	800080a <button_FULL+0x4a>
        //${AO::button::SM::button::FULL::TIMEOUT}
        case TIMEOUT_SIG: {
             btn_pad_value=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4812      	ldr	r0, [pc, #72]	; (8000820 <button_FULL+0x60>)
 80007d8:	f000 fe9a 	bl	8001510 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <button_FULL+0x64>)
 80007ea:	701a      	strb	r2, [r3, #0]
            if(btn_pad_value)
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <button_FULL+0x64>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <button_FULL+0x3e>
            {
            LED_Intencity_Control(LED_DIM);
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <button_FULL+0x68>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff11 	bl	8000620 <LED_Intencity_Control>
            }
            status_ = Q_TRAN(&button_DIM);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <button_FULL+0x6c>)
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	2308      	movs	r3, #8
 8000806:	73fb      	strb	r3, [r7, #15]
            break;
 8000808:	e005      	b.n	8000816 <button_FULL+0x56>
        }
        default: {
            status_ = Q_SUPER(&button_button);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a08      	ldr	r2, [pc, #32]	; (8000830 <button_FULL+0x70>)
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
            break;
 8000814:	bf00      	nop
        }
    }
    return status_;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40020800 	.word	0x40020800
 8000824:	20000030 	.word	0x20000030
 8000828:	20000000 	.word	0x20000000
 800082c:	080006d9 	.word	0x080006d9
 8000830:	080006b1 	.word	0x080006b1

08000834 <button_ctor>:
//$enddef${AO::button} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AO::button_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AO::button_ctor} .........................................................
void button_ctor(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
      button * const me = &button_obj;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <button_ctor+0x2c>)
 800083c:	607b      	str	r3, [r7, #4]
       QActive_ctor(&me->super, Q_STATE_CAST(&button_initial));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4908      	ldr	r1, [pc, #32]	; (8000864 <button_ctor+0x30>)
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fa26 	bl	8003c94 <QActive_ctor>
      QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2300      	movs	r3, #0
 8000852:	2204      	movs	r2, #4
 8000854:	f003 fb04 	bl	8003e60 <QTimeEvt_ctorX>
       //QActive_armX(&me->super,0,BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000070 	.word	0x20000070
 8000864:	08000675 	.word	0x08000675

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ffc2 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094e:	f000 fb27 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f835 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 f917 	bl	8000b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095a:	f000 f8eb 	bl	8000b34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800095e:	f000 f89d 	bl	8000a9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  QF_init();       // initialize the framework and the underlying RT kernel
 8000962:	f003 fd7b 	bl	800445c <QF_init>
   ctor_Led_Control();      // initialize the BSP
 8000966:	f7ff fdcb 	bl	8000500 <ctor_Led_Control>
   button_ctor();
 800096a:	f7ff ff63 	bl	8000834 <button_ctor>
   QACTIVE_START(super_Led_Control,
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <main+0x68>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2300      	movs	r3, #0
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2300      	movs	r3, #0
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	230a      	movs	r3, #10
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <main+0x6c>)
 8000982:	2102      	movs	r1, #2
 8000984:	f003 fdd4 	bl	8004530 <QActive_start_>
       2U,                          // QP prio. of the AO
       blinkyQueueSto,               // event queue storage
       Q_DIM(blinkyQueueSto),       // queue length [events]
       (void *)0, 0U,               // no stack storage
       (void *)0);                  // no initialization param// start the AOs/Threads
   QACTIVE_START(super_button,
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <main+0x70>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2300      	movs	r3, #0
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	2300      	movs	r3, #0
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	230a      	movs	r3, #10
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <main+0x74>)
 800099c:	2101      	movs	r1, #1
 800099e:	f003 fdc7 	bl	8004530 <QActive_start_>
       1U,                          // QP prio. of the AO
 	  ButtonQueueSto,               // event queue storage
       Q_DIM(ButtonQueueSto),       // queue length [events]
       (void *)0, 0U,               // no stack storage
       (void *)0);                  // no initialization param// start the AOs/Threads
   return QF_run(); // run the QF application
 80009a2:	f003 fda7 	bl	80044f4 <QF_run>
 80009a6:	4603      	mov	r3, r0
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08004630 	.word	0x08004630
 80009b4:	200000f4 	.word	0x200000f4
 80009b8:	08004634 	.word	0x08004634
 80009bc:	2000011c 	.word	0x2000011c

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2234      	movs	r2, #52	; 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fdf6 	bl	80045c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f90c 	bl	8001c6c <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 f94f 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fd7a 	bl	8001574 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a86:	f000 f939 	bl	8000cfc <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000ae0:	f001 fb62 	bl	80021a8 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f907 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000afc:	f001 fd0e 	bl	800251c <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b06:	f000 f8f9 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_TIM2_Init+0x94>)
 8000b18:	f001 ff36 	bl	8002988 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b22:	f000 f8eb 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000144 	.word	0x20000144

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f001 ff9c 	bl	8002aa8 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f8c1 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_GPIO_Init+0xb4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0xb8>)
 8000c14:	f000 fc94 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_GPIO_Init+0xbc>)
 8000c2e:	f000 fadb 	bl	80011e8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020800 	.word	0x40020800

08000c48 <SysTick_Handler>:

/* USER CODE BEGIN 4 */
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    QK_ISR_ENTRY();   // inform QK about entering an ISR

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f003 f994 	bl	8003f7c <QTimeEvt_tick_>
   // cnt++;
    QK_ISR_EXIT();    // inform QK about exiting an ISR
 8000c54:	f002 f9ec 	bl	8003030 <QF_int_disable_>
 8000c58:	f003 faa4 	bl	80041a4 <QK_sched_>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <SysTick_Handler+0x22>
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Handler+0x30>)
 8000c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	f002 f9f3 	bl	8003054 <QF_int_enable_>
 8000c6e:	f3bf 8f4f 	dsb	sy
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000ed04 	.word	0xe000ed04

08000c7c <Q_onError>:
Q_NORETURN Q_onError(char const * const module, int_t const id) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
//    for (;;) {
//    }
//#endif
//
//    NVIC_SystemReset();
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <QF_onStartup>:
void QF_onStartup(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <QF_onStartup+0x34>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <QF_onStartup+0x38>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe2d 	bl	8000904 <SysTick_Config>

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fddc 	bl	8000868 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(USART2_IRQn,    0); // kernel UNAWARE interrupt
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2026      	movs	r0, #38	; 0x26
 8000cb4:	f7ff fdfc 	bl	80008b0 <__NVIC_SetPriority>
 //   NVIC_SetPriority(EXTI0_1_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 0U);
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 1U);
 8000cb8:	2104      	movs	r1, #4
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbe:	f7ff fdf7 	bl	80008b0 <__NVIC_SetPriority>
  //  NVIC_EnableIRQ(EXTI0_1_IRQn);

#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); // UART2 interrupt used for QS-RX
#endif
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	51eb851f 	.word	0x51eb851f

08000cd0 <QK_onIdle>:
//............................................................................
void QF_onCleanup(void) {
}
//............................................................................
void QK_onIdle(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
    // The trick with BOOT(0) is it gets the part to run the System Loader
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    //__WFI(); // Wait-For-Interrupt
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cee:	d101      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf0:	f000 f978 	bl	8000fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fa19 	bl	800117e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db2:	230c      	movs	r3, #12
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000dce:	f000 fa0b 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <HAL_InitTick+0xe8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <HAL_InitTick+0xe8>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <HAL_InitTick+0xe8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e14:	f107 0210 	add.w	r2, r7, #16
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fcc2 	bl	80017a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2e:	f000 fc93 	bl	8001758 <HAL_RCC_GetPCLK1Freq>
 8000e32:	6378      	str	r0, [r7, #52]	; 0x34
 8000e34:	e004      	b.n	8000e40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e36:	f000 fc8f 	bl	8001758 <HAL_RCC_GetPCLK1Freq>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <HAL_InitTick+0xec>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	0c9b      	lsrs	r3, r3, #18
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e76:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e78:	f001 f996 	bl	80021a8 <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d11b      	bne.n	8000ec2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e8a:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <HAL_InitTick+0xf0>)
 8000e8c:	f001 f9e6 	bl	800225c <HAL_TIM_Base_Start_IT>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d111      	bne.n	8000ec2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f000 f994 	bl	80011cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	d808      	bhi.n	8000ebc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	201c      	movs	r0, #28
 8000eb0:	f000 f970 	bl	8001194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_InitTick+0xf4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e002      	b.n	8000ec2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	431bde83 	.word	0x431bde83
 8000ed8:	20000144 	.word	0x20000144
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <TIM2_IRQHandler+0x10>)
 8000f1a:	f001 fa0f 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000144 	.word	0x20000144

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fb29 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fce3 	bl	8000948 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f90:	080046c4 	.word	0x080046c4
  ldr r2, =_sbss
 8000f94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f98:	20000294 	.word	0x20000294

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f8d8 	bl	800117e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff ff0a 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe98 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000010 	.word	0x20000010
 8001008:	2000018c 	.word	0x2000018c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000018c 	.word	0x2000018c

08001024 <__NVIC_SetPriorityGrouping>:
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff4c 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a6:	f7ff ff61 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff ffb1 	bl	8001118 <NVIC_EncodePriority>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff80 	bl	80010c4 <__NVIC_SetPriority>
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff54 	bl	8001088 <__NVIC_EnableIRQ>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e165      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8154 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80ae 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a5c      	ldr	r2, [pc, #368]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x304>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x308>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x310>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x314>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x318>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x31c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x206>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x320>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x202>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_GPIO_Init+0x324>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x324>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_GPIO_Init+0x324>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x324>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_GPIO_Init+0x324>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_GPIO_Init+0x324>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_GPIO_Init+0x324>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae96 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fcd2 	bl	800100c <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff fcce 	bl	800100c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f887 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fb64 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	08004638 	.word	0x08004638
 8001738:	20000008 	.word	0x20000008
 800173c:	2000000c 	.word	0x2000000c

08001740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_RCC_GetHCLKFreq+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800175c:	f7ff fff0 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4903      	ldr	r1, [pc, #12]	; (800177c <HAL_RCC_GetPCLK1Freq+0x24>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	08004648 	.word	0x08004648

08001780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001784:	f7ff ffdc 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 8001788:	4602      	mov	r2, r0
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	0b5b      	lsrs	r3, r3, #13
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	4903      	ldr	r1, [pc, #12]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	08004648 	.word	0x08004648

080017a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	220f      	movs	r2, #15
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCC_GetClockConfig+0x5c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_GetClockConfig+0x5c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_RCC_GetClockConfig+0x60>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 020f 	and.w	r2, r3, #15
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b0ae      	sub	sp, #184	; 0xb8
 8001812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001832:	4bcb      	ldr	r3, [pc, #812]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b0c      	cmp	r3, #12
 800183c:	f200 8206 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x440>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	0800187d 	.word	0x0800187d
 800184c:	08001c4d 	.word	0x08001c4d
 8001850:	08001c4d 	.word	0x08001c4d
 8001854:	08001c4d 	.word	0x08001c4d
 8001858:	08001885 	.word	0x08001885
 800185c:	08001c4d 	.word	0x08001c4d
 8001860:	08001c4d 	.word	0x08001c4d
 8001864:	08001c4d 	.word	0x08001c4d
 8001868:	0800188d 	.word	0x0800188d
 800186c:	08001c4d 	.word	0x08001c4d
 8001870:	08001c4d 	.word	0x08001c4d
 8001874:	08001c4d 	.word	0x08001c4d
 8001878:	08001a7d 	.word	0x08001a7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4bb9      	ldr	r3, [pc, #740]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x358>)
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001882:	e1e7      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4bb8      	ldr	r3, [pc, #736]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800188a:	e1e3      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4bb4      	ldr	r3, [pc, #720]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001898:	4bb1      	ldr	r3, [pc, #708]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d071      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	2200      	movs	r2, #0
 80018ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80018ca:	4622      	mov	r2, r4
 80018cc:	462b      	mov	r3, r5
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	0159      	lsls	r1, r3, #5
 80018d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018dc:	0150      	lsls	r0, r2, #5
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4621      	mov	r1, r4
 80018e4:	1a51      	subs	r1, r2, r1
 80018e6:	6439      	str	r1, [r7, #64]	; 0x40
 80018e8:	4629      	mov	r1, r5
 80018ea:	eb63 0301 	sbc.w	r3, r3, r1
 80018ee:	647b      	str	r3, [r7, #68]	; 0x44
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018fc:	4649      	mov	r1, r9
 80018fe:	018b      	lsls	r3, r1, #6
 8001900:	4641      	mov	r1, r8
 8001902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001906:	4641      	mov	r1, r8
 8001908:	018a      	lsls	r2, r1, #6
 800190a:	4641      	mov	r1, r8
 800190c:	1a51      	subs	r1, r2, r1
 800190e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001910:	4649      	mov	r1, r9
 8001912:	eb63 0301 	sbc.w	r3, r3, r1
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001924:	4649      	mov	r1, r9
 8001926:	00cb      	lsls	r3, r1, #3
 8001928:	4641      	mov	r1, r8
 800192a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800192e:	4641      	mov	r1, r8
 8001930:	00ca      	lsls	r2, r1, #3
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	4603      	mov	r3, r0
 8001938:	4622      	mov	r2, r4
 800193a:	189b      	adds	r3, r3, r2
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
 800193e:	462b      	mov	r3, r5
 8001940:	460a      	mov	r2, r1
 8001942:	eb42 0303 	adc.w	r3, r2, r3
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001954:	4629      	mov	r1, r5
 8001956:	024b      	lsls	r3, r1, #9
 8001958:	4621      	mov	r1, r4
 800195a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800195e:	4621      	mov	r1, r4
 8001960:	024a      	lsls	r2, r1, #9
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800196a:	2200      	movs	r2, #0
 800196c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001974:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001978:	f7fe fc44 	bl	8000204 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001986:	e067      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	2200      	movs	r2, #0
 8001990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001994:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80019a2:	2300      	movs	r3, #0
 80019a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80019aa:	4622      	mov	r2, r4
 80019ac:	462b      	mov	r3, r5
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	0159      	lsls	r1, r3, #5
 80019b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019bc:	0150      	lsls	r0, r2, #5
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4621      	mov	r1, r4
 80019c4:	1a51      	subs	r1, r2, r1
 80019c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80019c8:	4629      	mov	r1, r5
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80019dc:	4649      	mov	r1, r9
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	4641      	mov	r1, r8
 80019e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e6:	4641      	mov	r1, r8
 80019e8:	018a      	lsls	r2, r1, #6
 80019ea:	4641      	mov	r1, r8
 80019ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f0:	4649      	mov	r1, r9
 80019f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a0a:	4692      	mov	sl, r2
 8001a0c:	469b      	mov	fp, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	eb1a 0303 	adds.w	r3, sl, r3
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	462b      	mov	r3, r5
 8001a18:	eb4b 0303 	adc.w	r3, fp, r3
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	028b      	lsls	r3, r1, #10
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a34:	4621      	mov	r1, r4
 8001a36:	028a      	lsls	r2, r1, #10
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a40:	2200      	movs	r2, #0
 8001a42:	673b      	str	r3, [r7, #112]	; 0x70
 8001a44:	677a      	str	r2, [r7, #116]	; 0x74
 8001a46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a4a:	f7fe fbdb 	bl	8000204 <__aeabi_uldivmod>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4613      	mov	r3, r2
 8001a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8001a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a7a:	e0eb      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d06b      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8001aac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac2:	0150      	lsls	r0, r2, #5
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4621      	mov	r1, r4
 8001aca:	1a51      	subs	r1, r2, r1
 8001acc:	61b9      	str	r1, [r7, #24]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ae2:	4659      	mov	r1, fp
 8001ae4:	018b      	lsls	r3, r1, #6
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aec:	4651      	mov	r1, sl
 8001aee:	018a      	lsls	r2, r1, #6
 8001af0:	4651      	mov	r1, sl
 8001af2:	ebb2 0801 	subs.w	r8, r2, r1
 8001af6:	4659      	mov	r1, fp
 8001af8:	eb63 0901 	sbc.w	r9, r3, r1
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b10:	4690      	mov	r8, r2
 8001b12:	4699      	mov	r9, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	eb18 0303 	adds.w	r3, r8, r3
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	eb49 0303 	adc.w	r3, r9, r3
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b30:	4629      	mov	r1, r5
 8001b32:	024b      	lsls	r3, r1, #9
 8001b34:	4621      	mov	r1, r4
 8001b36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	024a      	lsls	r2, r1, #9
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b46:	2200      	movs	r2, #0
 8001b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b50:	f7fe fb58 	bl	8000204 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b5e:	e065      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x420>
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	2200      	movs	r2, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	4611      	mov	r1, r2
 8001b78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54
 8001b82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b86:	4642      	mov	r2, r8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b98:	0150      	lsls	r0, r2, #5
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	1a51      	subs	r1, r2, r1
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001bb8:	4659      	mov	r1, fp
 8001bba:	018b      	lsls	r3, r1, #6
 8001bbc:	4651      	mov	r1, sl
 8001bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc2:	4651      	mov	r1, sl
 8001bc4:	018a      	lsls	r2, r1, #6
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	1a54      	subs	r4, r2, r1
 8001bca:	4659      	mov	r1, fp
 8001bcc:	eb63 0501 	sbc.w	r5, r3, r1
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c14:	2200      	movs	r2, #0
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c1e:	f7fe faf1 	bl	8000204 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0f1b      	lsrs	r3, r3, #28
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8001c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c4a:	e003      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	37b8      	adds	r7, #184	; 0xb8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	00f42400 	.word	0x00f42400

08001c6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e28d      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8083 	beq.w	8001d92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d019      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c98:	4b91      	ldr	r3, [pc, #580]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ca4:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x124>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e25a      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x90>
 8001cee:	4b7c      	ldr	r3, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xcc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0xb4>
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a75      	ldr	r2, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a72      	ldr	r2, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xcc>
 8001d20:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f964 	bl	800100c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f960 	bl	800100c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e21f      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b61      	ldr	r3, [pc, #388]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f950 	bl	800100c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f94c 	bl	800100c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e20b      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x104>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d06f      	beq.n	8001e7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d017      	beq.n	8001dda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
        || \
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x186>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1d3      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x278>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8f9 	bl	800100c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f8f5 	bl	800100c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1b4      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x278>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f8d8 	bl	800100c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f8d4 	bl	800100c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e193      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d036      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d016      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f8b8 	bl	800100c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f8b4 	bl	800100c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e173      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x234>
 8001ebe:	e01b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f8a1 	bl	800100c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e00e      	b.n	8001eec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff f89d 	bl	800100c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d907      	bls.n	8001eec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e15c      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	42470000 	.word	0x42470000
 8001ee8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ea      	bne.n	8001ece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8097 	beq.w	8002034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b83      	ldr	r3, [pc, #524]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10f      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b79      	ldr	r3, [pc, #484]	; (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	; (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f85d 	bl	800100c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff f859 	bl	800100c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e118      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b6c      	ldr	r3, [pc, #432]	; (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x31e>
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x358>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x340>
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a60      	ldr	r2, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	4a5d      	ldr	r2, [pc, #372]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x358>
 8001fac:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a59      	ldr	r2, [pc, #356]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f81e 	bl	800100c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f81a 	bl	800100c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0d7      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ee      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x368>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f808 	bl	800100c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff f804 	bl	800100c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0c1      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ee      	bne.n	8002000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ad 	beq.w	8002198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d060      	beq.n	800210c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d145      	bne.n	80020de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x4b4>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ffd8 	bl	800100c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ffd4 	bl	800100c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e093      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	071b      	lsls	r3, r3, #28
 80020aa:	491b      	ldr	r1, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x4b4>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe ffa9 	bl	800100c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe ffa5 	bl	800100c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e064      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x452>
 80020dc:	e05c      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x4b4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe ff92 	bl	800100c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe ff8e 	bl	800100c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04d      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x480>
 800210a:	e045      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e040      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
 8002118:	40023800 	.word	0x40023800
 800211c:	40007000 	.word	0x40007000
 8002120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x538>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d030      	beq.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d129      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d122      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800215a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800215c:	4293      	cmp	r3, r2
 800215e:	d119      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d10f      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e041      	b.n	800223e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f839 	bl	8002246 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f000 fa88 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e04e      	b.n	8002312 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_TIM_Base_Start_IT+0xc4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d022      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d01d      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_TIM_Base_Start_IT+0xc8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <HAL_TIM_Base_Start_IT+0xcc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_TIM_Base_Start_IT+0xd0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_TIM_Base_Start_IT+0xd4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_TIM_Base_Start_IT+0xd8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x80>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_TIM_Base_Start_IT+0xdc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d111      	bne.n	8002300 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d010      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fe:	e007      	b.n	8002310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40010400 	.word	0x40010400
 8002334:	40014000 	.word	0x40014000
 8002338:	40001800 	.word	0x40001800

0800233c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d020      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01b      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0202 	mvn.w	r2, #2
 8002370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f999 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f98b 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f99c 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d020      	beq.n	80023ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01b      	beq.n	80023ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0204 	mvn.w	r2, #4
 80023bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f973 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f965 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f976 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d020      	beq.n	8002438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01b      	beq.n	8002438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0208 	mvn.w	r2, #8
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2204      	movs	r2, #4
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f94d 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f93f 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f950 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d020      	beq.n	8002484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01b      	beq.n	8002484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0210 	mvn.w	r2, #16
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2208      	movs	r2, #8
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f927 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f919 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f92a 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0201 	mvn.w	r2, #1
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fc1b 	bl	8000cde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fae4 	bl	8002a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8fb 	bl	80026e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0220 	mvn.w	r2, #32
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fab6 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_TIM_ConfigClockSource+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e0b4      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x186>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002570:	d03e      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002576:	f200 8087 	bhi.w	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	f000 8086 	beq.w	800268e <HAL_TIM_ConfigClockSource+0x172>
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d87f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d01a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xa6>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d87b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d050      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x11a>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d877      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d03c      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xfa>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d873      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d058      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x13a>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d86f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d064      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d86b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d060      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d867      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d05c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d05a      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	e062      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025d2:	f000 f9b9 	bl	8002948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
      break;
 80025ee:	e04f      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	f000 f9a2 	bl	8002948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002612:	609a      	str	r2, [r3, #8]
      break;
 8002614:	e03c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	461a      	mov	r2, r3
 8002624:	f000 f916 	bl	8002854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2150      	movs	r1, #80	; 0x50
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f96f 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 8002634:	e02c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002642:	461a      	mov	r2, r3
 8002644:	f000 f935 	bl	80028b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2160      	movs	r1, #96	; 0x60
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f95f 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 8002654:	e01c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8f6 	bl	8002854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f94f 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 8002674:	e00c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f000 f946 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 8002686:	e003      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e000      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800268e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <TIM_Base_SetConfig+0x12c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d00f      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a43      	ldr	r2, [pc, #268]	; (800282c <TIM_Base_SetConfig+0x130>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00b      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a42      	ldr	r2, [pc, #264]	; (8002830 <TIM_Base_SetConfig+0x134>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a41      	ldr	r2, [pc, #260]	; (8002834 <TIM_Base_SetConfig+0x138>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a40      	ldr	r2, [pc, #256]	; (8002838 <TIM_Base_SetConfig+0x13c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a35      	ldr	r2, [pc, #212]	; (8002828 <TIM_Base_SetConfig+0x12c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d027      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a32      	ldr	r2, [pc, #200]	; (800282c <TIM_Base_SetConfig+0x130>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d023      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a31      	ldr	r2, [pc, #196]	; (8002830 <TIM_Base_SetConfig+0x134>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01f      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a30      	ldr	r2, [pc, #192]	; (8002834 <TIM_Base_SetConfig+0x138>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <TIM_Base_SetConfig+0x13c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d017      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2e      	ldr	r2, [pc, #184]	; (800283c <TIM_Base_SetConfig+0x140>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2d      	ldr	r2, [pc, #180]	; (8002840 <TIM_Base_SetConfig+0x144>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00f      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <TIM_Base_SetConfig+0x148>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <TIM_Base_SetConfig+0x14c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <TIM_Base_SetConfig+0x150>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <TIM_Base_SetConfig+0x154>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <TIM_Base_SetConfig+0x12c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0xf8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <TIM_Base_SetConfig+0x13c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
  }
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40010000 	.word	0x40010000
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800
 8002834:	40000c00 	.word	0x40000c00
 8002838:	40010400 	.word	0x40010400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800
 8002848:	40001800 	.word	0x40001800
 800284c:	40001c00 	.word	0x40001c00
 8002850:	40002000 	.word	0x40002000

08002854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 030a 	bic.w	r3, r3, #10
 8002890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 0210 	bic.w	r2, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	031b      	lsls	r3, r3, #12
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	f043 0307 	orr.w	r3, r3, #7
 8002934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	021a      	lsls	r2, r3, #8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	431a      	orrs	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800299c:	2302      	movs	r3, #2
 800299e:	e05a      	b.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d01d      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10c      	bne.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40010400 	.word	0x40010400
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40001800 	.word	0x40001800

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e042      	b.n	8002b40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f942 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f82b 	bl	8002b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	b0c0      	sub	sp, #256	; 0x100
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	ea40 0301 	orr.w	r3, r0, r1
 8002b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ba0:	f021 010c 	bic.w	r1, r1, #12
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	6999      	ldr	r1, [r3, #24]
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	ea40 0301 	orr.w	r3, r0, r1
 8002bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <UART_SetConfig+0x2cc>)
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d005      	beq.n	8002be8 <UART_SetConfig+0xa0>
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <UART_SetConfig+0x2d0>)
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d104      	bne.n	8002bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7fe fdca 	bl	8001780 <HAL_RCC_GetPCLK2Freq>
 8002bec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bf0:	e003      	b.n	8002bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bf2:	f7fe fdb1 	bl	8001758 <HAL_RCC_GetPCLK1Freq>
 8002bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	f040 810c 	bne.w	8002e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	1891      	adds	r1, r2, r2
 8002c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c22:	415b      	adcs	r3, r3
 8002c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	eb12 0801 	adds.w	r8, r2, r1
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb43 0901 	adc.w	r9, r3, r1
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c4a:	4690      	mov	r8, r2
 8002c4c:	4699      	mov	r9, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	eb18 0303 	adds.w	r3, r8, r3
 8002c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c58:	462b      	mov	r3, r5
 8002c5a:	eb49 0303 	adc.w	r3, r9, r3
 8002c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c76:	460b      	mov	r3, r1
 8002c78:	18db      	adds	r3, r3, r3
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	eb42 0303 	adc.w	r3, r2, r3
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
 8002c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c8c:	f7fd faba 	bl	8000204 <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	011c      	lsls	r4, r3, #4
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	1891      	adds	r1, r2, r2
 8002cb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb8:	415b      	adcs	r3, r3
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce0:	4692      	mov	sl, r2
 8002ce2:	469b      	mov	fp, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8002cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	18db      	adds	r3, r3, r3
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
 8002d12:	4613      	mov	r3, r2
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d22:	f7fd fa6f 	bl	8000204 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2264      	movs	r2, #100	; 0x64
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	1acb      	subs	r3, r1, r3
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002d44:	fba3 2302 	umull	r2, r3, r3, r2
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d50:	441c      	add	r4, r3
 8002d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d64:	4642      	mov	r2, r8
 8002d66:	464b      	mov	r3, r9
 8002d68:	1891      	adds	r1, r2, r2
 8002d6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d6c:	415b      	adcs	r3, r3
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d74:	4641      	mov	r1, r8
 8002d76:	1851      	adds	r1, r2, r1
 8002d78:	6339      	str	r1, [r7, #48]	; 0x30
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	414b      	adcs	r3, r1
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	00cb      	lsls	r3, r1, #3
 8002d90:	4651      	mov	r1, sl
 8002d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d96:	4651      	mov	r1, sl
 8002d98:	00ca      	lsls	r2, r1, #3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4642      	mov	r2, r8
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da8:	464b      	mov	r3, r9
 8002daa:	460a      	mov	r2, r1
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dde:	f7fd fa11 	bl	8000204 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4422      	add	r2, r4
 8002e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e10:	e106      	b.n	8003020 <UART_SetConfig+0x4d8>
 8002e12:	bf00      	nop
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40011400 	.word	0x40011400
 8002e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e32:	4642      	mov	r2, r8
 8002e34:	464b      	mov	r3, r9
 8002e36:	1891      	adds	r1, r2, r2
 8002e38:	6239      	str	r1, [r7, #32]
 8002e3a:	415b      	adcs	r3, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e42:	4641      	mov	r1, r8
 8002e44:	1854      	adds	r4, r2, r1
 8002e46:	4649      	mov	r1, r9
 8002e48:	eb43 0501 	adc.w	r5, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	00eb      	lsls	r3, r5, #3
 8002e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5a:	00e2      	lsls	r2, r4, #3
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	461d      	mov	r5, r3
 8002e60:	4643      	mov	r3, r8
 8002e62:	18e3      	adds	r3, r4, r3
 8002e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e68:	464b      	mov	r3, r9
 8002e6a:	eb45 0303 	adc.w	r3, r5, r3
 8002e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e8e:	4629      	mov	r1, r5
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e98:	4621      	mov	r1, r4
 8002e9a:	008a      	lsls	r2, r1, #2
 8002e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ea0:	f7fd f9b0 	bl	8000204 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4b60      	ldr	r3, [pc, #384]	; (800302c <UART_SetConfig+0x4e4>)
 8002eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	011c      	lsls	r4, r3, #4
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	61b9      	str	r1, [r7, #24]
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	1851      	adds	r1, r2, r1
 8002ed8:	6139      	str	r1, [r7, #16]
 8002eda:	4649      	mov	r1, r9
 8002edc:	414b      	adcs	r3, r1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eec:	4659      	mov	r1, fp
 8002eee:	00cb      	lsls	r3, r1, #3
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	00ca      	lsls	r2, r1, #3
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	4642      	mov	r2, r8
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f08:	464b      	mov	r3, r9
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	008b      	lsls	r3, r1, #2
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f36:	4641      	mov	r1, r8
 8002f38:	008a      	lsls	r2, r1, #2
 8002f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f3e:	f7fd f961 	bl	8000204 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	4b38      	ldr	r3, [pc, #224]	; (800302c <UART_SetConfig+0x4e4>)
 8002f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2264      	movs	r2, #100	; 0x64
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	1acb      	subs	r3, r1, r3
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	3332      	adds	r3, #50	; 0x32
 8002f5c:	4a33      	ldr	r2, [pc, #204]	; (800302c <UART_SetConfig+0x4e4>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f68:	441c      	add	r4, r3
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6e:	2200      	movs	r2, #0
 8002f70:	673b      	str	r3, [r7, #112]	; 0x70
 8002f72:	677a      	str	r2, [r7, #116]	; 0x74
 8002f74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	415b      	adcs	r3, r3
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f88:	4641      	mov	r1, r8
 8002f8a:	1851      	adds	r1, r2, r1
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	4649      	mov	r1, r9
 8002f90:	414b      	adcs	r3, r1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	00cb      	lsls	r3, r1, #3
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002faa:	4651      	mov	r1, sl
 8002fac:	00ca      	lsls	r2, r1, #3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fba:	464b      	mov	r3, r9
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	eb42 0303 	adc.w	r3, r2, r3
 8002fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fce:	667a      	str	r2, [r7, #100]	; 0x64
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fdc:	4649      	mov	r1, r9
 8002fde:	008b      	lsls	r3, r1, #2
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	008a      	lsls	r2, r1, #2
 8002fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fee:	f7fd f909 	bl	8000204 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <UART_SetConfig+0x4e4>)
 8002ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	2164      	movs	r1, #100	; 0x64
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	3332      	adds	r3, #50	; 0x32
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <UART_SetConfig+0x4e4>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4422      	add	r2, r4
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003026:	46bd      	mov	sp, r7
 8003028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <QF_int_disable_>:
// On ARMv7-M and higher, interrupts are disabled *selectively* with the
// BASEPRI register.
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_disable_(void) {
__asm volatile (
 8003030:	f3ef 8011 	mrs	r0, BASEPRI
 8003034:	213f      	movs	r1, #63	; 0x3f
 8003036:	f381 8811 	msr	BASEPRI, r1
 800303a:	2800      	cmp	r0, #0
 800303c:	d100      	bne.n	8003040 <QF_int_disable_error>
 800303e:	4770      	bx	lr

08003040 <QF_int_disable_error>:
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <QF_int_disable_error+0xc>)
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <QF_int_disable_error+0x10>)
 8003046:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8003048:	bf00      	nop
 800304a:	0000      	.short	0x0000
 800304c:	08004650 	.word	0x08004650
 8003050:	08000c7d 	.word	0x08000c7d

08003054 <QF_int_enable_>:
// On ARMv6-M, interrupts are enabled with the PRIMASK register.
// On ARMv7-M and higher, interrupts are enabled with the BASEPRI register.
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_enable_(void) {
__asm volatile (
 8003054:	f3ef 8011 	mrs	r0, BASEPRI
 8003058:	2800      	cmp	r0, #0
 800305a:	d003      	beq.n	8003064 <QF_int_enable_error>
 800305c:	2100      	movs	r1, #0
 800305e:	f381 8811 	msr	BASEPRI, r1
 8003062:	4770      	bx	lr

08003064 <QF_int_enable_error>:
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <QF_int_enable_error+0xc>)
 8003066:	2165      	movs	r1, #101	; 0x65
 8003068:	4a02      	ldr	r2, [pc, #8]	; (8003074 <QF_int_enable_error+0x10>)
 800306a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800306c:	bf00      	nop
 800306e:	0000      	.short	0x0000
 8003070:	08004650 	.word	0x08004650
 8003074:	08000c7d 	.word	0x08000c7d

08003078 <QF_crit_entry_>:
// NOT disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_entry_(void) {
__asm volatile (
 8003078:	f3ef 8011 	mrs	r0, BASEPRI
 800307c:	213f      	movs	r1, #63	; 0x3f
 800307e:	f381 8811 	msr	BASEPRI, r1
 8003082:	2800      	cmp	r0, #0
 8003084:	d100      	bne.n	8003088 <QF_crit_entry_error>
 8003086:	4770      	bx	lr

08003088 <QF_crit_entry_error>:
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <QF_crit_entry_error+0xc>)
 800308a:	216e      	movs	r1, #110	; 0x6e
 800308c:	4a02      	ldr	r2, [pc, #8]	; (8003098 <QF_crit_entry_error+0x10>)
 800308e:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8003090:	bf00      	nop
 8003092:	0000      	.short	0x0000
 8003094:	08004650 	.word	0x08004650
 8003098:	08000c7d 	.word	0x08000c7d

0800309c <QF_crit_exit_>:
// disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_exit_(void) {
__asm volatile (
 800309c:	f3ef 8011 	mrs	r0, BASEPRI
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d003      	beq.n	80030ac <QF_crit_exit_error>
 80030a4:	2100      	movs	r1, #0
 80030a6:	f381 8811 	msr	BASEPRI, r1
 80030aa:	4770      	bx	lr

080030ac <QF_crit_exit_error>:
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <QF_crit_exit_error+0xc>)
 80030ae:	216f      	movs	r1, #111	; 0x6f
 80030b0:	4a02      	ldr	r2, [pc, #8]	; (80030bc <QF_crit_exit_error+0x10>)
 80030b2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80030b4:	bf00      	nop
 80030b6:	0000      	.short	0x0000
 80030b8:	08004650 	.word	0x08004650
 80030bc:	08000c7d 	.word	0x08000c7d

080030c0 <QK_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// The interrupt priorities established in QK_init() can be later
// changed by the application-level code.
void QK_init(void) {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <QK_init+0x68>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <QK_init+0x68>)
 80030cc:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 80030d0:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	e00b      	b.n	80030f0 <QK_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80030e0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80030e4:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 80030e8:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3301      	adds	r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b3b      	cmp	r3, #59	; 0x3b
 80030f4:	d9f0      	bls.n	80030d8 <QK_init+0x18>
    }

#endif                  //--------- ARMv7-M or higher

    // SCB_SYSPRI[2]: PendSV set to priority 0xFF (lowest)
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (0xFFU << 16U));
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <QK_init+0x68>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <QK_init+0x68>)
 80030fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003100:	6013      	str	r3, [r2, #0]
    NVIC_EN[QK_USE_IRQ_NUM >> 5U] = (1U << (QK_USE_IRQ_NUM & 0x1FU));
#endif                  //--------- QK IRQ specified

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <QK_init+0x6c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <QK_init+0x6c>)
 8003108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800310c:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <QK_init+0x70>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <QK_init+0x70>)
 8003114:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003118:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000ed20 	.word	0xe000ed20
 800312c:	e000ed88 	.word	0xe000ed88
 8003130:	e000ef34 	.word	0xe000ef34

08003134 <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 8003134:	b501      	push	{r0, lr}
 8003136:	480c      	ldr	r0, [pc, #48]	; (8003168 <PendSV_Handler+0x34>)
 8003138:	4780      	blx	r0
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <PendSV_Handler+0x38>)
 800313c:	f04f 0101 	mov.w	r1, #1
 8003140:	ea4f 61c1 	mov.w	r1, r1, lsl #27
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <PendSV_Handler+0x3c>)
 800314c:	f1a2 0201 	sub.w	r2, r2, #1
 8003150:	4908      	ldr	r1, [pc, #32]	; (8003174 <PendSV_Handler+0x40>)
 8003152:	b088      	sub	sp, #32
 8003154:	a805      	add	r0, sp, #20
 8003156:	c00e      	stmia	r0!, {r1, r2, r3}
 8003158:	f04f 0006 	mov.w	r0, #6
 800315c:	ea6f 0000 	mvn.w	r0, r0
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 8003166:	bf00      	nop
 8003168:	08003031 	.word	0x08003031
 800316c:	e000ed04 	.word	0xe000ed04
 8003170:	0800426d 	.word	0x0800426d
 8003174:	08003179 	.word	0x08003179

08003178 <QK_thread_ret>:
//
// NOTE: QK_thread_ret does not execute in the PendSV context!
// NOTE: QK_thread_ret is entered with interrupts DISABLED.
__attribute__ ((naked, used, optimize("-fno-stack-protector")))
void QK_thread_ret(void) {
__asm volatile (
 8003178:	f3ef 8014 	mrs	r0, CONTROL
 800317c:	f020 0004 	bic.w	r0, r0, #4
 8003180:	f380 8814 	msr	CONTROL, r0
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	4803      	ldr	r0, [pc, #12]	; (8003198 <QK_thread_ret+0x20>)
 800318a:	f04f 0101 	mov.w	r1, #1
 800318e:	ea4f 71c1 	mov.w	r1, r1, lsl #31
 8003192:	6001      	str	r1, [r0, #0]
 8003194:	e7fe      	b.n	8003194 <QK_thread_ret+0x1c>
#endif                  //--------- use IRQ

    // NOTE! interrupts are still disabled when NMI is used
    "  B       .                \n" // wait for preemption by NMI/IRQ
    );
}
 8003196:	bf00      	nop
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <NMI_Handler>:
__attribute__ ((naked, optimize("-fno-stack-protector")))
#ifndef QK_USE_IRQ_NUM  //--------- IRQ NOT defined, use NMI by default

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
void NMI_Handler(void) {
__asm volatile (
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <NMI_Handler+0xc>)
 800319e:	4780      	blx	r0
// NOTE: The IRQ Handler is entered with interrupts already ENABLED
void QK_USE_IRQ_HANDLER(void) {
#endif                  //--------- use IRQ

  // ...continue here from either NMI_Handler() or IRQ_Handler()
__asm volatile (
 80031a0:	b008      	add	sp, #32
 80031a2:	bd01      	pop	{r0, pc}
    "  ADD     sp,sp,#(8*4)     \n" // remove one 8-register exception frame
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
}
 80031a4:	bf00      	nop
 80031a6:	0000      	.short	0x0000
 80031a8:	08003055 	.word	0x08003055

080031ac <QEvt_verify_>:
}

// private:

//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    return (me != (QEvt const *)0)
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <QEvt_verify_+0x1e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c2:	2be0      	cmp	r3, #224	; 0xe0
 80031c4:	d101      	bne.n	80031ca <QEvt_verify_+0x1e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <QEvt_verify_+0x20>
 80031ca:	2300      	movs	r3, #0
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <QHsm_ctor+0x28>)
 80031ee:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a06      	ldr	r2, [pc, #24]	; (800320c <QHsm_ctor+0x2c>)
 80031f4:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	08004670 	.word	0x08004670
 800320c:	08003829 	.word	0x08003829

08003210 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	; 0x38
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler t = me->state.fun;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	637b      	str	r3, [r7, #52]	; 0x34

    QF_CRIT_ENTRY();
 8003222:	f7ff ff29 	bl	8003078 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <QHsm_init_+0x2e>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <QHsm_init_+0x2e>
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	4a45      	ldr	r2, [pc, #276]	; (8003350 <QHsm_init_+0x140>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <QHsm_init_+0x36>
 800323e:	21c8      	movs	r1, #200	; 0xc8
 8003240:	4844      	ldr	r0, [pc, #272]	; (8003354 <QHsm_init_+0x144>)
 8003242:	f7fd fd1b 	bl	8000c7c <Q_onError>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 8003246:	f7ff ff29 	bl	800309c <QF_crit_exit_>

    // execute the top-most initial tran.
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    QF_CRIT_ENTRY();
 800325a:	f7ff ff0d 	bl	8003078 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 800325e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003262:	2b08      	cmp	r3, #8
 8003264:	d003      	beq.n	800326e <QHsm_init_+0x5e>
 8003266:	21d2      	movs	r1, #210	; 0xd2
 8003268:	483a      	ldr	r0, [pc, #232]	; (8003354 <QHsm_init_+0x144>)
 800326a:	f7fd fd07 	bl	8000c7c <Q_onError>
        QS_FUN_PRE_(t);            // the source state
        QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 800326e:	f7ff ff15 	bl	800309c <QF_crit_exit_>

    // drill down into the state hierarchy with initial transitions...
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8003272:	2306      	movs	r3, #6
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran entry path array
        int_fast8_t ip = 0; // tran entry path index
 8003276:	2300      	movs	r3, #0
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c

        path[0] = me->temp.fun;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	613b      	str	r3, [r7, #16]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4934      	ldr	r1, [pc, #208]	; (8003358 <QHsm_init_+0x148>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 800328a:	e00f      	b.n	80032ac <QHsm_init_+0x9c>
            ++ip;
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	3301      	adds	r3, #1
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[ip] = me->temp.fun;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3338      	adds	r3, #56	; 0x38
 800329c:	443b      	add	r3, r7
 800329e:	f843 2c28 	str.w	r2, [r3, #-40]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	492c      	ldr	r1, [pc, #176]	; (8003358 <QHsm_init_+0x148>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d002      	beq.n	80032bc <QHsm_init_+0xac>
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	dde7      	ble.n	800328c <QHsm_init_+0x7c>
        }
        QF_CRIT_ENTRY();
 80032bc:	f7ff fedc 	bl	8003078 <QF_crit_entry_>
        // The initial transition source state must be reached
        // Too many state nesting levels or "malformed" HSM.
        Q_ASSERT_INCRIT(220, me->temp.fun == t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d003      	beq.n	80032d2 <QHsm_init_+0xc2>
 80032ca:	21dc      	movs	r1, #220	; 0xdc
 80032cc:	4821      	ldr	r0, [pc, #132]	; (8003354 <QHsm_init_+0x144>)
 80032ce:	f7fd fcd5 	bl	8000c7c <Q_onError>
        QF_CRIT_EXIT();
 80032d2:	f7ff fee3 	bl	800309c <QF_crit_exit_>

        me->temp.fun = path[0];
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	443b      	add	r3, r7
 80032e4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80032e8:	491c      	ldr	r1, [pc, #112]	; (800335c <QHsm_init_+0x14c>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	3b01      	subs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (ip >= 0);
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	daf0      	bge.n	80032dc <QHsm_init_+0xcc>

        t = path[0]; // current state becomes the new source
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	4917      	ldr	r1, [pc, #92]	; (8003360 <QHsm_init_+0x150>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	4798      	blx	r3
 8003306:	4603      	mov	r3, r0
 8003308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        --limit;
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	3b01      	subs	r3, #1
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
    } while ((r == Q_RET_TRAN) && (limit > 0));
 8003312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003316:	2b08      	cmp	r3, #8
 8003318:	d102      	bne.n	8003320 <QHsm_init_+0x110>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2b00      	cmp	r3, #0
 800331e:	dcaa      	bgt.n	8003276 <QHsm_init_+0x66>

    QF_CRIT_ENTRY();
 8003320:	f7ff feaa 	bl	8003078 <QF_crit_entry_>
    // Loop limit must not be reached.
    // Too many state nesting levels or likely "malformed" HSM
    Q_ENSURE_INCRIT(290, limit > 0);
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2b00      	cmp	r3, #0
 8003328:	dc04      	bgt.n	8003334 <QHsm_init_+0x124>
 800332a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <QHsm_init_+0x144>)
 8003330:	f7fd fca4 	bl	8000c7c <Q_onError>
        QS_OBJ_PRE_(me);   // this state machine object
        QS_FUN_PRE_(t);    // the new active state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8003334:	f7ff feb2 	bl	800309c <QF_crit_exit_>

    me->state.fun = t;   // change the current active state
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333c:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	43da      	mvns	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
    #endif
}
 8003348:	bf00      	nop
 800334a:	3738      	adds	r7, #56	; 0x38
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	08003829 	.word	0x08003829
 8003354:	08004658 	.word	0x08004658
 8003358:	08004660 	.word	0x08004660
 800335c:	08004664 	.word	0x08004664
 8003360:	0800466c 	.word	0x0800466c

08003364 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b090      	sub	sp, #64	; 0x40
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    QStateHandler t = s;
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 800337a:	f7ff fe7d 	bl	8003078 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (s != Q_STATE_CAST(0))
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <QHsm_dispatch_+0x2e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	43db      	mvns	r3, r3
 800338e:	429a      	cmp	r2, r3
 8003390:	d004      	beq.n	800339c <QHsm_dispatch_+0x38>
 8003392:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003396:	4874      	ldr	r0, [pc, #464]	; (8003568 <QHsm_dispatch_+0x204>)
 8003398:	f7fd fc70 	bl	8000c7c <Q_onError>
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    Q_REQUIRE_INCRIT(302, QEvt_verify_(e));
 800339c:	68b8      	ldr	r0, [r7, #8]
 800339e:	f7ff ff05 	bl	80031ac <QEvt_verify_>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <QHsm_dispatch_+0x4e>
 80033a8:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80033ac:	486e      	ldr	r0, [pc, #440]	; (8003568 <QHsm_dispatch_+0x204>)
 80033ae:	f7fd fc65 	bl	8000c7c <Q_onError>
        QS_OBJ_PRE_(me);     // this state machine object
        QS_FUN_PRE_(s);      // the current state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 80033b2:	f7ff fe73 	bl	800309c <QF_crit_exit_>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ba:	609a      	str	r2, [r3, #8]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 80033bc:	2306      	movs	r3, #6
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
    do {
        s = me->temp.fun;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        r = (*s)(me, e); // invoke state handler s
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	4798      	blx	r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 80033d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d106      	bne.n	80033ea <QHsm_dispatch_+0x86>
                QS_FUN_PRE_(s);      // the current state
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	4963      	ldr	r1, [pc, #396]	; (800356c <QHsm_dispatch_+0x208>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	4798      	blx	r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        --limit;
 80033ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ec:	3b01      	subs	r3, #1
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
    } while ((r == Q_RET_SUPER) && (limit > 0));
 80033f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <QHsm_dispatch_+0x9a>
 80033f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	dce0      	bgt.n	80033c0 <QHsm_dispatch_+0x5c>

    QF_CRIT_ENTRY();
 80033fe:	f7ff fe3b 	bl	8003078 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, limit > 0);
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	2b00      	cmp	r3, #0
 8003406:	dc04      	bgt.n	8003412 <QHsm_dispatch_+0xae>
 8003408:	f44f 719b 	mov.w	r1, #310	; 0x136
 800340c:	4856      	ldr	r0, [pc, #344]	; (8003568 <QHsm_dispatch_+0x204>)
 800340e:	f7fd fc35 	bl	8000c7c <Q_onError>
    QF_CRIT_EXIT();
 8003412:	f7ff fe43 	bl	800309c <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // regular tran. taken?
 8003416:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800341a:	2b07      	cmp	r3, #7
 800341c:	f240 8098 	bls.w	8003550 <QHsm_dispatch_+0x1ec>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; // tran. target
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	617b      	str	r3, [r7, #20]
        path[1] = t; // current state
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	61bb      	str	r3, [r7, #24]
        path[2] = s; // tran. source
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	61fb      	str	r3, [r7, #28]

        // exit current state to tran. source s...
        limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 800342e:	2306      	movs	r3, #6
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8003432:	e010      	b.n	8003456 <QHsm_dispatch_+0xf2>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	494e      	ldr	r1, [pc, #312]	; (8003570 <QHsm_dispatch_+0x20c>)
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	4798      	blx	r3
 800343c:	4603      	mov	r3, r0
 800343e:	2b03      	cmp	r3, #3
 8003440:	d103      	bne.n	800344a <QHsm_dispatch_+0xe6>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	4949      	ldr	r1, [pc, #292]	; (800356c <QHsm_dispatch_+0x208>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	4798      	blx	r3
            }
            --limit;
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	3b01      	subs	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	429a      	cmp	r2, r3
 800345c:	d002      	beq.n	8003464 <QHsm_dispatch_+0x100>
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	dce7      	bgt.n	8003434 <QHsm_dispatch_+0xd0>
        }
        QF_CRIT_ENTRY();
 8003464:	f7ff fe08 	bl	8003078 <QF_crit_entry_>
        Q_ASSERT_INCRIT(320, limit > 0);
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc04      	bgt.n	8003478 <QHsm_dispatch_+0x114>
 800346e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003472:	483d      	ldr	r0, [pc, #244]	; (8003568 <QHsm_dispatch_+0x204>)
 8003474:	f7fd fc02 	bl	8000c7c <Q_onError>
        QF_CRIT_EXIT();
 8003478:	f7ff fe10 	bl	800309c <QF_crit_exit_>

        int_fast8_t ip = QHsm_tran_(me, path, qsId); // take the tran.
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8cb 	bl	8003620 <QHsm_tran_>
 800348a:	6338      	str	r0, [r7, #48]	; 0x30
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        // execute state entry actions in the desired order...
        for (; ip >= 0; --ip) {
 800348c:	e00b      	b.n	80034a6 <QHsm_dispatch_+0x142>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3340      	adds	r3, #64	; 0x40
 8003494:	443b      	add	r3, r7
 8003496:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800349a:	4936      	ldr	r1, [pc, #216]	; (8003574 <QHsm_dispatch_+0x210>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	3b01      	subs	r3, #1
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	daf0      	bge.n	800348e <QHsm_dispatch_+0x12a>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        me->temp.fun = t; // update the next state
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034b4:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80034b6:	e044      	b.n	8003542 <QHsm_dispatch_+0x1de>
                QS_FUN_PRE_(me->temp.fun); // the target of the tran.
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
            path[0] = me->temp.fun;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	617b      	str	r3, [r7, #20]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4929      	ldr	r1, [pc, #164]	; (800356c <QHsm_dispatch_+0x208>)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	4798      	blx	r3

            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80034cc:	e00f      	b.n	80034ee <QHsm_dispatch_+0x18a>
                ++ip;
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	3301      	adds	r3, #1
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
                path[ip] = me->temp.fun;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	443b      	add	r3, r7
 80034e0:	f843 2c2c 	str.w	r2, [r3, #-44]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4920      	ldr	r1, [pc, #128]	; (800356c <QHsm_dispatch_+0x208>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d002      	beq.n	80034fe <QHsm_dispatch_+0x19a>
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	dde7      	ble.n	80034ce <QHsm_dispatch_+0x16a>
            }
            QF_CRIT_ENTRY();
 80034fe:	f7ff fdbb 	bl	8003078 <QF_crit_entry_>
            // The initial transition source state must be reached.
            // Too many state nesting levels or "malformed" HSM.
            Q_ASSERT_INCRIT(330, me->temp.fun == t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003508:	429a      	cmp	r2, r3
 800350a:	d004      	beq.n	8003516 <QHsm_dispatch_+0x1b2>
 800350c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <QHsm_dispatch_+0x204>)
 8003512:	f7fd fbb3 	bl	8000c7c <Q_onError>
            QF_CRIT_EXIT();
 8003516:	f7ff fdc1 	bl	800309c <QF_crit_exit_>

            me->temp.fun = path[0];
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3340      	adds	r3, #64	; 0x40
 8003526:	443b      	add	r3, r7
 8003528:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800352c:	4911      	ldr	r1, [pc, #68]	; (8003574 <QHsm_dispatch_+0x210>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	3b01      	subs	r3, #1
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
            } while (ip >= 0);
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	daf0      	bge.n	8003520 <QHsm_dispatch_+0x1bc>

            t = path[0]; // current state becomes the new source
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8003542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <QHsm_dispatch_+0x214>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	4798      	blx	r3
 800354a:	4603      	mov	r3, r0
 800354c:	2b08      	cmp	r3, #8
 800354e:	d0b3      	beq.n	80034b8 <QHsm_dispatch_+0x154>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003554:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	43da      	mvns	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	609a      	str	r2, [r3, #8]
    #endif
}
 8003560:	bf00      	nop
 8003562:	3740      	adds	r7, #64	; 0x40
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08004658 	.word	0x08004658
 800356c:	08004660 	.word	0x08004660
 8003570:	08004668 	.word	0x08004668
 8003574:	08004664 	.word	0x08004664
 8003578:	0800466c 	.word	0x0800466c

0800357c <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003586:	f7ff fd77 	bl	8003078 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(602, me->state.uint
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	43db      	mvns	r3, r3
 8003594:	429a      	cmp	r2, r3
 8003596:	d004      	beq.n	80035a2 <QHsm_isIn_+0x26>
 8003598:	f240 215a 	movw	r1, #602	; 0x25a
 800359c:	481e      	ldr	r0, [pc, #120]	; (8003618 <QHsm_isIn_+0x9c>)
 800359e:	f7fd fb6d 	bl	8000c7c <Q_onError>
                      == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 80035a2:	f7ff fd7b 	bl	800309c <QF_crit_exit_>

    bool inState = false; // assume that this HSM is not in 'state'
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	613b      	str	r3, [r7, #16]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_ + 1; // loop hard limit
 80035b0:	2307      	movs	r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 80035b4:	2300      	movs	r3, #0
 80035b6:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 80035b8:	e012      	b.n	80035e0 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d102      	bne.n	80035c8 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 80035c6:	e011      	b.n	80035ec <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4914      	ldr	r1, [pc, #80]	; (800361c <QHsm_isIn_+0xa0>)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	4603      	mov	r3, r0
 80035d2:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d002      	beq.n	80035ec <QHsm_isIn_+0x70>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dce6      	bgt.n	80035ba <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 80035ec:	f7ff fd44 	bl	8003078 <QF_crit_entry_>
    Q_ENSURE_INCRIT(690, limit > 0);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	dc04      	bgt.n	8003600 <QHsm_isIn_+0x84>
 80035f6:	f240 21b2 	movw	r1, #690	; 0x2b2
 80035fa:	4807      	ldr	r0, [pc, #28]	; (8003618 <QHsm_isIn_+0x9c>)
 80035fc:	f7fd fb3e 	bl	8000c7c <Q_onError>
    QF_CRIT_EXIT();
 8003600:	f7ff fd4c 	bl	800309c <QF_crit_exit_>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	43da      	mvns	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	08004658 	.word	0x08004658
 800361c:	08004660 	.word	0x08004660

08003620 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	429a      	cmp	r2, r3
 8003644:	d106      	bne.n	8003654 <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4974      	ldr	r1, [pc, #464]	; (800381c <QHsm_tran_+0x1fc>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	e0d1      	b.n	80037f8 <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	4972      	ldr	r1, [pc, #456]	; (8003820 <QHsm_tran_+0x200>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	4798      	blx	r3

        t = me->temp.fun;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	429a      	cmp	r2, r3
 8003668:	d102      	bne.n	8003670 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	e0c3      	b.n	80037f8 <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	496b      	ldr	r1, [pc, #428]	; (8003820 <QHsm_tran_+0x200>)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	429a      	cmp	r2, r3
 8003680:	d106      	bne.n	8003690 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4965      	ldr	r1, [pc, #404]	; (800381c <QHsm_tran_+0x1fc>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e0b3      	b.n	80037f8 <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d104      	bne.n	80036a6 <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	495f      	ldr	r1, [pc, #380]	; (800381c <QHsm_tran_+0x1fc>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	4798      	blx	r3
 80036a4:	e0a8      	b.n	80037f8 <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      // save the superstate of target
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3304      	adds	r3, #4
 80036b2:	6a3a      	ldr	r2, [r7, #32]
 80036b4:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3304      	adds	r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4957      	ldr	r1, [pc, #348]	; (8003820 <QHsm_tran_+0x200>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	4798      	blx	r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 80036cc:	e01d      	b.n	800370a <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	3301      	adds	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; // store the entry path
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4413      	add	r3, r2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 80036ec:	2301      	movs	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	3b01      	subs	r3, #1
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 80036f6:	2303      	movs	r3, #3
 80036f8:	76fb      	strb	r3, [r7, #27]
 80036fa:	e006      	b.n	800370a <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4947      	ldr	r1, [pc, #284]	; (8003820 <QHsm_tran_+0x200>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	4798      	blx	r3
 8003706:	4603      	mov	r3, r0
 8003708:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 800370a:	7efb      	ldrb	r3, [r7, #27]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <QHsm_tran_+0xf6>
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2b04      	cmp	r3, #4
 8003714:	dddb      	ble.n	80036ce <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 8003716:	f7ff fcaf 	bl	8003078 <QF_crit_entry_>
                    // Tran. source must be found within the nesting depth
                    // Too many state nesting levels or "malformed" HSM.
                    Q_ASSERT_INCRIT(510, r != Q_RET_SUPER);
 800371a:	7efb      	ldrb	r3, [r7, #27]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <QHsm_tran_+0x10a>
 8003720:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003724:	483f      	ldr	r0, [pc, #252]	; (8003824 <QHsm_tran_+0x204>)
 8003726:	f7fd faa9 	bl	8000c7c <Q_onError>
                    QF_CRIT_EXIT();
 800372a:	f7ff fcb7 	bl	800309c <QF_crit_exit_>

                    // the LCA not found yet?
                    if (iq == 0) {
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d161      	bne.n	80037f8 <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4939      	ldr	r1, [pc, #228]	; (800381c <QHsm_tran_+0x1fc>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8003740:	2304      	movs	r3, #4
 8003742:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { // is this the LCA?
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4413      	add	r3, r2
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d108      	bne.n	8003766 <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 8003754:	2303      	movs	r3, #3
 8003756:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3b01      	subs	r3, #1
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; // cause termination of the loop
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e002      	b.n	800376c <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3b01      	subs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	dae8      	bge.n	8003744 <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 8003772:	7efb      	ldrb	r3, [r7, #27]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d03f      	beq.n	80037f8 <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 8003778:	2304      	movs	r3, #4
 800377a:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t limit = QHSM_MAX_NEST_DEPTH_;
 800377c:	2306      	movs	r3, #6
 800377e:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	4926      	ldr	r1, [pc, #152]	; (800381c <QHsm_tran_+0x1fc>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	2b03      	cmp	r3, #3
 800378c:	d103      	bne.n	8003796 <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	4923      	ldr	r1, [pc, #140]	; (8003820 <QHsm_tran_+0x200>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	623b      	str	r3, [r7, #32]
                                iq = ip;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4413      	add	r3, r2
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d108      	bne.n	80037c2 <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1;     // break out of inner loop
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 80037bc:	2303      	movs	r3, #3
 80037be:	76fb      	strb	r3, [r7, #27]
 80037c0:	e002      	b.n	80037c8 <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	dae8      	bge.n	80037a0 <QHsm_tran_+0x180>

                                --limit;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (limit > 0));
 80037d4:	7efb      	ldrb	r3, [r7, #27]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d002      	beq.n	80037e0 <QHsm_tran_+0x1c0>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dccf      	bgt.n	8003780 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 80037e0:	f7ff fc4a 	bl	8003078 <QF_crit_entry_>
                            Q_ASSERT_INCRIT(530, limit > 0);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dc04      	bgt.n	80037f4 <QHsm_tran_+0x1d4>
 80037ea:	f240 2112 	movw	r1, #530	; 0x212
 80037ee:	480d      	ldr	r0, [pc, #52]	; (8003824 <QHsm_tran_+0x204>)
 80037f0:	f7fd fa44 	bl	8000c7c <Q_onError>
                            QF_CRIT_EXIT();
 80037f4:	f7ff fc52 	bl	800309c <QF_crit_exit_>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 80037f8:	f7ff fc3e 	bl	8003078 <QF_crit_entry_>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	2b05      	cmp	r3, #5
 8003800:	dd04      	ble.n	800380c <QHsm_tran_+0x1ec>
 8003802:	f240 214e 	movw	r1, #590	; 0x24e
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <QHsm_tran_+0x204>)
 8003808:	f7fd fa38 	bl	8000c7c <Q_onError>
    QF_CRIT_EXIT();
 800380c:	f7ff fc46 	bl	800309c <QF_crit_exit_>
    return ip;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003812:	4618      	mov	r0, r3
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08004668 	.word	0x08004668
 8003820:	08004660 	.word	0x08004660
 8003824:	08004658 	.word	0x08004658

08003828 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8003832:	2304      	movs	r3, #4
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	e008      	b.n	8003866 <QF_bzero_+0x26>
        *ptr = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
        ++ptr;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3b01      	subs	r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f3      	bne.n	8003854 <QF_bzero_+0x14>
    }
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <QEvt_verify_+0x1e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	78db      	ldrb	r3, [r3, #3]
 800388c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003890:	2be0      	cmp	r3, #224	; 0xe0
 8003892:	d101      	bne.n	8003898 <QEvt_verify_+0x1e>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <QEvt_verify_+0x20>
 8003898:	2300      	movs	r3, #0
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <QEvt_getPoolNum_>:

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	78db      	ldrb	r3, [r3, #3]
 80038b8:	f003 030f 	and.w	r3, r3, #15
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
    #endif
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	43da      	mvns	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <QEvt_refCtr_inc_>:
#define QTE_IS_LINKED      (1U << 7U)
#define QTE_WAS_DISARMED   (1U << 6U)
#define QTE_TICK_RATE      0x0FU

//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	789b      	ldrb	r3, [r3, #2]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3301      	adds	r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	709a      	strb	r2, [r3, #2]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
    }
    #endif
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003942:	f7ff fb99 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    #ifndef Q_UNSAFE
    uint8_t const pcopy = (uint8_t)(~me->prio_dis);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800394c:	43db      	mvns	r3, r3
 800394e:	75bb      	strb	r3, [r7, #22]
    Q_REQUIRE_INCRIT(102, (QEvt_verify_(e)) && (me->prio == pcopy));
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f7ff ff92 	bl	800387a <QEvt_verify_>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <QActive_post_+0x32>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
 8003960:	7dba      	ldrb	r2, [r7, #22]
 8003962:	429a      	cmp	r2, r3
 8003964:	d003      	beq.n	800396e <QActive_post_+0x3a>
 8003966:	2166      	movs	r1, #102	; 0x66
 8003968:	4840      	ldr	r0, [pc, #256]	; (8003a6c <QActive_post_+0x138>)
 800396a:	f7fd f987 	bl	8000c7c <Q_onError>
    #endif

    QEQueueCtr nFree = me->eQueue.nFree; // get volatile into temporary
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	7fdb      	ldrb	r3, [r3, #31]
 8003972:	757b      	strb	r3, [r7, #21]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397a:	4293      	cmp	r3, r2
 800397c:	d10b      	bne.n	8003996 <QActive_post_+0x62>
        if (nFree > 0U) {
 800397e:	7d7b      	ldrb	r3, [r7, #21]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <QActive_post_+0x56>
            status = true; // can post
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
 8003988:	e00f      	b.n	80039aa <QActive_post_+0x76>
        }
        else {
            status = false; // cannot post
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_INCRIT(190); // must be able to post the event
 800398e:	21be      	movs	r1, #190	; 0xbe
 8003990:	4836      	ldr	r0, [pc, #216]	; (8003a6c <QActive_post_+0x138>)
 8003992:	f7fd f973 	bl	8000c7c <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	7d7a      	ldrb	r2, [r7, #21]
 800399c:	429a      	cmp	r2, r3
 800399e:	d902      	bls.n	80039a6 <QActive_post_+0x72>
        status = true; // can post
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
 80039a4:	e001      	b.n	80039aa <QActive_post_+0x76>
    }
    else {
        status = false; // cannot post, but don't assert
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	f7ff ff7e 	bl	80038ac <QEvt_getPoolNum_>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <QActive_post_+0x88>
        QEvt_refCtr_inc_(e); // increment the reference counter
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f7ff ffab 	bl	8003912 <QEvt_refCtr_inc_>
    }

    if (status) { // can post the event?
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04a      	beq.n	8003a58 <QActive_post_+0x124>

        --nFree; // one free entry just used up
 80039c2:	7d7b      	ldrb	r3, [r7, #21]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	757b      	strb	r3, [r7, #21]
        me->eQueue.nFree = nFree; // update the original
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	7d7a      	ldrb	r2, [r7, #21]
 80039cc:	77da      	strb	r2, [r3, #31]
        if (me->eQueue.nMin > nFree) {
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	7d7a      	ldrb	r2, [r7, #21]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d203      	bcs.n	80039e2 <QActive_post_+0xae>
            me->eQueue.nMin = nFree; // increase minimum so far
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	7d7a      	ldrb	r2, [r7, #21]
 80039de:	f883 2020 	strb.w	r2, [r3, #32]
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        if (me->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11a      	bne.n	8003a20 <QActive_post_+0xec>
            me->eQueue.frontEvt = e; // deliver event directly
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	615a      	str	r2, [r3, #20]
            }
            else {
                QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
            }
    #else
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	7b1b      	ldrb	r3, [r3, #12]
 80039f4:	4619      	mov	r1, r3
 80039f6:	481e      	ldr	r0, [pc, #120]	; (8003a70 <QActive_post_+0x13c>)
 80039f8:	f7ff ff66 	bl	80038c8 <QPSet_insert>
 80039fc:	491d      	ldr	r1, [pc, #116]	; (8003a74 <QActive_post_+0x140>)
 80039fe:	481c      	ldr	r0, [pc, #112]	; (8003a70 <QActive_post_+0x13c>)
 8003a00:	f7ff ff77 	bl	80038f2 <QPSet_update_>
#define QK_ISR_CONTEXT_()     (QK_get_IPSR() != 0U)

__attribute__((always_inline))
static inline uint32_t QK_get_IPSR(void) {
    uint32_t regIPSR;
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8003a04:	f3ef 8305 	mrs	r3, IPSR
 8003a08:	613b      	str	r3, [r7, #16]
    return regIPSR;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d120      	bne.n	8003a52 <QActive_post_+0x11e>
 8003a10:	f000 fbc8 	bl	80041a4 <QK_sched_>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <QActive_post_+0x11e>
 8003a1a:	f000 fc27 	bl	800426c <QK_activate_>
 8003a1e:	e018      	b.n	8003a52 <QActive_post_+0x11e>
    #endif
        }
        // queue is not empty, insert event into the ring-buffer
        else {
            // insert event into the ring buffer (FIFO)
            me->eQueue.ring[me->eQueue.head] = e;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	7f5b      	ldrb	r3, [r3, #29]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { // need to wrap head?
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	7f5b      	ldrb	r3, [r3, #29]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <QActive_post_+0x110>
                me->eQueue.head = me->eQueue.end; // wrap around
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	7f1a      	ldrb	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	775a      	strb	r2, [r3, #29]
            }
            --me->eQueue.head; // advance the head (counter clockwise)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	7f5b      	ldrb	r3, [r3, #29]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	775a      	strb	r2, [r3, #29]
        }

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8003a52:	f7ff fb23 	bl	800309c <QF_crit_exit_>
 8003a56:	e004      	b.n	8003a62 <QActive_post_+0x12e>
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8003a58:	f7ff fb20 	bl	800309c <QF_crit_exit_>

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f000 f895 	bl	8003b8c <QF_gc>
    #endif
    }

    return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	0800467c 	.word	0x0800467c
 8003a70:	20000268 	.word	0x20000268
 8003a74:	20000280 	.word	0x20000280

08003a78 <QActive_get_>:
//$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::get_} .......................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003a80:	f7ff fafa 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    QACTIVE_EQUEUE_WAIT_(me); // wait for event to arrive directly
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <QActive_get_+0x1e>
 8003a8c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003a90:	4821      	ldr	r0, [pc, #132]	; (8003b18 <QActive_get_+0xa0>)
 8003a92:	f7fd f8f3 	bl	8000c7c <Q_onError>

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; // get volatile into tmp
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7fdb      	ldrb	r3, [r3, #31]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; // update the # free
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7afa      	ldrb	r2, [r7, #11]
 8003aaa:	77da      	strb	r2, [r3, #31]

    if (nFree <= me->eQueue.end) { // any events in the ring buffer?
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7f1b      	ldrb	r3, [r3, #28]
 8003ab0:	7afa      	ldrb	r2, [r7, #11]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d81a      	bhi.n	8003aec <QActive_get_+0x74>
        // remove event from the tail
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7f9b      	ldrb	r3, [r3, #30]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	615a      	str	r2, [r3, #20]
        if (me->eQueue.tail == 0U) { // need to wrap the tail?
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7f9b      	ldrb	r3, [r3, #30]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <QActive_get_+0x64>
            me->eQueue.tail = me->eQueue.end; // wrap around
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7f1a      	ldrb	r2, [r3, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	779a      	strb	r2, [r3, #30]
        }
        --me->eQueue.tail;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7f9b      	ldrb	r3, [r3, #30]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	779a      	strb	r2, [r3, #30]
 8003aea:	e00d      	b.n	8003b08 <QActive_get_+0x90>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE_(nFree);   // # free entries
        QS_END_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(310, nFree == (me->eQueue.end + 1U));
 8003af2:	7afa      	ldrb	r2, [r7, #11]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7f1b      	ldrb	r3, [r3, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d004      	beq.n	8003b08 <QActive_get_+0x90>
 8003afe:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <QActive_get_+0xa0>)
 8003b04:	f7fd f8ba 	bl	8000c7c <Q_onError>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
        QS_END_PRE_()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003b08:	f7ff fac8 	bl	800309c <QF_crit_exit_>

    return e;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0800467c 	.word	0x0800467c

08003b1c <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <QEvt_verify_+0x1e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	78db      	ldrb	r3, [r3, #3]
 8003b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b32:	2be0      	cmp	r3, #224	; 0xe0
 8003b34:	d101      	bne.n	8003b3a <QEvt_verify_+0x1e>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <QEvt_verify_+0x20>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	b2db      	uxtb	r3, r3
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	78db      	ldrb	r3, [r3, #3]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	789b      	ldrb	r3, [r3, #2]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	709a      	strb	r2, [r3, #2]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <QF_gc>:
    return e;
}

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003b94:	f7ff fa70 	bl	8003078 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(402, QEvt_verify_(e));
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ffbf 	bl	8003b1c <QEvt_verify_>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <QF_gc+0x22>
 8003ba4:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8003ba8:	481b      	ldr	r0, [pc, #108]	; (8003c18 <QF_gc+0x8c>)
 8003baa:	f7fd f867 	bl	8000c7c <Q_onError>

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffcd 	bl	8003b4e <QEvt_getPoolNum_>
 8003bb4:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d027      	beq.n	8003c0c <QF_gc+0x80>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d905      	bls.n	8003bd2 <QF_gc+0x46>
                QS_TIME_PRE_();       // timestamp
                QS_SIG_PRE_(e->sig);  // the signal of the event
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
            QS_END_PRE_()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ffcf 	bl	8003b6a <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8003bcc:	f7ff fa66 	bl	800309c <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8003bd0:	e01e      	b.n	8003c10 <QF_gc+0x84>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <QF_gc+0x90>)
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d802      	bhi.n	8003be2 <QF_gc+0x56>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d904      	bls.n	8003bec <QF_gc+0x60>
 8003be2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <QF_gc+0x8c>)
 8003be8:	f7fd f848 	bl	8000c7c <Q_onError>
            QF_CRIT_EXIT();
 8003bec:	f7ff fa56 	bl	800309c <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <QF_gc+0x90>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f80b 	bl	8003c20 <QMPool_put>
}
 8003c0a:	e001      	b.n	8003c10 <QF_gc+0x84>
        QF_CRIT_EXIT();
 8003c0c:	f7ff fa46 	bl	800309c <QF_crit_exit_>
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08004684 	.word	0x08004684
 8003c1c:	20000214 	.word	0x20000214

08003c20 <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003c30:	f7ff fa22 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, (me->nFree < me->nTot)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8a1b      	ldrh	r3, [r3, #16]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	89db      	ldrh	r3, [r3, #14]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d209      	bcs.n	8003c56 <QMPool_put+0x36>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d304      	bcc.n	8003c56 <QMPool_put+0x36>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <QMPool_put+0x3e>
 8003c56:	21c8      	movs	r1, #200	; 0xc8
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <QMPool_put+0x70>)
 8003c5a:	f7fd f80f 	bl	8000c7c <Q_onError>
                           && (me->start <= fb) && (fb <= me->end));

    fb->next = me->free_head; // link into list
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	605a      	str	r2, [r3, #4]
    #endif

    // set as new head of the free list
    me->free_head = fb;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	609a      	str	r2, [r3, #8]

    ++me->nFree; // one more free block in this pool
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8a1b      	ldrh	r3, [r3, #16]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	821a      	strh	r2, [r3, #16]
        QS_OBJ_PRE_(me);        // this memory pool
        QS_MPC_PRE_(me->nFree); // the # free blocks in the pool
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003c84:	f7ff fa0a 	bl	800309c <QF_crit_exit_>
}
 8003c88:	bf00      	nop
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0800468c 	.word	0x0800468c

08003c94 <QActive_ctor>:

//${QF::QActive::ctor} .......................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 8003c9e:	2128      	movs	r1, #40	; 0x28
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fdcd 	bl	8003840 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fa99 	bl	80031e0 <QHsm_ctor>
        &QHsm_isIn_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a02      	ldr	r2, [pc, #8]	; (8003cbc <QActive_ctor+0x28>)
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0800469c 	.word	0x0800469c

08003cc0 <QActive_register_>:

//$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::register_} ..................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003cc8:	f7ff f9d6 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7b5b      	ldrb	r3, [r3, #13]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7b1a      	ldrb	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	735a      	strb	r2, [r3, #13]
    }

    #ifndef Q_UNSAFE

    Q_REQUIRE_INCRIT(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7b1b      	ldrb	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <QActive_register_+0x48>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7b1b      	ldrb	r3, [r3, #12]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d80d      	bhi.n	8003d08 <QActive_register_+0x48>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7b1b      	ldrb	r3, [r3, #12]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <QActive_register_+0x110>)
 8003cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <QActive_register_+0x48>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7b1a      	ldrb	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7b5b      	ldrb	r3, [r3, #13]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d903      	bls.n	8003d10 <QActive_register_+0x50>
 8003d08:	2164      	movs	r1, #100	; 0x64
 8003d0a:	4832      	ldr	r0, [pc, #200]	; (8003dd4 <QActive_register_+0x114>)
 8003d0c:	f7fc ffb6 	bl	8000c7c <Q_onError>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7b5b      	ldrb	r3, [r3, #13]
 8003d14:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7b5b      	ldrb	r3, [r3, #13]
 8003d1a:	73bb      	strb	r3, [r7, #14]

    uint_fast8_t p;
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7b1b      	ldrb	r3, [r3, #12]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	e00f      	b.n	8003d46 <QActive_register_+0x86>
        if (QActive_registry_[p] != (QActive *)0) {
 8003d26:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <QActive_register_+0x110>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 8003d32:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <QActive_register_+0x110>)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	7b5b      	ldrb	r3, [r3, #13]
 8003d3c:	73fb      	strb	r3, [r7, #15]
            break;
 8003d3e:	e005      	b.n	8003d4c <QActive_register_+0x8c>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ec      	bne.n	8003d26 <QActive_register_+0x66>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7b1b      	ldrb	r3, [r3, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	e00f      	b.n	8003d76 <QActive_register_+0xb6>
        if (QActive_registry_[p] != (QActive *)0) {
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <QActive_register_+0x110>)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <QActive_register_+0x110>)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	7b5b      	ldrb	r3, [r3, #13]
 8003d6c:	73bb      	strb	r3, [r7, #14]
            break;
 8003d6e:	e005      	b.n	8003d7c <QActive_register_+0xbc>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d9ec      	bls.n	8003d56 <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190, (prev_thre <= me->pthre)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7b5b      	ldrb	r3, [r3, #13]
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d804      	bhi.n	8003d90 <QActive_register_+0xd0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7b5b      	ldrb	r3, [r3, #13]
 8003d8a:	7bba      	ldrb	r2, [r7, #14]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d203      	bcs.n	8003d98 <QActive_register_+0xd8>
 8003d90:	21be      	movs	r1, #190	; 0xbe
 8003d92:	4810      	ldr	r0, [pc, #64]	; (8003dd4 <QActive_register_+0x114>)
 8003d94:	f7fc ff72 	bl	8000c7c <Q_onError>
                          && (me->pthre <= next_thre));

    me->prio_dis  = (uint8_t)(~me->prio);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7b1b      	ldrb	r3, [r3, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    me->pthre_dis = (uint8_t)(~me->pthre);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7b5b      	ldrb	r3, [r3, #13]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    #endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7b1b      	ldrb	r3, [r3, #12]
 8003db8:	4619      	mov	r1, r3
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <QActive_register_+0x110>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003dc2:	f7ff f96b 	bl	800309c <QF_crit_exit_>
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000190 	.word	0x20000190
 8003dd4:	08004694 	.word	0x08004694

08003dd8 <QEQueue_init>:
//${QF::QEQueue::init} .......................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const ** const qSto,
    uint_fast16_t const qLen)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; // no events in the queue
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <QEQueue_init+0x32>
        me->head = 0U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	7adb      	ldrb	r3, [r3, #11]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	731a      	strb	r2, [r3, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <QEvt_verify_+0x1e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	2be0      	cmp	r3, #224	; 0xe0
 8003e44:	d101      	bne.n	8003e4a <QEvt_verify_+0x1e>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <QEvt_verify_+0x20>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003e6e:	f7ff f903 	bl	8003078 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <QTimeEvt_ctorX+0x1e>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <QTimeEvt_ctorX+0x28>
 8003e7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003e82:	4810      	ldr	r0, [pc, #64]	; (8003ec4 <QTimeEvt_ctorX+0x64>)
 8003e84:	f7fc fefa 	bl	8000c7c <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8003e88:	f7ff f908 	bl	800309c <QF_crit_exit_>

    // Initialize the QEvt superclass:
    // NOTE: The refCtr_ attribute is not used in time events,
    // so it is reused to hold the tickRate as well as other
    // information about the status of the time event.
    me->super.sig     = (QSignal)sig;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	801a      	strh	r2, [r3, #0]
    me->super.refCtr_ = (uint8_t)tickRate;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	709a      	strb	r2, [r3, #2]
    me->super.evtTag_ = QEVT_MARKER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22e0      	movs	r2, #224	; 0xe0
 8003ea0:	70da      	strb	r2, [r3, #3]

    me->next     = (QTimeEvt *)0;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	080046a8 	.word	0x080046a8

08003ec8 <QTimeEvt_armX>:
//${QF::QTimeEvt::armX} ......................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	789b      	ldrb	r3, [r3, #2]
 8003ed8:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	613b      	str	r3, [r7, #16]
    #ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003ee6:	f7ff f8c7 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(400, (me->act != (void *)0)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <QTimeEvt_armX+0x44>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <QTimeEvt_armX+0x44>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <QTimeEvt_armX+0x44>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <QTimeEvt_armX+0x44>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d804      	bhi.n	8003f16 <QTimeEvt_armX+0x4e>
 8003f0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003f10:	4818      	ldr	r0, [pc, #96]	; (8003f74 <QTimeEvt_armX+0xac>)
 8003f12:	f7fc feb3 	bl	8000c7c <Q_onError>
        && (me->super.sig >= (QSignal)Q_USER_SIG));
    #ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
    #endif

    me->ctr = nTicks;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	789b      	ldrb	r3, [r3, #2]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	b25b      	sxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	db1c      	blt.n	8003f68 <QTimeEvt_armX+0xa0>
        // mark as linked
        me->super.refCtr_ |= QTE_IS_LINKED;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	789b      	ldrb	r3, [r3, #2]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	709a      	strb	r2, [r3, #2]
        // "freshly armed" link list based on QTimeEvt_timeEvtHead_[tickRate].act.
        // Only later, inside the QTimeEvt_tick_() function, the "freshly armed"
        // list is appended to the main list of armed time events based on
        // QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside the QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8003f3e:	490e      	ldr	r1, [pc, #56]	; (8003f78 <QTimeEvt_armX+0xb0>)
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8003f54:	4908      	ldr	r1, [pc, #32]	; (8003f78 <QTimeEvt_armX+0xb0>)
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	3308      	adds	r3, #8
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(interval); // the interval
        QS_U8_PRE_(tickRate);  // tick rate
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003f68:	f7ff f898 	bl	800309c <QF_crit_exit_>
}
 8003f6c:	bf00      	nop
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	080046a8 	.word	0x080046a8
 8003f78:	20000254 	.word	0x20000254

08003f7c <QTimeEvt_tick_>:
//${QF::QTimeEvt::tick_} .....................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003f86:	f7ff f877 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <QTimeEvt_tick_+0x1c>
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	4854      	ldr	r0, [pc, #336]	; (80040e4 <QTimeEvt_tick_+0x168>)
 8003f94:	f7fc fe72 	bl	8000c7c <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a51      	ldr	r2, [pc, #324]	; (80040e8 <QTimeEvt_tick_+0x16c>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
        QS_TEC_PRE_(prev->ctr);   // tick ctr
        QS_U8_PRE_(tickRate);     // tick rate
    QS_END_PRE_()

    // scan the linked-list of time events at this rate...
    uint_fast8_t limit = 2U*QF_MAX_ACTIVE; // loop hard limit
 8003fa8:	2340      	movs	r3, #64	; 0x40
 8003faa:	613b      	str	r3, [r7, #16]
    for (; limit > 0U; --limit) {
 8003fac:	e086      	b.n	80040bc <QTimeEvt_tick_+0x140>
        QTimeEvt *e = prev->next; // advance down the time evt. list
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]

        if (e == (QTimeEvt *)0) { // end of the list?
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d129      	bne.n	800400e <QTimeEvt_tick_+0x92>

            // any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8003fba:	494b      	ldr	r1, [pc, #300]	; (80040e8 <QTimeEvt_tick_+0x16c>)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07a      	beq.n	80040c6 <QTimeEvt_tick_+0x14a>

                // sanity check
                Q_ASSERT_INCRIT(110, prev != (QTimeEvt *)0);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <QTimeEvt_tick_+0x62>
 8003fd6:	216e      	movs	r1, #110	; 0x6e
 8003fd8:	4842      	ldr	r0, [pc, #264]	; (80040e4 <QTimeEvt_tick_+0x168>)
 8003fda:	f7fc fe4f 	bl	8000c7c <Q_onError>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8003fde:	4942      	ldr	r1, [pc, #264]	; (80040e8 <QTimeEvt_tick_+0x16c>)
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3308      	adds	r3, #8
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8003ff4:	493c      	ldr	r1, [pc, #240]	; (80040e8 <QTimeEvt_tick_+0x16c>)
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3308      	adds	r3, #8
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
                e = prev->next; // switch to the new list
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
                break; // terminate the for-loop
            }
        }

        // the time event 'e' must be valid
        Q_ASSERT_INCRIT(112, QEvt_verify_(Q_EVT_CAST(QEvt)));
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff0c 	bl	8003e2c <QEvt_verify_>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <QTimeEvt_tick_+0xa6>
 800401a:	2170      	movs	r1, #112	; 0x70
 800401c:	4831      	ldr	r0, [pc, #196]	; (80040e4 <QTimeEvt_tick_+0x168>)
 800401e:	f7fc fe2d 	bl	8000c7c <Q_onError>

        if (e->ctr == 0U) { // time event scheduled for removal?
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d110      	bne.n	800404c <QTimeEvt_tick_+0xd0>
            prev->next = e->next;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]
            // mark time event 'e' as NOT linked
            e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	709a      	strb	r2, [r3, #2]
            // do NOT advance the prev pointer
            QF_MEM_APP();
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 8004042:	f7ff f82b 	bl	800309c <QF_crit_exit_>
            // another entry to a critical section, the critical section
            // might not be really exited, but rather the two adjacent
            // critical sections would be MERGED. The QF_CRIT_EXIT_NOP()
            // macro contains minimal code required to prevent such merging
            // of critical sections in QF ports, in which it can occur.
            QF_CRIT_EXIT_NOP();
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	e032      	b.n	80040b2 <QTimeEvt_tick_+0x136>
        }
        else {
            --e->ctr;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	60da      	str	r2, [r3, #12]

            if (e->ctr == 0U) { // is time event about to expire?
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d123      	bne.n	80040a6 <QTimeEvt_tick_+0x12a>
                QActive * const act = (QActive *)e->act;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]

                if (e->interval != 0U) { // periodic time evt?
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <QTimeEvt_tick_+0xfe>
                    e->ctr = e->interval; // rearm the time event
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
                    prev = e; // advance to this time event
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e00b      	b.n	8004092 <QTimeEvt_tick_+0x116>
                }
                else { // one-shot time event: automatically disarm
                    prev->next = e->next;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	605a      	str	r2, [r3, #4]

                    // mark time event 'e' as NOT linked
                    e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	789b      	ldrb	r3, [r3, #2]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	709a      	strb	r2, [r3, #2]
                    // QACTIVE_POST() asserts if the queue overflows
                    QACTIVE_POST(act, &e->super, sender);
                }
    #else
                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section before posting
 8004092:	f7ff f803 	bl	800309c <QF_crit_exit_>

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &e->super, sender);
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	2300      	movs	r3, #0
 800409a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800409e:	68b8      	ldr	r0, [r7, #8]
 80040a0:	f7ff fc48 	bl	8003934 <QActive_post_>
 80040a4:	e005      	b.n	80040b2 <QTimeEvt_tick_+0x136>
    #endif
            }
            else {
                prev = e; // advance to this time event
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	617b      	str	r3, [r7, #20]

                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section to reduce latency
 80040aa:	f7fe fff7 	bl	800309c <QF_crit_exit_>

                // prevent merging critical sections, see NOTE above
                QF_CRIT_EXIT_NOP();
 80040ae:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 80040b2:	f7fe ffe1 	bl	8003078 <QF_crit_entry_>
    for (; limit > 0U; --limit) {
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af75 	bne.w	8003fae <QTimeEvt_tick_+0x32>
 80040c4:	e000      	b.n	80040c8 <QTimeEvt_tick_+0x14c>
                break; // terminate the for-loop
 80040c6:	bf00      	nop
        QF_MEM_SYS();
    }

    Q_ENSURE_INCRIT(190, limit > 0U);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <QTimeEvt_tick_+0x15a>
 80040ce:	21be      	movs	r1, #190	; 0xbe
 80040d0:	4804      	ldr	r0, [pc, #16]	; (80040e4 <QTimeEvt_tick_+0x168>)
 80040d2:	f7fc fdd3 	bl	8000c7c <Q_onError>
    QF_MEM_APP();
    QF_CRIT_EXIT();
 80040d6:	f7fe ffe1 	bl	800309c <QF_crit_exit_>
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	080046a8 	.word	0x080046a8
 80040e8:	20000254 	.word	0x20000254

080040ec <QPSet_isEmpty>:
static inline bool QPSet_isEmpty(QPSet const * const me) {
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    return (me->bits[0] == 0U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <QPSet_remove>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	401a      	ands	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	f1c3 0320 	rsb	r3, r3, #32
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <QPSet_update_>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	43da      	mvns	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	601a      	str	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	43db      	mvns	r3, r3
 800418e:	429a      	cmp	r2, r3
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <QK_sched_>:
    }
}

//${QK::QK-base::sched_} .....................................................
//! @static @private @memberof QK
uint_fast8_t QK_sched_(void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    Q_REQUIRE_INCRIT(402, QPSet_verify_(&QK_priv_.readySet,
 80041aa:	492d      	ldr	r1, [pc, #180]	; (8004260 <QK_sched_+0xbc>)
 80041ac:	482d      	ldr	r0, [pc, #180]	; (8004264 <QK_sched_+0xc0>)
 80041ae:	f7ff ffe4 	bl	800417a <QPSet_verify_>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <QK_sched_+0x1e>
 80041b8:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80041bc:	482a      	ldr	r0, [pc, #168]	; (8004268 <QK_sched_+0xc4>)
 80041be:	f7fc fd5d 	bl	8000c7c <Q_onError>
                                        &QK_priv_.readySet_dis));
    uint_fast8_t p;
    if (QPSet_isEmpty(&QK_priv_.readySet)) {
 80041c2:	4828      	ldr	r0, [pc, #160]	; (8004264 <QK_sched_+0xc0>)
 80041c4:	f7ff ff92 	bl	80040ec <QPSet_isEmpty>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <QK_sched_+0x30>
        p = 0U; // no activation needed
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	e03f      	b.n	8004254 <QK_sched_+0xb0>
    }
    else {
        // find the highest-prio AO with non-empty event queue
        p = QPSet_findMax(&QK_priv_.readySet);
 80041d4:	4823      	ldr	r0, [pc, #140]	; (8004264 <QK_sched_+0xc0>)
 80041d6:	f7ff ffb0 	bl	800413a <QPSet_findMax>
 80041da:	6078      	str	r0, [r7, #4]

        Q_ASSERT_INCRIT(412,
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <QK_sched_+0xc0>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <QK_sched_+0xc0>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	43db      	mvns	r3, r3
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d004      	beq.n	80041f4 <QK_sched_+0x50>
 80041ea:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80041ee:	481e      	ldr	r0, [pc, #120]	; (8004268 <QK_sched_+0xc4>)
 80041f0:	f7fc fd44 	bl	8000c7c <Q_onError>
            QK_priv_.actThre == (uint_fast8_t)(~QK_priv_.actThre_dis));

        // is the AO's prio. below the active preemption-threshold?
        if (p <= QK_priv_.actThre) {
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <QK_sched_+0xc0>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d802      	bhi.n	8004204 <QK_sched_+0x60>
            p = 0U; // no activation needed
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	e027      	b.n	8004254 <QK_sched_+0xb0>
        }
        else {
            Q_ASSERT_INCRIT(422, QK_priv_.lockCeil
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <QK_sched_+0xc0>)
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <QK_sched_+0xc0>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	43db      	mvns	r3, r3
 800420e:	429a      	cmp	r2, r3
 8004210:	d004      	beq.n	800421c <QK_sched_+0x78>
 8004212:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8004216:	4814      	ldr	r0, [pc, #80]	; (8004268 <QK_sched_+0xc4>)
 8004218:	f7fc fd30 	bl	8000c7c <Q_onError>
                == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

            // is the AO's prio. below the lock-ceiling?
            if (p <= QK_priv_.lockCeil) {
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <QK_sched_+0xc0>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d802      	bhi.n	800422c <QK_sched_+0x88>
                p = 0U; // no activation needed
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	e013      	b.n	8004254 <QK_sched_+0xb0>
            }
            else {
                Q_ASSERT_INCRIT(432, QK_priv_.nextPrio
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <QK_sched_+0xc0>)
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <QK_sched_+0xc0>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	43db      	mvns	r3, r3
 8004236:	429a      	cmp	r2, r3
 8004238:	d004      	beq.n	8004244 <QK_sched_+0xa0>
 800423a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800423e:	480a      	ldr	r0, [pc, #40]	; (8004268 <QK_sched_+0xc4>)
 8004240:	f7fc fd1c 	bl	8000c7c <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.nextPrio_dis));
                QK_priv_.nextPrio = p; // next AO to run
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <QK_sched_+0xc0>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6093      	str	r3, [r2, #8]
    #ifndef Q_UNSAFE
                QK_priv_.nextPrio_dis = (uint_fast8_t)(~QK_priv_.nextPrio);
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <QK_sched_+0xc0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	43db      	mvns	r3, r3
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <QK_sched_+0xc0>)
 8004252:	6213      	str	r3, [r2, #32]
    #endif
            }
        }
    }

    return p;
 8004254:	687b      	ldr	r3, [r7, #4]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000280 	.word	0x20000280
 8004264:	20000268 	.word	0x20000268
 8004268:	080046b0 	.word	0x080046b0

0800426c <QK_activate_>:

//${QK::QK-base::activate_} ..................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <QK_activate_+0x1e0>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8004278:	4b74      	ldr	r3, [pc, #464]	; (800444c <QK_activate_+0x1e0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_INCRIT(502,
 800427e:	4b73      	ldr	r3, [pc, #460]	; (800444c <QK_activate_+0x1e0>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	43db      	mvns	r3, r3
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	429a      	cmp	r2, r3
 8004288:	d105      	bne.n	8004296 <QK_activate_+0x2a>
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <QK_activate_+0x1e0>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	43db      	mvns	r3, r3
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	429a      	cmp	r2, r3
 8004294:	d004      	beq.n	80042a0 <QK_activate_+0x34>
 8004296:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800429a:	486d      	ldr	r0, [pc, #436]	; (8004450 <QK_activate_+0x1e4>)
 800429c:	f7fc fcee 	bl	8000c7c <Q_onError>
       (prio_in == (uint_fast8_t)(~QK_priv_.actPrio_dis))
       && (p == (uint_fast8_t)(~QK_priv_.nextPrio_dis)));
    Q_REQUIRE_INCRIT(510, (prio_in <= QF_MAX_ACTIVE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d805      	bhi.n	80042b2 <QK_activate_+0x46>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <QK_activate_+0x46>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d904      	bls.n	80042bc <QK_activate_+0x50>
 80042b2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80042b6:	4866      	ldr	r0, [pc, #408]	; (8004450 <QK_activate_+0x1e4>)
 80042b8:	f7fc fce0 	bl	8000c7c <Q_onError>

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 80042bc:	4b63      	ldr	r3, [pc, #396]	; (800444c <QK_activate_+0x1e0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 80042c2:	4b62      	ldr	r3, [pc, #392]	; (800444c <QK_activate_+0x1e0>)
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	621a      	str	r2, [r3, #32]
    #endif

    uint_fast8_t pthre_in;
    QActive *a;
    if (prio_in == 0U) { // preempting the idle thread?
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <QK_activate_+0x6a>
        pthre_in = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e01c      	b.n	8004310 <QK_activate_+0xa4>
    }
    else {
        a = QActive_registry_[prio_in];
 80042d6:	4a5f      	ldr	r2, [pc, #380]	; (8004454 <QK_activate_+0x1e8>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <QK_activate_+0x84>
 80042e6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80042ea:	4859      	ldr	r0, [pc, #356]	; (8004450 <QK_activate_+0x1e4>)
 80042ec:	f7fc fcc6 	bl	8000c7c <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	7b5b      	ldrb	r3, [r3, #13]
 80042f4:	613b      	str	r3, [r7, #16]
        Q_ASSERT_INCRIT(511, pthre_in ==
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042fc:	43db      	mvns	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d004      	beq.n	8004310 <QK_activate_+0xa4>
 8004306:	f240 11ff 	movw	r1, #511	; 0x1ff
 800430a:	4851      	ldr	r0, [pc, #324]	; (8004450 <QK_activate_+0x1e4>)
 800430c:	f7fc fcb6 	bl	8000c7c <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        a = QActive_registry_[p]; // obtain the pointer to the AO
 8004310:	4a50      	ldr	r2, [pc, #320]	; (8004454 <QK_activate_+0x1e8>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d104      	bne.n	800432a <QK_activate_+0xbe>
 8004320:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004324:	484a      	ldr	r0, [pc, #296]	; (8004450 <QK_activate_+0x1e4>)
 8004326:	f7fc fca9 	bl	8000c7c <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	7b5b      	ldrb	r3, [r3, #13]
 800432e:	607b      	str	r3, [r7, #4]
        Q_ASSERT_INCRIT(522, pthre ==
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004336:	43db      	mvns	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d004      	beq.n	800434a <QK_activate_+0xde>
 8004340:	f240 210a 	movw	r1, #522	; 0x20a
 8004344:	4842      	ldr	r0, [pc, #264]	; (8004450 <QK_activate_+0x1e4>)
 8004346:	f7fc fc99 	bl	8000c7c <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <QK_activate_+0x1e0>)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6053      	str	r3, [r2, #4]
        QK_priv_.actThre = pthre;
 8004350:	4a3e      	ldr	r2, [pc, #248]	; (800444c <QK_activate_+0x1e0>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
        QK_priv_.actPrio_dis = (uint_fast8_t)(~p);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	43db      	mvns	r3, r3
 800435a:	4a3c      	ldr	r2, [pc, #240]	; (800444c <QK_activate_+0x1e0>)
 800435c:	61d3      	str	r3, [r2, #28]
        QK_priv_.actThre_dis = (uint_fast8_t)(~pthre);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	43db      	mvns	r3, r3
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <QK_activate_+0x1e0>)
 8004364:	6253      	str	r3, [r2, #36]	; 0x24

            pprev = p; // update previous prio.
        }
    #endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 8004366:	f7fe fe75 	bl	8003054 <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7ff fb84 	bl	8003a78 <QActive_get_>
 8004370:	6038      	str	r0, [r7, #0]
        // NOTE QActive_get_() performs QF_MEM_APP() before return

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68b8      	ldr	r0, [r7, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8004380:	6838      	ldr	r0, [r7, #0]
 8004382:	f7ff fc03 	bl	8003b8c <QF_gc>
    #endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 8004386:	f7fe fe53 	bl	8003030 <QF_int_disable_>
        QF_MEM_SYS();

        // internal integrity check (duplicate inverse storage)
        Q_ASSERT_INCRIT(532, QPSet_verify_(&QK_priv_.readySet,
 800438a:	4933      	ldr	r1, [pc, #204]	; (8004458 <QK_activate_+0x1ec>)
 800438c:	482f      	ldr	r0, [pc, #188]	; (800444c <QK_activate_+0x1e0>)
 800438e:	f7ff fef4 	bl	800417a <QPSet_verify_>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <QK_activate_+0x136>
 8004398:	f44f 7105 	mov.w	r1, #532	; 0x214
 800439c:	482c      	ldr	r0, [pc, #176]	; (8004450 <QK_activate_+0x1e4>)
 800439e:	f7fc fc6d 	bl	8000c7c <Q_onError>
                                           &QK_priv_.readySet_dis));

        if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <QK_activate_+0x14e>
            QPSet_remove(&QK_priv_.readySet, p);
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	4827      	ldr	r0, [pc, #156]	; (800444c <QK_activate_+0x1e0>)
 80043ae:	f7ff feae 	bl	800410e <QPSet_remove>
    #ifndef Q_UNSAFE
            QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 80043b2:	4929      	ldr	r1, [pc, #164]	; (8004458 <QK_activate_+0x1ec>)
 80043b4:	4825      	ldr	r0, [pc, #148]	; (800444c <QK_activate_+0x1e0>)
 80043b6:	f7ff fed0 	bl	800415a <QPSet_update_>
    #endif
        }

        if (QPSet_isEmpty(&QK_priv_.readySet)) {
 80043ba:	4824      	ldr	r0, [pc, #144]	; (800444c <QK_activate_+0x1e0>)
 80043bc:	f7ff fe96 	bl	80040ec <QPSet_isEmpty>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <QK_activate_+0x160>
            p = 0U; // no activation needed
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e026      	b.n	800441a <QK_activate_+0x1ae>
        }
        else {
            // find new highest-prio AO ready to run...
            p = QPSet_findMax(&QK_priv_.readySet);
 80043cc:	481f      	ldr	r0, [pc, #124]	; (800444c <QK_activate_+0x1e0>)
 80043ce:	f7ff feb4 	bl	800413a <QPSet_findMax>
 80043d2:	6178      	str	r0, [r7, #20]

            // is the new prio. below the initial preemption-threshold?
            if (p <= pthre_in) {
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d802      	bhi.n	80043e2 <QK_activate_+0x176>
                p = 0U; // no activation needed
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e01b      	b.n	800441a <QK_activate_+0x1ae>
            }
            else {
                Q_ASSERT_INCRIT(542, QK_priv_.lockCeil
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <QK_activate_+0x1e0>)
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <QK_activate_+0x1e0>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	43db      	mvns	r3, r3
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d004      	beq.n	80043fa <QK_activate_+0x18e>
 80043f0:	f240 211e 	movw	r1, #542	; 0x21e
 80043f4:	4816      	ldr	r0, [pc, #88]	; (8004450 <QK_activate_+0x1e4>)
 80043f6:	f7fc fc41 	bl	8000c7c <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

                // is the AO's prio. below the lock preemption-threshold?
                if (p <= QK_priv_.lockCeil) {
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <QK_activate_+0x1e0>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d802      	bhi.n	800440a <QK_activate_+0x19e>
                    p = 0U; // no activation needed
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e007      	b.n	800441a <QK_activate_+0x1ae>
                }
                else {
                    Q_ASSERT_INCRIT(550, p <= QF_MAX_ACTIVE);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d904      	bls.n	800441a <QK_activate_+0x1ae>
 8004410:	f240 2126 	movw	r1, #550	; 0x226
 8004414:	480e      	ldr	r0, [pc, #56]	; (8004450 <QK_activate_+0x1e4>)
 8004416:	f7fc fc31 	bl	8000c7c <Q_onError>
                }
            }
        }
    } while (p != 0U);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af77 	bne.w	8004310 <QK_activate_+0xa4>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <QK_activate_+0x1e0>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6053      	str	r3, [r2, #4]
    QK_priv_.actThre = pthre_in;
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <QK_activate_+0x1e0>)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
    QK_priv_.actPrio_dis = (uint_fast8_t)(~QK_priv_.actPrio);
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <QK_activate_+0x1e0>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	43db      	mvns	r3, r3
 8004434:	4a05      	ldr	r2, [pc, #20]	; (800444c <QK_activate_+0x1e0>)
 8004436:	61d3      	str	r3, [r2, #28]
    QK_priv_.actThre_dis = (uint_fast8_t)(~QK_priv_.actThre);
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <QK_activate_+0x1e0>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	43db      	mvns	r3, r3
 800443e:	4a03      	ldr	r2, [pc, #12]	; (800444c <QK_activate_+0x1e0>)
 8004440:	6253      	str	r3, [r2, #36]	; 0x24
    #ifdef QF_ON_CONTEXT_SW
    QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

    #endif // QF_ON_CONTEXT_SW || Q_SPY
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000268 	.word	0x20000268
 8004450:	080046b0 	.word	0x080046b0
 8004454:	20000190 	.word	0x20000190
 8004458:	20000280 	.word	0x20000280

0800445c <QF_init>:

//$define${QK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QK::QF-cust::init} .......................................................
//! @static @public @memberof QF
void QF_init(void) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 8004462:	2140      	movs	r1, #64	; 0x40
 8004464:	481e      	ldr	r0, [pc, #120]	; (80044e0 <QF_init+0x84>)
 8004466:	f7ff f9eb 	bl	8003840 <QF_bzero_>
    QF_bzero_(&QK_priv_,                 sizeof(QK_priv_));
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	481d      	ldr	r0, [pc, #116]	; (80044e4 <QF_init+0x88>)
 800446e:	f7ff f9e7 	bl	8003840 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 8004472:	2184      	movs	r1, #132	; 0x84
 8004474:	481c      	ldr	r0, [pc, #112]	; (80044e8 <QF_init+0x8c>)
 8004476:	f7ff f9e3 	bl	8003840 <QF_bzero_>

    // setup the QK scheduler as initially locked and not running
    QK_priv_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <QF_init+0x88>)
 800447c:	2221      	movs	r2, #33	; 0x21
 800447e:	611a      	str	r2, [r3, #16]

    #ifndef Q_UNSAFE
    QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8004480:	491a      	ldr	r1, [pc, #104]	; (80044ec <QF_init+0x90>)
 8004482:	4818      	ldr	r0, [pc, #96]	; (80044e4 <QF_init+0x88>)
 8004484:	f7ff fe69 	bl	800415a <QPSet_update_>
    QK_priv_.actPrio_dis  = (uint_fast8_t)(~0U);
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <QF_init+0x88>)
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	61da      	str	r2, [r3, #28]
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <QF_init+0x88>)
 8004492:	f04f 32ff 	mov.w	r2, #4294967295
 8004496:	621a      	str	r2, [r3, #32]
    QK_priv_.actThre_dis  = (uint_fast8_t)(~0U);
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <QF_init+0x88>)
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	625a      	str	r2, [r3, #36]	; 0x24
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~QK_priv_.lockCeil);
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <QF_init+0x88>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <QF_init+0x88>)
 80044a8:	6293      	str	r3, [r2, #40]	; 0x28
    #endif

    for (uint_fast8_t tickRate = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e00e      	b.n	80044ce <QF_init+0x72>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <QF_init+0x94>)
 80044bc:	1898      	adds	r0, r3, r2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	2100      	movs	r1, #0
 80044c4:	f7ff fccc 	bl	8003e60 <QTimeEvt_ctorX>
         ++tickRate)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ed      	beq.n	80044b0 <QF_init+0x54>
                       (QActive *)0, (enum_t)Q_USER_SIG, tickRate);
    }

    #ifdef QK_INIT
    QK_INIT(); // port-specific initialization of the QK kernel
 80044d4:	f7fe fdf4 	bl	80030c0 <QK_init>
    #endif
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000214 	.word	0x20000214
 80044e4:	20000268 	.word	0x20000268
 80044e8:	20000190 	.word	0x20000190
 80044ec:	20000280 	.word	0x20000280
 80044f0:	20000254 	.word	0x20000254

080044f4 <QF_run>:
    // nothing else to do for the preemptive QK kernel
}

//${QK::QF-cust::run} ........................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
    QS_endRec_();
    QF_MEM_APP();
    QF_INT_ENABLE();
    #endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 80044f8:	f7fc fbcc 	bl	8000c94 <QF_onStartup>

    QF_INT_DISABLE();
 80044fc:	f7fe fd98 	bl	8003030 <QF_int_disable_>
    QF_MEM_SYS();

    #ifdef QK_START
    QK_START(); // port-specific startup of the QK kernel
 8004500:	2300      	movs	r3, #0
 8004502:	f383 8814 	msr	CONTROL, r3
    #endif

    QK_priv_.lockCeil = 0U; // unlock the QK scheduler
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <QF_run+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
    #ifndef Q_UNSAFE
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~0U);
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <QF_run+0x38>)
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
    #endif

    // activate AOs to process events posted so far
    if (QK_sched_() != 0U) {
 8004514:	f7ff fe46 	bl	80041a4 <QK_sched_>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <QF_run+0x2e>
        QK_activate_();
 800451e:	f7ff fea5 	bl	800426c <QK_activate_>
    }

    QF_MEM_APP();
    QF_INT_ENABLE();
 8004522:	f7fe fd97 	bl	8003054 <QF_int_enable_>

    for (;;) { // QK idle loop...
        QK_onIdle(); // application-specific QK on-idle callback
 8004526:	f7fc fbd3 	bl	8000cd0 <QK_onIdle>
 800452a:	e7fc      	b.n	8004526 <QF_run+0x32>
 800452c:	20000268 	.word	0x20000268

08004530 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  // not needed in QK
    Q_UNUSED_PAR(stkSize); // not needed in QK

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004540:	f7fe fd9a 	bl	8003078 <QF_crit_entry_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8004544:	f3ef 8305 	mrs	r3, IPSR
 8004548:	617b      	str	r3, [r7, #20]
    return regIPSR;
 800454a:	697b      	ldr	r3, [r7, #20]
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, (!QK_ISR_CONTEXT_())
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <QActive_start_+0x26>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <QActive_start_+0x30>
 8004556:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800455a:	4818      	ldr	r0, [pc, #96]	; (80045bc <QActive_start_+0x8c>)
 800455c:	f7fc fb8e 	bl	8000c7c <Q_onError>
                      && (stkSto == (void *)0));
    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004560:	f7fe fd9c 	bl	800309c <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 8004564:	897b      	ldrh	r3, [r7, #10]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	731a      	strb	r2, [r3, #12]
    me->pthre = (uint8_t)(prioSpec >> 8U);   // preemption-threshold
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff fba1 	bl	8003cc0 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3314      	adds	r3, #20
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fc26 	bl	8003dd8 <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	7b12      	ldrb	r2, [r2, #12]
 8004598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459a:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host

    // See if this AO needs to be scheduled if QK is already running
    QF_CRIT_ENTRY();
 800459c:	f7fe fd6c 	bl	8003078 <QF_crit_entry_>
    QF_MEM_SYS();
    if (QK_sched_() != 0U) { // activation needed?
 80045a0:	f7ff fe00 	bl	80041a4 <QK_sched_>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <QActive_start_+0x7e>
        QK_activate_();
 80045aa:	f7ff fe5f 	bl	800426c <QK_activate_>
    }
    QF_MEM_APP();
    QF_CRIT_EXIT();
 80045ae:	f7fe fd75 	bl	800309c <QF_crit_exit_>
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	080046b0 	.word	0x080046b0

080045c0 <memset>:
 80045c0:	4402      	add	r2, r0
 80045c2:	4603      	mov	r3, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d100      	bne.n	80045ca <memset+0xa>
 80045c8:	4770      	bx	lr
 80045ca:	f803 1b01 	strb.w	r1, [r3], #1
 80045ce:	e7f9      	b.n	80045c4 <memset+0x4>

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4d0d      	ldr	r5, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2600      	movs	r6, #0
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4d0b      	ldr	r5, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 f818 	bl	8004618 <_init>
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2600      	movs	r6, #0
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	080046bc 	.word	0x080046bc
 800460c:	080046bc 	.word	0x080046bc
 8004610:	080046bc 	.word	0x080046bc
 8004614:	080046c0 	.word	0x080046c0

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
