
LED_Intensity_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08003710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003710  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc89  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d94  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b57  00000000  00000000  00033948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cad  00000000  00000000  0003449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012775  00000000  00000000  0005614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0538  00000000  00000000  000688c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bac  00000000  00000000  00138dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800367c 	.word	0x0800367c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800367c 	.word	0x0800367c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Led_Control_QHSM_Ctor>:
Led_Control Led_Control_obj;
QHsm * const Led_Control_super_QHsm =&Led_Control_obj.super;


//${HSM::Led_Control::QHSM_Ctor} .............................................
void Led_Control_QHSM_Ctor(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    QHsm_ctor(Led_Control_super_QHsm,Q_STATE_CAST(&Led_Control_initial));
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <Led_Control_QHSM_Ctor+0x14>)
 8000506:	4904      	ldr	r1, [pc, #16]	; (8000518 <Led_Control_QHSM_Ctor+0x18>)
 8000508:	4618      	mov	r0, r3
 800050a:	f002 faf9 	bl	8002b00 <QHsm_ctor>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028
 8000518:	0800051d 	.word	0x0800051d

0800051c <Led_Control_initial>:

//${HSM::Led_Control::SM} ....................................................
QState Led_Control_initial(Led_Control * const me, void const * const par) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    //${HSM::Led_Control::SM::initial}
    return Q_TRAN(&Led_Control_LED_OFF);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <Led_Control_initial+0x20>)
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	2308      	movs	r3, #8
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	08000569 	.word	0x08000569

08000540 <Led_Control_LED_CONTROL>:

//${HSM::Led_Control::SM::LED_CONTROL} .......................................
QState Led_Control_LED_CONTROL(Led_Control * const me, QEvt const * const e) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <Led_Control_LED_CONTROL+0x24>)
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
            break;
 8000554:	bf00      	nop
        }
    }
    return status_;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	08003149 	.word	0x08003149

08000568 <Led_Control_LED_OFF>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_OFF} ..............................
QState Led_Control_LED_OFF(Led_Control * const me, QEvt const * const e) {
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d105      	bne.n	8000586 <Led_Control_LED_OFF+0x1e>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_OFF::LED_DIM}
        case LED_DIM_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_DIM);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <Led_Control_LED_OFF+0x38>)
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	2308      	movs	r3, #8
 8000582:	73fb      	strb	r3, [r7, #15]
            break;
 8000584:	e005      	b.n	8000592 <Led_Control_LED_OFF+0x2a>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <Led_Control_LED_OFF+0x3c>)
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
            break;
 8000590:	bf00      	nop
        }
    }
    return status_;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	080005a9 	.word	0x080005a9
 80005a4:	08000541 	.word	0x08000541

080005a8 <Led_Control_LED_DIM>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_DIM} ..............................
QState Led_Control_LED_DIM(Led_Control * const me, QEvt const * const e) {
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d002      	beq.n	80005c0 <Led_Control_LED_DIM+0x18>
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	d006      	beq.n	80005cc <Led_Control_LED_DIM+0x24>
 80005be:	e00b      	b.n	80005d8 <Led_Control_LED_DIM+0x30>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_DIM::LED_MEDIUM}
        case LED_MEDIUM_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_MEDIUM);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <Led_Control_LED_DIM+0x4c>)
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	2308      	movs	r3, #8
 80005c8:	73fb      	strb	r3, [r7, #15]
            break;
 80005ca:	e00b      	b.n	80005e4 <Led_Control_LED_DIM+0x3c>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_DIM::LED_OFF}
        case LED_OFF_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <Led_Control_LED_DIM+0x50>)
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	2308      	movs	r3, #8
 80005d4:	73fb      	strb	r3, [r7, #15]
            break;
 80005d6:	e005      	b.n	80005e4 <Led_Control_LED_DIM+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <Led_Control_LED_DIM+0x54>)
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
            break;
 80005e2:	bf00      	nop
        }
    }
    return status_;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	08000601 	.word	0x08000601
 80005f8:	08000569 	.word	0x08000569
 80005fc:	08000541 	.word	0x08000541

08000600 <Led_Control_LED_MEDIUM>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM} ...........................
QState Led_Control_LED_MEDIUM(Led_Control * const me, QEvt const * const e) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b06      	cmp	r3, #6
 8000610:	d002      	beq.n	8000618 <Led_Control_LED_MEDIUM+0x18>
 8000612:	2b07      	cmp	r3, #7
 8000614:	d006      	beq.n	8000624 <Led_Control_LED_MEDIUM+0x24>
 8000616:	e00b      	b.n	8000630 <Led_Control_LED_MEDIUM+0x30>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM::LED_FULL}
        case LED_FULL_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_FULL);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <Led_Control_LED_MEDIUM+0x4c>)
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	2308      	movs	r3, #8
 8000620:	73fb      	strb	r3, [r7, #15]
            break;
 8000622:	e00b      	b.n	800063c <Led_Control_LED_MEDIUM+0x3c>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM::LED_OFF}
        case LED_OFF_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <Led_Control_LED_MEDIUM+0x50>)
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	2308      	movs	r3, #8
 800062c:	73fb      	strb	r3, [r7, #15]
            break;
 800062e:	e005      	b.n	800063c <Led_Control_LED_MEDIUM+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <Led_Control_LED_MEDIUM+0x54>)
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
            break;
 800063a:	bf00      	nop
        }
    }
    return status_;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	08000659 	.word	0x08000659
 8000650:	08000569 	.word	0x08000569
 8000654:	08000541 	.word	0x08000541

08000658 <Led_Control_LED_FULL>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_FULL} .............................
QState Led_Control_LED_FULL(Led_Control * const me, QEvt const * const e) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d007      	beq.n	800067a <Led_Control_LED_FULL+0x22>
 800066a:	2b07      	cmp	r3, #7
 800066c:	d10b      	bne.n	8000686 <Led_Control_LED_FULL+0x2e>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_FULL::LED_OFF}
        case LED_OFF_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <Led_Control_LED_FULL+0x48>)
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	2308      	movs	r3, #8
 8000676:	73fb      	strb	r3, [r7, #15]
            break;
 8000678:	e00b      	b.n	8000692 <Led_Control_LED_FULL+0x3a>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_FULL::LED_DIM}
        case LED_DIM_SIG: {
            status_ = Q_TRAN(&Led_Control_LED_DIM);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <Led_Control_LED_FULL+0x4c>)
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	2308      	movs	r3, #8
 8000682:	73fb      	strb	r3, [r7, #15]
            break;
 8000684:	e005      	b.n	8000692 <Led_Control_LED_FULL+0x3a>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <Led_Control_LED_FULL+0x50>)
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
            break;
 8000690:	bf00      	nop
        }
    }
    return status_;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	08000569 	.word	0x08000569
 80006a4:	080005a9 	.word	0x080005a9
 80006a8:	08000541 	.word	0x08000541

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fa98 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f80a 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8f6 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 f8ca 	bl	8000854 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006c0:	f000 f872 	bl	80007a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Led_Control_QHSM_Ctor();
 80006c4:	f7ff ff1c 	bl	8000500 <Led_Control_QHSM_Ctor>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0x1c>
	...

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	; 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ffa2 	bl	8003624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <SystemClock_Config+0xd4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xd4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemClock_Config+0xd8>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <SystemClock_Config+0xd8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000740:	2310      	movs	r3, #16
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000744:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074a:	2304      	movs	r3, #4
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f892 	bl	8001884 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000766:	f000 f923 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fd32 	bl	80011f0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000792:	f000 f90d 	bl	80009b0 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_TIM1_Init+0xa4>)
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <MX_TIM1_Init+0xa8>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_TIM1_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_TIM1_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_TIM1_Init+0xa4>)
 80007d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_TIM1_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_TIM1_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_TIM1_Init+0xa4>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007f0:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_TIM1_Init+0xa4>)
 80007f2:	f001 fae5 	bl	8001dc0 <HAL_TIM_IC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f8d8 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	480f      	ldr	r0, [pc, #60]	; (800084c <MX_TIM1_Init+0xa4>)
 8000810:	f001 fd98 	bl	8002344 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800081a:	f000 f8c9 	bl	80009b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000822:	2301      	movs	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_TIM1_Init+0xa4>)
 8000836:	f001 fb12 	bl	8001e5e <HAL_TIM_IC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000840:	f000 f8b6 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000038 	.word	0x20000038
 8000850:	40010000 	.word	0x40010000

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f001 fdd6 	bl	800243c <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f88b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000080 	.word	0x20000080
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <MX_GPIO_Init+0xec>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <MX_GPIO_Init+0xec>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <MX_GPIO_Init+0xec>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_GPIO_Init+0xec>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <MX_GPIO_Init+0xec>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_GPIO_Init+0xec>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <MX_GPIO_Init+0xec>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_GPIO_Init+0xec>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_GPIO_Init+0xec>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_GPIO_Init+0xec>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <MX_GPIO_Init+0xf0>)
 8000934:	f000 fc42 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0xf4>)
 8000950:	f000 faa0 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <MX_GPIO_Init+0xf0>)
 800096c:	f000 fa92 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_GPIO_Init+0xf8>)
 8000986:	f000 fa85 	bl	8000e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020400 	.word	0x40020400

080009a4 <Q_onError>:

/* USER CODE BEGIN 4 */
Q_NORETURN Q_onError(char const * const module, int_t const id) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]

#ifndef NDEBUG
    // light up the user LED
   // GPIOA->BSRR = (1U << LD2_PIN);  // turn LED on
    // for debugging, hang on in an endless loop...
    for (;;) {
 80009ae:	e7fe      	b.n	80009ae <Q_onError+0xa>

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fa16 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_TIM_IC_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12c      	bne.n	8000a88 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_TIM_IC_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_TIM_IC_MspInit+0x8c>)
 8000a84:	f000 fa06 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010000 	.word	0x40010000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x8c>)
 8000b12:	f000 f9bf 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <HardFault_Handler+0x4>

08000b32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <BusFault_Handler+0x4>

08000b3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f890 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 fd39 	bl	8003634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd73 	bl	80006ac <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd4:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bdc:	200001bc 	.word	0x200001bc

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f90d 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fed0 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f917 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f8ed 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200000c8 	.word	0x200000c8

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000c8 	.word	0x200000c8

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff47 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5c 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e165      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8154 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ae 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x300>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x308>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x20a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x206>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x202>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae96 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0cc      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d90c      	bls.n	800122c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800124e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d044      	beq.n	8001310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d119      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d003      	beq.n	80012ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e06f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e067      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 0203 	bic.w	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4934      	ldr	r1, [pc, #208]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff fce6 	bl	8000cb0 <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fce2 	bl	8000cb0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e04f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 020c 	and.w	r2, r3, #12
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d1eb      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d20c      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f855 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 800137a:	4602      	mov	r2, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	490a      	ldr	r1, [pc, #40]	; (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	5ccb      	ldrb	r3, [r1, r3]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fc46 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	08003694 	.word	0x08003694
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d8:	f7ff fff0 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0a9b      	lsrs	r3, r3, #10
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	080036a4 	.word	0x080036a4

080013fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001400:	f7ff ffdc 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0b5b      	lsrs	r3, r3, #13
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	080036a4 	.word	0x080036a4

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001428:	b0ae      	sub	sp, #184	; 0xb8
 800142a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144a:	4bcb      	ldr	r3, [pc, #812]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b0c      	cmp	r3, #12
 8001454:	f200 8206 	bhi.w	8001864 <HAL_RCC_GetSysClockFreq+0x440>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001495 	.word	0x08001495
 8001464:	08001865 	.word	0x08001865
 8001468:	08001865 	.word	0x08001865
 800146c:	08001865 	.word	0x08001865
 8001470:	0800149d 	.word	0x0800149d
 8001474:	08001865 	.word	0x08001865
 8001478:	08001865 	.word	0x08001865
 800147c:	08001865 	.word	0x08001865
 8001480:	080014a5 	.word	0x080014a5
 8001484:	08001865 	.word	0x08001865
 8001488:	08001865 	.word	0x08001865
 800148c:	08001865 	.word	0x08001865
 8001490:	08001695 	.word	0x08001695
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4bb9      	ldr	r3, [pc, #740]	; (800177c <HAL_RCC_GetSysClockFreq+0x358>)
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800149a:	e1e7      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4bb8      	ldr	r3, [pc, #736]	; (8001780 <HAL_RCC_GetSysClockFreq+0x35c>)
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014a2:	e1e3      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a4:	4bb4      	ldr	r3, [pc, #720]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	4bb1      	ldr	r3, [pc, #708]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d071      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4bae      	ldr	r3, [pc, #696]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014e2:	4622      	mov	r2, r4
 80014e4:	462b      	mov	r3, r5
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	0159      	lsls	r1, r3, #5
 80014f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f4:	0150      	lsls	r0, r2, #5
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4621      	mov	r1, r4
 80014fc:	1a51      	subs	r1, r2, r1
 80014fe:	6439      	str	r1, [r7, #64]	; 0x40
 8001500:	4629      	mov	r1, r5
 8001502:	eb63 0301 	sbc.w	r3, r3, r1
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001514:	4649      	mov	r1, r9
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	4641      	mov	r1, r8
 800151a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151e:	4641      	mov	r1, r8
 8001520:	018a      	lsls	r2, r1, #6
 8001522:	4641      	mov	r1, r8
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	63b9      	str	r1, [r7, #56]	; 0x38
 8001528:	4649      	mov	r1, r9
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800153c:	4649      	mov	r1, r9
 800153e:	00cb      	lsls	r3, r1, #3
 8001540:	4641      	mov	r1, r8
 8001542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001546:	4641      	mov	r1, r8
 8001548:	00ca      	lsls	r2, r1, #3
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	4603      	mov	r3, r0
 8001550:	4622      	mov	r2, r4
 8001552:	189b      	adds	r3, r3, r2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
 8001556:	462b      	mov	r3, r5
 8001558:	460a      	mov	r2, r1
 800155a:	eb42 0303 	adc.w	r3, r2, r3
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800156c:	4629      	mov	r1, r5
 800156e:	024b      	lsls	r3, r1, #9
 8001570:	4621      	mov	r1, r4
 8001572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001576:	4621      	mov	r1, r4
 8001578:	024a      	lsls	r2, r1, #9
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001582:	2200      	movs	r2, #0
 8001584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800158c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001590:	f7fe fe38 	bl	8000204 <__aeabi_uldivmod>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4613      	mov	r3, r2
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800159e:	e067      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80015ba:	2300      	movs	r3, #0
 80015bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015c2:	4622      	mov	r2, r4
 80015c4:	462b      	mov	r3, r5
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	0159      	lsls	r1, r3, #5
 80015d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d4:	0150      	lsls	r0, r2, #5
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4621      	mov	r1, r4
 80015dc:	1a51      	subs	r1, r2, r1
 80015de:	62b9      	str	r1, [r7, #40]	; 0x28
 80015e0:	4629      	mov	r1, r5
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015f4:	4649      	mov	r1, r9
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	4641      	mov	r1, r8
 80015fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fe:	4641      	mov	r1, r8
 8001600:	018a      	lsls	r2, r1, #6
 8001602:	4641      	mov	r1, r8
 8001604:	ebb2 0a01 	subs.w	sl, r2, r1
 8001608:	4649      	mov	r1, r9
 800160a:	eb63 0b01 	sbc.w	fp, r3, r1
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800161a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800161e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001622:	4692      	mov	sl, r2
 8001624:	469b      	mov	fp, r3
 8001626:	4623      	mov	r3, r4
 8001628:	eb1a 0303 	adds.w	r3, sl, r3
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	462b      	mov	r3, r5
 8001630:	eb4b 0303 	adc.w	r3, fp, r3
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001642:	4629      	mov	r1, r5
 8001644:	028b      	lsls	r3, r1, #10
 8001646:	4621      	mov	r1, r4
 8001648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800164c:	4621      	mov	r1, r4
 800164e:	028a      	lsls	r2, r1, #10
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001658:	2200      	movs	r2, #0
 800165a:	673b      	str	r3, [r7, #112]	; 0x70
 800165c:	677a      	str	r2, [r7, #116]	; 0x74
 800165e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001662:	f7fe fdcf 	bl	8000204 <__aeabi_uldivmod>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4613      	mov	r3, r2
 800166c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	3301      	adds	r3, #1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8001682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001692:	e0eb      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06b      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80016b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016be:	663b      	str	r3, [r7, #96]	; 0x60
 80016c0:	2300      	movs	r3, #0
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
 80016c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016c8:	4622      	mov	r2, r4
 80016ca:	462b      	mov	r3, r5
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	0159      	lsls	r1, r3, #5
 80016d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016da:	0150      	lsls	r0, r2, #5
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a51      	subs	r1, r2, r1
 80016e4:	61b9      	str	r1, [r7, #24]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016fa:	4659      	mov	r1, fp
 80016fc:	018b      	lsls	r3, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001704:	4651      	mov	r1, sl
 8001706:	018a      	lsls	r2, r1, #6
 8001708:	4651      	mov	r1, sl
 800170a:	ebb2 0801 	subs.w	r8, r2, r1
 800170e:	4659      	mov	r1, fp
 8001710:	eb63 0901 	sbc.w	r9, r3, r1
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001728:	4690      	mov	r8, r2
 800172a:	4699      	mov	r9, r3
 800172c:	4623      	mov	r3, r4
 800172e:	eb18 0303 	adds.w	r3, r8, r3
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	462b      	mov	r3, r5
 8001736:	eb49 0303 	adc.w	r3, r9, r3
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001748:	4629      	mov	r1, r5
 800174a:	024b      	lsls	r3, r1, #9
 800174c:	4621      	mov	r1, r4
 800174e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001752:	4621      	mov	r1, r4
 8001754:	024a      	lsls	r2, r1, #9
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175e:	2200      	movs	r2, #0
 8001760:	65bb      	str	r3, [r7, #88]	; 0x58
 8001762:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001768:	f7fe fd4c 	bl	8000204 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001776:	e065      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x420>
 8001778:	40023800 	.word	0x40023800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_GetSysClockFreq+0x458>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	4618      	mov	r0, r3
 800178e:	4611      	mov	r1, r2
 8001790:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001794:	653b      	str	r3, [r7, #80]	; 0x50
 8001796:	2300      	movs	r3, #0
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
 800179a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800179e:	4642      	mov	r2, r8
 80017a0:	464b      	mov	r3, r9
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0159      	lsls	r1, r3, #5
 80017ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b0:	0150      	lsls	r0, r2, #5
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4641      	mov	r1, r8
 80017b8:	1a51      	subs	r1, r2, r1
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	4649      	mov	r1, r9
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017d0:	4659      	mov	r1, fp
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4651      	mov	r1, sl
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4651      	mov	r1, sl
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4651      	mov	r1, sl
 80017e0:	1a54      	subs	r4, r2, r1
 80017e2:	4659      	mov	r1, fp
 80017e4:	eb63 0501 	sbc.w	r5, r3, r1
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	00eb      	lsls	r3, r5, #3
 80017f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f6:	00e2      	lsls	r2, r4, #3
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	4643      	mov	r3, r8
 80017fe:	18e3      	adds	r3, r4, r3
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	464b      	mov	r3, r9
 8001804:	eb45 0303 	adc.w	r3, r5, r3
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001816:	4629      	mov	r1, r5
 8001818:	028b      	lsls	r3, r1, #10
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001820:	4621      	mov	r1, r4
 8001822:	028a      	lsls	r2, r1, #10
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182c:	2200      	movs	r2, #0
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001830:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001836:	f7fe fce5 	bl	8000204 <__aeabi_uldivmod>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4613      	mov	r3, r2
 8001840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_GetSysClockFreq+0x458>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0f1b      	lsrs	r3, r3, #28
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8001852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001862:	e003      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001870:	4618      	mov	r0, r3
 8001872:	37b8      	adds	r7, #184	; 0xb8
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	00f42400 	.word	0x00f42400

08001884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e28d      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8083 	beq.w	80019aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018a4:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d019      	beq.n	80018e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b0:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018bc:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x124>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e25a      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x90>
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7b      	ldr	r2, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xcc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xb4>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a72      	ldr	r2, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xcc>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6b      	ldr	r2, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f9aa 	bl	8000cb0 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff f9a6 	bl	8000cb0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e21f      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xdc>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f996 	bl	8000cb0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f992 	bl	8000cb0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e20b      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x104>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06f      	beq.n	8001a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x186>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1d3      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x278>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f93f 	bl	8000cb0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f93b 	bl	8000cb0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1b4      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4925      	ldr	r1, [pc, #148]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x278>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f91e 	bl	8000cb0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff f91a 	bl	8000cb0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e193      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f8fe 	bl	8000cb0 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f8fa 	bl	8000cb0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e173      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x234>
 8001ad6:	e01b      	b.n	8001b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f8e7 	bl	8000cb0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f8e3 	bl	8000cb0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e15c      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b8a      	ldr	r3, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8097 	beq.w	8001c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a7e      	ldr	r2, [pc, #504]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b79      	ldr	r3, [pc, #484]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f8a3 	bl	8000cb0 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff f89f 	bl	8000cb0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e118      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x31e>
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x358>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x340>
 8001baa:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x358>
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f864 	bl	8000cb0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f860 	bl	8000cb0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0d7      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x368>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f84e 	bl	8000cb0 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f84a 	bl	8000cb0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0c1      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a3a      	ldr	r2, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ad 	beq.w	8001db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d060      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d145      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f81e 	bl	8000cb0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff f81a 	bl	8000cb0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e093      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	491b      	ldr	r1, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7fe ffef 	bl	8000cb0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe ffeb 	bl	8000cb0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e064      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x452>
 8001cf4:	e05c      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ffd8 	bl	8000cb0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe ffd4 	bl	8000cb0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04d      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x480>
 8001d22:	e045      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e040      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
 8001d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_OscConfig+0x538>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d030      	beq.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d129      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d122      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d119      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10f      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e041      	b.n	8001e56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fe10 	bl	8000a0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 f8ca 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e088      	b.n	8001f8e <HAL_TIM_IC_ConfigChannel+0x130>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11b      	bne.n	8001ec2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001e9a:	f000 f929 	bl	80020f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 020c 	bic.w	r2, r2, #12
 8001eac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6999      	ldr	r1, [r3, #24]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]
 8001ec0:	e060      	b.n	8001f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d11c      	bne.n	8001f02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001ed8:	f000 f97e 	bl	80021d8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001eea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6999      	ldr	r1, [r3, #24]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	021a      	lsls	r2, r3, #8
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e040      	b.n	8001f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001f18:	f000 f99b 	bl	8002252 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020c 	bic.w	r2, r2, #12
 8001f2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69d9      	ldr	r1, [r3, #28]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	61da      	str	r2, [r3, #28]
 8001f3e:	e021      	b.n	8001f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d11c      	bne.n	8001f80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001f56:	f000 f9b8 	bl	80022ca <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69d9      	ldr	r1, [r3, #28]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	021a      	lsls	r2, r3, #8
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
 8001f7e:	e001      	b.n	8001f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a46      	ldr	r2, [pc, #280]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a43      	ldr	r2, [pc, #268]	; (80020c8 <TIM_Base_SetConfig+0x130>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a42      	ldr	r2, [pc, #264]	; (80020cc <TIM_Base_SetConfig+0x134>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <TIM_Base_SetConfig+0x138>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d027      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <TIM_Base_SetConfig+0x130>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d023      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <TIM_Base_SetConfig+0x134>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a30      	ldr	r2, [pc, #192]	; (80020d0 <TIM_Base_SetConfig+0x138>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d017      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <TIM_Base_SetConfig+0x140>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <TIM_Base_SetConfig+0x144>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <TIM_Base_SetConfig+0x148>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <TIM_Base_SetConfig+0x14c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <TIM_Base_SetConfig+0x150>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <TIM_Base_SetConfig+0x154>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0xf8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d105      	bne.n	80020b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f023 0201 	bic.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
  }
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40010400 	.word	0x40010400
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800
 80020e4:	40001800 	.word	0x40001800
 80020e8:	40001c00 	.word	0x40001c00
 80020ec:	40002000 	.word	0x40002000

080020f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 0201 	bic.w	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <TIM_TI1_SetConfig+0xcc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01b      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d017      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <TIM_TI1_SetConfig+0xd0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <TIM_TI1_SetConfig+0xd4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00f      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a23      	ldr	r2, [pc, #140]	; (80021c8 <TIM_TI1_SetConfig+0xd8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00b      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <TIM_TI1_SetConfig+0xdc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <TIM_TI1_SetConfig+0xe0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_TI1_SetConfig+0x66>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <TIM_TI1_SetConfig+0xe4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <TIM_TI1_SetConfig+0x6a>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <TIM_TI1_SetConfig+0x6c>
 800215a:	2300      	movs	r3, #0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e003      	b.n	800217a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	b2db      	uxtb	r3, r3
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f023 030a 	bic.w	r3, r3, #10
 8002194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 030a 	and.w	r3, r3, #10
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40010400 	.word	0x40010400
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40001800 	.word	0x40001800

080021d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 0210 	bic.w	r2, r3, #16
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	031b      	lsls	r3, r3, #12
 800221c:	b29b      	uxth	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800222a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	621a      	str	r2, [r3, #32]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002252:	b480      	push	{r7}
 8002254:	b087      	sub	sp, #28
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	b2db      	uxtb	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80022a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	621a      	str	r2, [r3, #32]
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002308:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	b29b      	uxth	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800231c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	031b      	lsls	r3, r3, #12
 8002322:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	621a      	str	r2, [r3, #32]
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002358:	2302      	movs	r3, #2
 800235a:	e05a      	b.n	8002412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d022      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d01d      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d018      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00e      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a18      	ldr	r2, [pc, #96]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a17      	ldr	r2, [pc, #92]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10c      	bne.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40010400 	.word	0x40010400
 8002434:	40014000 	.word	0x40014000
 8002438:	40001800 	.word	0x40001800

0800243c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e042      	b.n	80024d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fb1a 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800247e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f82b 	bl	80024dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b0c0      	sub	sp, #256	; 0x100
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	68d9      	ldr	r1, [r3, #12]
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	ea40 0301 	orr.w	r3, r0, r1
 8002504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	431a      	orrs	r2, r3
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	431a      	orrs	r2, r3
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002534:	f021 010c 	bic.w	r1, r1, #12
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002542:	430b      	orrs	r3, r1
 8002544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	6999      	ldr	r1, [r3, #24]
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	ea40 0301 	orr.w	r3, r0, r1
 8002562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <UART_SetConfig+0x2cc>)
 800256c:	429a      	cmp	r2, r3
 800256e:	d005      	beq.n	800257c <UART_SetConfig+0xa0>
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <UART_SetConfig+0x2d0>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d104      	bne.n	8002586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800257c:	f7fe ff3e 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 8002580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002584:	e003      	b.n	800258e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002586:	f7fe ff25 	bl	80013d4 <HAL_RCC_GetPCLK1Freq>
 800258a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	f040 810c 	bne.w	80027b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b6:	415b      	adcs	r3, r3
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025be:	4621      	mov	r1, r4
 80025c0:	eb12 0801 	adds.w	r8, r2, r1
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb43 0901 	adc.w	r9, r3, r1
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	eb18 0303 	adds.w	r3, r8, r3
 80025e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025ec:	462b      	mov	r3, r5
 80025ee:	eb49 0303 	adc.w	r3, r9, r3
 80025f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800260a:	460b      	mov	r3, r1
 800260c:	18db      	adds	r3, r3, r3
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
 8002610:	4613      	mov	r3, r2
 8002612:	eb42 0303 	adc.w	r3, r2, r3
 8002616:	657b      	str	r3, [r7, #84]	; 0x54
 8002618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800261c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002620:	f7fd fdf0 	bl	8000204 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <UART_SetConfig+0x2d4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800263c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	64b9      	str	r1, [r7, #72]	; 0x48
 800264c:	415b      	adcs	r3, r3
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002654:	4641      	mov	r1, r8
 8002656:	eb12 0a01 	adds.w	sl, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb43 0b01 	adc.w	fp, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800266c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002674:	4692      	mov	sl, r2
 8002676:	469b      	mov	fp, r3
 8002678:	4643      	mov	r3, r8
 800267a:	eb1a 0303 	adds.w	r3, sl, r3
 800267e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002682:	464b      	mov	r3, r9
 8002684:	eb4b 0303 	adc.w	r3, fp, r3
 8002688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800269c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026a0:	460b      	mov	r3, r1
 80026a2:	18db      	adds	r3, r3, r3
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
 80026a6:	4613      	mov	r3, r2
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	647b      	str	r3, [r7, #68]	; 0x44
 80026ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026b6:	f7fd fda5 	bl	8000204 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <UART_SetConfig+0x2d4>)
 80026c2:	fba3 2301 	umull	r2, r3, r3, r1
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2264      	movs	r2, #100	; 0x64
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	1acb      	subs	r3, r1, r3
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <UART_SetConfig+0x2d4>)
 80026d8:	fba3 2302 	umull	r2, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e4:	441c      	add	r4, r3
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002700:	415b      	adcs	r3, r3
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002708:	4641      	mov	r1, r8
 800270a:	1851      	adds	r1, r2, r1
 800270c:	6339      	str	r1, [r7, #48]	; 0x30
 800270e:	4649      	mov	r1, r9
 8002710:	414b      	adcs	r3, r1
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002720:	4659      	mov	r1, fp
 8002722:	00cb      	lsls	r3, r1, #3
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272a:	4651      	mov	r1, sl
 800272c:	00ca      	lsls	r2, r1, #3
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4603      	mov	r3, r0
 8002734:	4642      	mov	r2, r8
 8002736:	189b      	adds	r3, r3, r2
 8002738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273c:	464b      	mov	r3, r9
 800273e:	460a      	mov	r2, r1
 8002740:	eb42 0303 	adc.w	r3, r2, r3
 8002744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800275c:	460b      	mov	r3, r1
 800275e:	18db      	adds	r3, r3, r3
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	4613      	mov	r3, r2
 8002764:	eb42 0303 	adc.w	r3, r2, r3
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800276e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002772:	f7fd fd47 	bl	8000204 <__aeabi_uldivmod>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <UART_SetConfig+0x2d4>)
 800277c:	fba3 1302 	umull	r1, r3, r3, r2
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	2164      	movs	r1, #100	; 0x64
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	3332      	adds	r3, #50	; 0x32
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <UART_SetConfig+0x2d4>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	f003 0207 	and.w	r2, r3, #7
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4422      	add	r2, r4
 80027a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027a4:	e106      	b.n	80029b4 <UART_SetConfig+0x4d8>
 80027a6:	bf00      	nop
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40011400 	.word	0x40011400
 80027b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027c6:	4642      	mov	r2, r8
 80027c8:	464b      	mov	r3, r9
 80027ca:	1891      	adds	r1, r2, r2
 80027cc:	6239      	str	r1, [r7, #32]
 80027ce:	415b      	adcs	r3, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027d6:	4641      	mov	r1, r8
 80027d8:	1854      	adds	r4, r2, r1
 80027da:	4649      	mov	r1, r9
 80027dc:	eb43 0501 	adc.w	r5, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	00eb      	lsls	r3, r5, #3
 80027ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ee:	00e2      	lsls	r2, r4, #3
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4643      	mov	r3, r8
 80027f6:	18e3      	adds	r3, r4, r3
 80027f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027fc:	464b      	mov	r3, r9
 80027fe:	eb45 0303 	adc.w	r3, r5, r3
 8002802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002822:	4629      	mov	r1, r5
 8002824:	008b      	lsls	r3, r1, #2
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800282c:	4621      	mov	r1, r4
 800282e:	008a      	lsls	r2, r1, #2
 8002830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002834:	f7fd fce6 	bl	8000204 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <UART_SetConfig+0x4e4>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011c      	lsls	r4, r3, #4
 8002846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	1891      	adds	r1, r2, r2
 800285e:	61b9      	str	r1, [r7, #24]
 8002860:	415b      	adcs	r3, r3
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002868:	4641      	mov	r1, r8
 800286a:	1851      	adds	r1, r2, r1
 800286c:	6139      	str	r1, [r7, #16]
 800286e:	4649      	mov	r1, r9
 8002870:	414b      	adcs	r3, r1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002880:	4659      	mov	r1, fp
 8002882:	00cb      	lsls	r3, r1, #3
 8002884:	4651      	mov	r1, sl
 8002886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288a:	4651      	mov	r1, sl
 800288c:	00ca      	lsls	r2, r1, #3
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	4603      	mov	r3, r0
 8002894:	4642      	mov	r2, r8
 8002896:	189b      	adds	r3, r3, r2
 8002898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800289c:	464b      	mov	r3, r9
 800289e:	460a      	mov	r2, r1
 80028a0:	eb42 0303 	adc.w	r3, r2, r3
 80028a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028c0:	4649      	mov	r1, r9
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4641      	mov	r1, r8
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028d2:	f7fd fc97 	bl	8000204 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <UART_SetConfig+0x4e4>)
 80028de:	fba3 2301 	umull	r2, r3, r3, r1
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2264      	movs	r2, #100	; 0x64
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	1acb      	subs	r3, r1, r3
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	3332      	adds	r3, #50	; 0x32
 80028f0:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <UART_SetConfig+0x4e4>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fc:	441c      	add	r4, r3
 80028fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002902:	2200      	movs	r2, #0
 8002904:	673b      	str	r3, [r7, #112]	; 0x70
 8002906:	677a      	str	r2, [r7, #116]	; 0x74
 8002908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	415b      	adcs	r3, r3
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	66bb      	str	r3, [r7, #104]	; 0x68
 800294e:	464b      	mov	r3, r9
 8002950:	460a      	mov	r2, r1
 8002952:	eb42 0303 	adc.w	r3, r2, r3
 8002956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	663b      	str	r3, [r7, #96]	; 0x60
 8002962:	667a      	str	r2, [r7, #100]	; 0x64
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002970:	4649      	mov	r1, r9
 8002972:	008b      	lsls	r3, r1, #2
 8002974:	4641      	mov	r1, r8
 8002976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297a:	4641      	mov	r1, r8
 800297c:	008a      	lsls	r2, r1, #2
 800297e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002982:	f7fd fc3f 	bl	8000204 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <UART_SetConfig+0x4e4>)
 800298c:	fba3 1302 	umull	r1, r3, r3, r2
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	2164      	movs	r1, #100	; 0x64
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	3332      	adds	r3, #50	; 0x32
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <UART_SetConfig+0x4e4>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 020f 	and.w	r2, r3, #15
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4422      	add	r2, r4
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029ba:	46bd      	mov	sp, r7
 80029bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c0:	51eb851f 	.word	0x51eb851f

080029c4 <QF_int_disable_>:
// On ARMv7-M and higher, interrupts are disabled *selectively* with the
// BASEPRI register.
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_disable_(void) {
__asm volatile (
 80029c4:	f3ef 8011 	mrs	r0, BASEPRI
 80029c8:	213f      	movs	r1, #63	; 0x3f
 80029ca:	f381 8811 	msr	BASEPRI, r1
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d100      	bne.n	80029d4 <QF_int_disable_error>
 80029d2:	4770      	bx	lr

080029d4 <QF_int_disable_error>:
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <QF_int_disable_error+0xc>)
 80029d6:	2164      	movs	r1, #100	; 0x64
 80029d8:	4a02      	ldr	r2, [pc, #8]	; (80029e4 <QF_int_disable_error+0x10>)
 80029da:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80029dc:	bf00      	nop
 80029de:	0000      	.short	0x0000
 80029e0:	080036ac 	.word	0x080036ac
 80029e4:	080009a5 	.word	0x080009a5

080029e8 <QF_int_enable_>:
// On ARMv6-M, interrupts are enabled with the PRIMASK register.
// On ARMv7-M and higher, interrupts are enabled with the BASEPRI register.
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_enable_(void) {
__asm volatile (
 80029e8:	f3ef 8011 	mrs	r0, BASEPRI
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d003      	beq.n	80029f8 <QF_int_enable_error>
 80029f0:	2100      	movs	r1, #0
 80029f2:	f381 8811 	msr	BASEPRI, r1
 80029f6:	4770      	bx	lr

080029f8 <QF_int_enable_error>:
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <QF_int_enable_error+0xc>)
 80029fa:	2165      	movs	r1, #101	; 0x65
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <QF_int_enable_error+0x10>)
 80029fe:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002a00:	bf00      	nop
 8002a02:	0000      	.short	0x0000
 8002a04:	080036ac 	.word	0x080036ac
 8002a08:	080009a5 	.word	0x080009a5

08002a0c <QF_crit_entry_>:
// NOT disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_entry_(void) {
__asm volatile (
 8002a0c:	f3ef 8011 	mrs	r0, BASEPRI
 8002a10:	213f      	movs	r1, #63	; 0x3f
 8002a12:	f381 8811 	msr	BASEPRI, r1
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d100      	bne.n	8002a1c <QF_crit_entry_error>
 8002a1a:	4770      	bx	lr

08002a1c <QF_crit_entry_error>:
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <QF_crit_entry_error+0xc>)
 8002a1e:	216e      	movs	r1, #110	; 0x6e
 8002a20:	4a02      	ldr	r2, [pc, #8]	; (8002a2c <QF_crit_entry_error+0x10>)
 8002a22:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002a24:	bf00      	nop
 8002a26:	0000      	.short	0x0000
 8002a28:	080036ac 	.word	0x080036ac
 8002a2c:	080009a5 	.word	0x080009a5

08002a30 <QF_crit_exit_>:
// disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_exit_(void) {
__asm volatile (
 8002a30:	f3ef 8011 	mrs	r0, BASEPRI
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d003      	beq.n	8002a40 <QF_crit_exit_error>
 8002a38:	2100      	movs	r1, #0
 8002a3a:	f381 8811 	msr	BASEPRI, r1
 8002a3e:	4770      	bx	lr

08002a40 <QF_crit_exit_error>:
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <QF_crit_exit_error+0xc>)
 8002a42:	216f      	movs	r1, #111	; 0x6f
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <QF_crit_exit_error+0x10>)
 8002a46:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002a48:	bf00      	nop
 8002a4a:	0000      	.short	0x0000
 8002a4c:	080036ac 	.word	0x080036ac
 8002a50:	080009a5 	.word	0x080009a5

08002a54 <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 8002a54:	b501      	push	{r0, lr}
 8002a56:	480c      	ldr	r0, [pc, #48]	; (8002a88 <PendSV_Handler+0x34>)
 8002a58:	4780      	blx	r0
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <PendSV_Handler+0x38>)
 8002a5c:	f04f 0101 	mov.w	r1, #1
 8002a60:	ea4f 61c1 	mov.w	r1, r1, lsl #27
 8002a64:	6011      	str	r1, [r2, #0]
 8002a66:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <PendSV_Handler+0x3c>)
 8002a6c:	f1a2 0201 	sub.w	r2, r2, #1
 8002a70:	4908      	ldr	r1, [pc, #32]	; (8002a94 <PendSV_Handler+0x40>)
 8002a72:	b088      	sub	sp, #32
 8002a74:	a805      	add	r0, sp, #20
 8002a76:	c00e      	stmia	r0!, {r1, r2, r3}
 8002a78:	f04f 0006 	mov.w	r0, #6
 8002a7c:	ea6f 0000 	mvn.w	r0, r0
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 8002a86:	bf00      	nop
 8002a88:	080029c5 	.word	0x080029c5
 8002a8c:	e000ed04 	.word	0xe000ed04
 8002a90:	08003435 	.word	0x08003435
 8002a94:	08002a99 	.word	0x08002a99

08002a98 <QK_thread_ret>:
//
// NOTE: QK_thread_ret does not execute in the PendSV context!
// NOTE: QK_thread_ret is entered with interrupts DISABLED.
__attribute__ ((naked, used, optimize("-fno-stack-protector")))
void QK_thread_ret(void) {
__asm volatile (
 8002a98:	f3ef 8014 	mrs	r0, CONTROL
 8002a9c:	f020 0004 	bic.w	r0, r0, #4
 8002aa0:	f380 8814 	msr	CONTROL, r0
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <QK_thread_ret+0x20>)
 8002aaa:	f04f 0101 	mov.w	r1, #1
 8002aae:	ea4f 71c1 	mov.w	r1, r1, lsl #31
 8002ab2:	6001      	str	r1, [r0, #0]
 8002ab4:	e7fe      	b.n	8002ab4 <QK_thread_ret+0x1c>
#endif                  //--------- use IRQ

    // NOTE! interrupts are still disabled when NMI is used
    "  B       .                \n" // wait for preemption by NMI/IRQ
    );
}
 8002ab6:	bf00      	nop
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <NMI_Handler>:
__attribute__ ((naked, optimize("-fno-stack-protector")))
#ifndef QK_USE_IRQ_NUM  //--------- IRQ NOT defined, use NMI by default

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
void NMI_Handler(void) {
__asm volatile (
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <NMI_Handler+0xc>)
 8002abe:	4780      	blx	r0
// NOTE: The IRQ Handler is entered with interrupts already ENABLED
void QK_USE_IRQ_HANDLER(void) {
#endif                  //--------- use IRQ

  // ...continue here from either NMI_Handler() or IRQ_Handler()
__asm volatile (
 8002ac0:	b008      	add	sp, #32
 8002ac2:	bd01      	pop	{r0, pc}
    "  ADD     sp,sp,#(8*4)     \n" // remove one 8-register exception frame
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
}
 8002ac4:	bf00      	nop
 8002ac6:	0000      	.short	0x0000
 8002ac8:	080029e9 	.word	0x080029e9

08002acc <QEvt_verify_>:
}

// private:

//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    return (me != (QEvt const *)0)
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <QEvt_verify_+0x1e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	2be0      	cmp	r3, #224	; 0xe0
 8002ae4:	d101      	bne.n	8002aea <QEvt_verify_+0x1e>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <QEvt_verify_+0x20>
 8002aea:	2300      	movs	r3, #0
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <QHsm_ctor+0x28>)
 8002b0e:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <QHsm_ctor+0x2c>)
 8002b14:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	080036cc 	.word	0x080036cc
 8002b2c:	08003149 	.word	0x08003149

08002b30 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler t = me->state.fun;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34

    QF_CRIT_ENTRY();
 8002b42:	f7ff ff63 	bl	8002a0c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <QHsm_init_+0x2e>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <QHsm_init_+0x2e>
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	4a45      	ldr	r2, [pc, #276]	; (8002c70 <QHsm_init_+0x140>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <QHsm_init_+0x36>
 8002b5e:	21c8      	movs	r1, #200	; 0xc8
 8002b60:	4844      	ldr	r0, [pc, #272]	; (8002c74 <QHsm_init_+0x144>)
 8002b62:	f7fd ff1f 	bl	80009a4 <Q_onError>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 8002b66:	f7ff ff63 	bl	8002a30 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	4798      	blx	r3
 8002b74:	4603      	mov	r3, r0
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    QF_CRIT_ENTRY();
 8002b7a:	f7ff ff47 	bl	8002a0c <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 8002b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <QHsm_init_+0x5e>
 8002b86:	21d2      	movs	r1, #210	; 0xd2
 8002b88:	483a      	ldr	r0, [pc, #232]	; (8002c74 <QHsm_init_+0x144>)
 8002b8a:	f7fd ff0b 	bl	80009a4 <Q_onError>
        QS_FUN_PRE_(t);            // the source state
        QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002b8e:	f7ff ff4f 	bl	8002a30 <QF_crit_exit_>

    // drill down into the state hierarchy with initial transitions...
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002b92:	2306      	movs	r3, #6
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran entry path array
        int_fast8_t ip = 0; // tran entry path index
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c

        path[0] = me->temp.fun;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	613b      	str	r3, [r7, #16]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4934      	ldr	r1, [pc, #208]	; (8002c78 <QHsm_init_+0x148>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002baa:	e00f      	b.n	8002bcc <QHsm_init_+0x9c>
            ++ip;
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	3301      	adds	r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[ip] = me->temp.fun;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3338      	adds	r3, #56	; 0x38
 8002bbc:	443b      	add	r3, r7
 8002bbe:	f843 2c28 	str.w	r2, [r3, #-40]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	492c      	ldr	r1, [pc, #176]	; (8002c78 <QHsm_init_+0x148>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d002      	beq.n	8002bdc <QHsm_init_+0xac>
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	dde7      	ble.n	8002bac <QHsm_init_+0x7c>
        }
        QF_CRIT_ENTRY();
 8002bdc:	f7ff ff16 	bl	8002a0c <QF_crit_entry_>
        // The initial transition source state must be reached
        // Too many state nesting levels or "malformed" HSM.
        Q_ASSERT_INCRIT(220, me->temp.fun == t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d003      	beq.n	8002bf2 <QHsm_init_+0xc2>
 8002bea:	21dc      	movs	r1, #220	; 0xdc
 8002bec:	4821      	ldr	r0, [pc, #132]	; (8002c74 <QHsm_init_+0x144>)
 8002bee:	f7fd fed9 	bl	80009a4 <Q_onError>
        QF_CRIT_EXIT();
 8002bf2:	f7ff ff1d 	bl	8002a30 <QF_crit_exit_>

        me->temp.fun = path[0];
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	3338      	adds	r3, #56	; 0x38
 8002c02:	443b      	add	r3, r7
 8002c04:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002c08:	491c      	ldr	r1, [pc, #112]	; (8002c7c <QHsm_init_+0x14c>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	3b01      	subs	r3, #1
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (ip >= 0);
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	daf0      	bge.n	8002bfc <QHsm_init_+0xcc>

        t = path[0]; // current state becomes the new source
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	4917      	ldr	r1, [pc, #92]	; (8002c80 <QHsm_init_+0x150>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	4798      	blx	r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        --limit;
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
    } while ((r == Q_RET_TRAN) && (limit > 0));
 8002c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d102      	bne.n	8002c40 <QHsm_init_+0x110>
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	dcaa      	bgt.n	8002b96 <QHsm_init_+0x66>

    QF_CRIT_ENTRY();
 8002c40:	f7ff fee4 	bl	8002a0c <QF_crit_entry_>
    // Loop limit must not be reached.
    // Too many state nesting levels or likely "malformed" HSM
    Q_ENSURE_INCRIT(290, limit > 0);
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dc04      	bgt.n	8002c54 <QHsm_init_+0x124>
 8002c4a:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002c4e:	4809      	ldr	r0, [pc, #36]	; (8002c74 <QHsm_init_+0x144>)
 8002c50:	f7fd fea8 	bl	80009a4 <Q_onError>
        QS_OBJ_PRE_(me);   // this state machine object
        QS_FUN_PRE_(t);    // the new active state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002c54:	f7ff feec 	bl	8002a30 <QF_crit_exit_>

    me->state.fun = t;   // change the current active state
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5c:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
    #endif
}
 8002c68:	bf00      	nop
 8002c6a:	3738      	adds	r7, #56	; 0x38
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08003149 	.word	0x08003149
 8002c74:	080036b4 	.word	0x080036b4
 8002c78:	080036bc 	.word	0x080036bc
 8002c7c:	080036c0 	.word	0x080036c0
 8002c80:	080036c8 	.word	0x080036c8

08002c84 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	; 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    QStateHandler t = s;
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8002c9a:	f7ff feb7 	bl	8002a0c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (s != Q_STATE_CAST(0))
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <QHsm_dispatch_+0x2e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d004      	beq.n	8002cbc <QHsm_dispatch_+0x38>
 8002cb2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002cb6:	4874      	ldr	r0, [pc, #464]	; (8002e88 <QHsm_dispatch_+0x204>)
 8002cb8:	f7fd fe74 	bl	80009a4 <Q_onError>
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    Q_REQUIRE_INCRIT(302, QEvt_verify_(e));
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f7ff ff05 	bl	8002acc <QEvt_verify_>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <QHsm_dispatch_+0x4e>
 8002cc8:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002ccc:	486e      	ldr	r0, [pc, #440]	; (8002e88 <QHsm_dispatch_+0x204>)
 8002cce:	f7fd fe69 	bl	80009a4 <Q_onError>
        QS_OBJ_PRE_(me);     // this state machine object
        QS_FUN_PRE_(s);      // the current state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002cd2:	f7ff fead 	bl	8002a30 <QF_crit_exit_>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cda:	609a      	str	r2, [r3, #8]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002cdc:	2306      	movs	r3, #6
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
    do {
        s = me->temp.fun;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        r = (*s)(me, e); // invoke state handler s
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	4798      	blx	r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 8002cf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d106      	bne.n	8002d0a <QHsm_dispatch_+0x86>
                QS_FUN_PRE_(s);      // the current state
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	4963      	ldr	r1, [pc, #396]	; (8002e8c <QHsm_dispatch_+0x208>)
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	4798      	blx	r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        --limit;
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
    } while ((r == Q_RET_SUPER) && (limit > 0));
 8002d10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <QHsm_dispatch_+0x9a>
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	dce0      	bgt.n	8002ce0 <QHsm_dispatch_+0x5c>

    QF_CRIT_ENTRY();
 8002d1e:	f7ff fe75 	bl	8002a0c <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, limit > 0);
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dc04      	bgt.n	8002d32 <QHsm_dispatch_+0xae>
 8002d28:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002d2c:	4856      	ldr	r0, [pc, #344]	; (8002e88 <QHsm_dispatch_+0x204>)
 8002d2e:	f7fd fe39 	bl	80009a4 <Q_onError>
    QF_CRIT_EXIT();
 8002d32:	f7ff fe7d 	bl	8002a30 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // regular tran. taken?
 8002d36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	f240 8098 	bls.w	8002e70 <QHsm_dispatch_+0x1ec>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; // tran. target
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	617b      	str	r3, [r7, #20]
        path[1] = t; // current state
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	61bb      	str	r3, [r7, #24]
        path[2] = s; // tran. source
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	61fb      	str	r3, [r7, #28]

        // exit current state to tran. source s...
        limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002d4e:	2306      	movs	r3, #6
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8002d52:	e010      	b.n	8002d76 <QHsm_dispatch_+0xf2>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	494e      	ldr	r1, [pc, #312]	; (8002e90 <QHsm_dispatch_+0x20c>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	4798      	blx	r3
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d103      	bne.n	8002d6a <QHsm_dispatch_+0xe6>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	4949      	ldr	r1, [pc, #292]	; (8002e8c <QHsm_dispatch_+0x208>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	4798      	blx	r3
            }
            --limit;
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d002      	beq.n	8002d84 <QHsm_dispatch_+0x100>
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	dce7      	bgt.n	8002d54 <QHsm_dispatch_+0xd0>
        }
        QF_CRIT_ENTRY();
 8002d84:	f7ff fe42 	bl	8002a0c <QF_crit_entry_>
        Q_ASSERT_INCRIT(320, limit > 0);
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dc04      	bgt.n	8002d98 <QHsm_dispatch_+0x114>
 8002d8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d92:	483d      	ldr	r0, [pc, #244]	; (8002e88 <QHsm_dispatch_+0x204>)
 8002d94:	f7fd fe06 	bl	80009a4 <Q_onError>
        QF_CRIT_EXIT();
 8002d98:	f7ff fe4a 	bl	8002a30 <QF_crit_exit_>

        int_fast8_t ip = QHsm_tran_(me, path, qsId); // take the tran.
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4619      	mov	r1, r3
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f8cb 	bl	8002f40 <QHsm_tran_>
 8002daa:	6338      	str	r0, [r7, #48]	; 0x30
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        // execute state entry actions in the desired order...
        for (; ip >= 0; --ip) {
 8002dac:	e00b      	b.n	8002dc6 <QHsm_dispatch_+0x142>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	3340      	adds	r3, #64	; 0x40
 8002db4:	443b      	add	r3, r7
 8002db6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002dba:	4936      	ldr	r1, [pc, #216]	; (8002e94 <QHsm_dispatch_+0x210>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	daf0      	bge.n	8002dae <QHsm_dispatch_+0x12a>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        me->temp.fun = t; // update the next state
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd4:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002dd6:	e044      	b.n	8002e62 <QHsm_dispatch_+0x1de>
                QS_FUN_PRE_(me->temp.fun); // the target of the tran.
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
            path[0] = me->temp.fun;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	617b      	str	r3, [r7, #20]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4929      	ldr	r1, [pc, #164]	; (8002e8c <QHsm_dispatch_+0x208>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	4798      	blx	r3

            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002dec:	e00f      	b.n	8002e0e <QHsm_dispatch_+0x18a>
                ++ip;
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	3301      	adds	r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
                path[ip] = me->temp.fun;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	443b      	add	r3, r7
 8002e00:	f843 2c2c 	str.w	r2, [r3, #-44]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4920      	ldr	r1, [pc, #128]	; (8002e8c <QHsm_dispatch_+0x208>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d002      	beq.n	8002e1e <QHsm_dispatch_+0x19a>
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	dde7      	ble.n	8002dee <QHsm_dispatch_+0x16a>
            }
            QF_CRIT_ENTRY();
 8002e1e:	f7ff fdf5 	bl	8002a0c <QF_crit_entry_>
            // The initial transition source state must be reached.
            // Too many state nesting levels or "malformed" HSM.
            Q_ASSERT_INCRIT(330, me->temp.fun == t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d004      	beq.n	8002e36 <QHsm_dispatch_+0x1b2>
 8002e2c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002e30:	4815      	ldr	r0, [pc, #84]	; (8002e88 <QHsm_dispatch_+0x204>)
 8002e32:	f7fd fdb7 	bl	80009a4 <Q_onError>
            QF_CRIT_EXIT();
 8002e36:	f7ff fdfb 	bl	8002a30 <QF_crit_exit_>

            me->temp.fun = path[0];
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3340      	adds	r3, #64	; 0x40
 8002e46:	443b      	add	r3, r7
 8002e48:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e4c:	4911      	ldr	r1, [pc, #68]	; (8002e94 <QHsm_dispatch_+0x210>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	3b01      	subs	r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
            } while (ip >= 0);
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	daf0      	bge.n	8002e40 <QHsm_dispatch_+0x1bc>

            t = path[0]; // current state becomes the new source
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <QHsm_dispatch_+0x214>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	4798      	blx	r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d0b3      	beq.n	8002dd8 <QHsm_dispatch_+0x154>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e74:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]
    #endif
}
 8002e80:	bf00      	nop
 8002e82:	3740      	adds	r7, #64	; 0x40
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	080036b4 	.word	0x080036b4
 8002e8c:	080036bc 	.word	0x080036bc
 8002e90:	080036c4 	.word	0x080036c4
 8002e94:	080036c0 	.word	0x080036c0
 8002e98:	080036c8 	.word	0x080036c8

08002e9c <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002ea6:	f7ff fdb1 	bl	8002a0c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(602, me->state.uint
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d004      	beq.n	8002ec2 <QHsm_isIn_+0x26>
 8002eb8:	f240 215a 	movw	r1, #602	; 0x25a
 8002ebc:	481e      	ldr	r0, [pc, #120]	; (8002f38 <QHsm_isIn_+0x9c>)
 8002ebe:	f7fd fd71 	bl	80009a4 <Q_onError>
                      == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 8002ec2:	f7ff fdb5 	bl	8002a30 <QF_crit_exit_>

    bool inState = false; // assume that this HSM is not in 'state'
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	613b      	str	r3, [r7, #16]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_ + 1; // loop hard limit
 8002ed0:	2307      	movs	r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002ed8:	e012      	b.n	8002f00 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d102      	bne.n	8002ee8 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 8002ee6:	e011      	b.n	8002f0c <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4914      	ldr	r1, [pc, #80]	; (8002f3c <QHsm_isIn_+0xa0>)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d002      	beq.n	8002f0c <QHsm_isIn_+0x70>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dce6      	bgt.n	8002eda <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8002f0c:	f7ff fd7e 	bl	8002a0c <QF_crit_entry_>
    Q_ENSURE_INCRIT(690, limit > 0);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc04      	bgt.n	8002f20 <QHsm_isIn_+0x84>
 8002f16:	f240 21b2 	movw	r1, #690	; 0x2b2
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <QHsm_isIn_+0x9c>)
 8002f1c:	f7fd fd42 	bl	80009a4 <Q_onError>
    QF_CRIT_EXIT();
 8002f20:	f7ff fd86 	bl	8002a30 <QF_crit_exit_>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	080036b4 	.word	0x080036b4
 8002f3c:	080036bc 	.word	0x080036bc

08002f40 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d106      	bne.n	8002f74 <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4974      	ldr	r1, [pc, #464]	; (800313c <QHsm_tran_+0x1fc>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e0d1      	b.n	8003118 <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	4972      	ldr	r1, [pc, #456]	; (8003140 <QHsm_tran_+0x200>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	4798      	blx	r3

        t = me->temp.fun;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d102      	bne.n	8002f90 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	e0c3      	b.n	8003118 <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	496b      	ldr	r1, [pc, #428]	; (8003140 <QHsm_tran_+0x200>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4965      	ldr	r1, [pc, #404]	; (800313c <QHsm_tran_+0x1fc>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	e0b3      	b.n	8003118 <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d104      	bne.n	8002fc6 <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	495f      	ldr	r1, [pc, #380]	; (800313c <QHsm_tran_+0x1fc>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	4798      	blx	r3
 8002fc4:	e0a8      	b.n	8003118 <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      // save the superstate of target
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4957      	ldr	r1, [pc, #348]	; (8003140 <QHsm_tran_+0x200>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	4798      	blx	r3
 8002fe8:	4603      	mov	r3, r0
 8002fea:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 8002fec:	e01d      	b.n	800302a <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; // store the entry path
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 800300c:	2301      	movs	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	3b01      	subs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 8003016:	2303      	movs	r3, #3
 8003018:	76fb      	strb	r3, [r7, #27]
 800301a:	e006      	b.n	800302a <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4947      	ldr	r1, [pc, #284]	; (8003140 <QHsm_tran_+0x200>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	4798      	blx	r3
 8003026:	4603      	mov	r3, r0
 8003028:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 800302a:	7efb      	ldrb	r3, [r7, #27]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <QHsm_tran_+0xf6>
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	dddb      	ble.n	8002fee <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 8003036:	f7ff fce9 	bl	8002a0c <QF_crit_entry_>
                    // Tran. source must be found within the nesting depth
                    // Too many state nesting levels or "malformed" HSM.
                    Q_ASSERT_INCRIT(510, r != Q_RET_SUPER);
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <QHsm_tran_+0x10a>
 8003040:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003044:	483f      	ldr	r0, [pc, #252]	; (8003144 <QHsm_tran_+0x204>)
 8003046:	f7fd fcad 	bl	80009a4 <Q_onError>
                    QF_CRIT_EXIT();
 800304a:	f7ff fcf1 	bl	8002a30 <QF_crit_exit_>

                    // the LCA not found yet?
                    if (iq == 0) {
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d161      	bne.n	8003118 <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4939      	ldr	r1, [pc, #228]	; (800313c <QHsm_tran_+0x1fc>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8003060:	2304      	movs	r3, #4
 8003062:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { // is this the LCA?
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4413      	add	r3, r2
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	429a      	cmp	r2, r3
 8003072:	d108      	bne.n	8003086 <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 8003074:	2303      	movs	r3, #3
 8003076:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3b01      	subs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; // cause termination of the loop
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	e002      	b.n	800308c <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b01      	subs	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	dae8      	bge.n	8003064 <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 8003092:	7efb      	ldrb	r3, [r7, #27]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d03f      	beq.n	8003118 <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 8003098:	2304      	movs	r3, #4
 800309a:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t limit = QHSM_MAX_NEST_DEPTH_;
 800309c:	2306      	movs	r3, #6
 800309e:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	4926      	ldr	r1, [pc, #152]	; (800313c <QHsm_tran_+0x1fc>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	4798      	blx	r3
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d103      	bne.n	80030b6 <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	4923      	ldr	r1, [pc, #140]	; (8003140 <QHsm_tran_+0x200>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	4413      	add	r3, r2
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d108      	bne.n	80030e2 <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1;     // break out of inner loop
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 80030dc:	2303      	movs	r3, #3
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e002      	b.n	80030e8 <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	dae8      	bge.n	80030c0 <QHsm_tran_+0x180>

                                --limit;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (limit > 0));
 80030f4:	7efb      	ldrb	r3, [r7, #27]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d002      	beq.n	8003100 <QHsm_tran_+0x1c0>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	dccf      	bgt.n	80030a0 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 8003100:	f7ff fc84 	bl	8002a0c <QF_crit_entry_>
                            Q_ASSERT_INCRIT(530, limit > 0);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dc04      	bgt.n	8003114 <QHsm_tran_+0x1d4>
 800310a:	f240 2112 	movw	r1, #530	; 0x212
 800310e:	480d      	ldr	r0, [pc, #52]	; (8003144 <QHsm_tran_+0x204>)
 8003110:	f7fd fc48 	bl	80009a4 <Q_onError>
                            QF_CRIT_EXIT();
 8003114:	f7ff fc8c 	bl	8002a30 <QF_crit_exit_>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 8003118:	f7ff fc78 	bl	8002a0c <QF_crit_entry_>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b05      	cmp	r3, #5
 8003120:	dd04      	ble.n	800312c <QHsm_tran_+0x1ec>
 8003122:	f240 214e 	movw	r1, #590	; 0x24e
 8003126:	4807      	ldr	r0, [pc, #28]	; (8003144 <QHsm_tran_+0x204>)
 8003128:	f7fd fc3c 	bl	80009a4 <Q_onError>
    QF_CRIT_EXIT();
 800312c:	f7ff fc80 	bl	8002a30 <QF_crit_exit_>
    return ip;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	080036c4 	.word	0x080036c4
 8003140:	080036bc 	.word	0x080036bc
 8003144:	080036b4 	.word	0x080036b4

08003148 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8003152:	2304      	movs	r3, #4
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <QActive_get_>:
//$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::get_} .......................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003168:	f7ff fc50 	bl	8002a0c <QF_crit_entry_>
    QF_MEM_SYS();

    QACTIVE_EQUEUE_WAIT_(me); // wait for event to arrive directly
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <QActive_get_+0x1e>
 8003174:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003178:	4821      	ldr	r0, [pc, #132]	; (8003200 <QActive_get_+0xa0>)
 800317a:	f7fd fc13 	bl	80009a4 <Q_onError>

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; // get volatile into tmp
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7fdb      	ldrb	r3, [r3, #31]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; // update the # free
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7afa      	ldrb	r2, [r7, #11]
 8003192:	77da      	strb	r2, [r3, #31]

    if (nFree <= me->eQueue.end) { // any events in the ring buffer?
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7f1b      	ldrb	r3, [r3, #28]
 8003198:	7afa      	ldrb	r2, [r7, #11]
 800319a:	429a      	cmp	r2, r3
 800319c:	d81a      	bhi.n	80031d4 <QActive_get_+0x74>
        // remove event from the tail
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7f9b      	ldrb	r3, [r3, #30]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	615a      	str	r2, [r3, #20]
        if (me->eQueue.tail == 0U) { // need to wrap the tail?
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f9b      	ldrb	r3, [r3, #30]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <QActive_get_+0x64>
            me->eQueue.tail = me->eQueue.end; // wrap around
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7f1a      	ldrb	r2, [r3, #28]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	779a      	strb	r2, [r3, #30]
        }
        --me->eQueue.tail;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7f9b      	ldrb	r3, [r3, #30]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	779a      	strb	r2, [r3, #30]
 80031d2:	e00d      	b.n	80031f0 <QActive_get_+0x90>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE_(nFree);   // # free entries
        QS_END_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(310, nFree == (me->eQueue.end + 1U));
 80031da:	7afa      	ldrb	r2, [r7, #11]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7f1b      	ldrb	r3, [r3, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d004      	beq.n	80031f0 <QActive_get_+0x90>
 80031e6:	f44f 719b 	mov.w	r1, #310	; 0x136
 80031ea:	4805      	ldr	r0, [pc, #20]	; (8003200 <QActive_get_+0xa0>)
 80031ec:	f7fd fbda 	bl	80009a4 <Q_onError>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
        QS_END_PRE_()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80031f0:	f7ff fc1e 	bl	8002a30 <QF_crit_exit_>

    return e;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	080036d8 	.word	0x080036d8

08003204 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <QEvt_verify_+0x1e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321a:	2be0      	cmp	r3, #224	; 0xe0
 800321c:	d101      	bne.n	8003222 <QEvt_verify_+0x1e>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <QEvt_verify_+0x20>
 8003222:	2300      	movs	r3, #0
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <QEvt_getPoolNum_>:

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	f003 030f 	and.w	r3, r3, #15
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <QEvt_refCtr_dec_>:
static inline void QEvt_refCtr_inc_(QEvt const *me) {
    ++((QEvt *)me)->refCtr_;
}

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	709a      	strb	r2, [r3, #2]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <QF_gc>:
    return e;
}

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800327c:	f7ff fbc6 	bl	8002a0c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(402, QEvt_verify_(e));
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ffbf 	bl	8003204 <QEvt_verify_>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <QF_gc+0x22>
 800328c:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8003290:	481b      	ldr	r0, [pc, #108]	; (8003300 <QF_gc+0x8c>)
 8003292:	f7fd fb87 	bl	80009a4 <Q_onError>

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffcd 	bl	8003236 <QEvt_getPoolNum_>
 800329c:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d027      	beq.n	80032f4 <QF_gc+0x80>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	789b      	ldrb	r3, [r3, #2]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d905      	bls.n	80032ba <QF_gc+0x46>
                QS_TIME_PRE_();       // timestamp
                QS_SIG_PRE_(e->sig);  // the signal of the event
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
            QS_END_PRE_()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffcf 	bl	8003252 <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 80032b4:	f7ff fbbc 	bl	8002a30 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 80032b8:	e01e      	b.n	80032f8 <QF_gc+0x84>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <QF_gc+0x90>)
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d802      	bhi.n	80032ca <QF_gc+0x56>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d904      	bls.n	80032d4 <QF_gc+0x60>
 80032ca:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80032ce:	480c      	ldr	r0, [pc, #48]	; (8003300 <QF_gc+0x8c>)
 80032d0:	f7fd fb68 	bl	80009a4 <Q_onError>
            QF_CRIT_EXIT();
 80032d4:	f7ff fbac 	bl	8002a30 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4a07      	ldr	r2, [pc, #28]	; (8003304 <QF_gc+0x90>)
 80032e6:	4413      	add	r3, r2
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f80b 	bl	8003308 <QMPool_put>
}
 80032f2:	e001      	b.n	80032f8 <QF_gc+0x84>
        QF_CRIT_EXIT();
 80032f4:	f7ff fb9c 	bl	8002a30 <QF_crit_exit_>
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	080036e0 	.word	0x080036e0
 8003304:	20000150 	.word	0x20000150

08003308 <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003318:	f7ff fb78 	bl	8002a0c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, (me->nFree < me->nTot)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8a1b      	ldrh	r3, [r3, #16]
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	89db      	ldrh	r3, [r3, #14]
 8003326:	429a      	cmp	r2, r3
 8003328:	d209      	bcs.n	800333e <QMPool_put+0x36>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	d304      	bcc.n	800333e <QMPool_put+0x36>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d903      	bls.n	8003346 <QMPool_put+0x3e>
 800333e:	21c8      	movs	r1, #200	; 0xc8
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <QMPool_put+0x70>)
 8003342:	f7fd fb2f 	bl	80009a4 <Q_onError>
                           && (me->start <= fb) && (fb <= me->end));

    fb->next = me->free_head; // link into list
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	43da      	mvns	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	605a      	str	r2, [r3, #4]
    #endif

    // set as new head of the free list
    me->free_head = fb;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	609a      	str	r2, [r3, #8]

    ++me->nFree; // one more free block in this pool
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8a1b      	ldrh	r3, [r3, #16]
 8003362:	b29b      	uxth	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	821a      	strh	r2, [r3, #16]
        QS_OBJ_PRE_(me);        // this memory pool
        QS_MPC_PRE_(me->nFree); // the # free blocks in the pool
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800336c:	f7ff fb60 	bl	8002a30 <QF_crit_exit_>
}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	080036e8 	.word	0x080036e8

0800337c <QPSet_isEmpty>:
    me->bits[1] = 0U;
    #endif
}

//! @public @memberof QPSet
static inline bool QPSet_isEmpty(QPSet const * const me) {
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return (me->bits[0] == 0U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == 0U) ? (me->bits[1] == 0U) : false;
    #endif
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <QPSet_remove>:
}

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
    #endif
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	f1c3 0320 	rsb	r3, r3, #32
    #else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
    #endif
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	43da      	mvns	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	43db      	mvns	r3, r3
 800341e:	429a      	cmp	r2, r3
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <QK_activate_>:
    return p;
}

//${QK::QK-base::activate_} ..................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <QK_activate_+0x1e0>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	60fb      	str	r3, [r7, #12]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8003440:	4b74      	ldr	r3, [pc, #464]	; (8003614 <QK_activate_+0x1e0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_INCRIT(502,
 8003446:	4b73      	ldr	r3, [pc, #460]	; (8003614 <QK_activate_+0x1e0>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	43db      	mvns	r3, r3
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	429a      	cmp	r2, r3
 8003450:	d105      	bne.n	800345e <QK_activate_+0x2a>
 8003452:	4b70      	ldr	r3, [pc, #448]	; (8003614 <QK_activate_+0x1e0>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	43db      	mvns	r3, r3
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d004      	beq.n	8003468 <QK_activate_+0x34>
 800345e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8003462:	486d      	ldr	r0, [pc, #436]	; (8003618 <QK_activate_+0x1e4>)
 8003464:	f7fd fa9e 	bl	80009a4 <Q_onError>
       (prio_in == (uint_fast8_t)(~QK_priv_.actPrio_dis))
       && (p == (uint_fast8_t)(~QK_priv_.nextPrio_dis)));
    Q_REQUIRE_INCRIT(510, (prio_in <= QF_MAX_ACTIVE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b20      	cmp	r3, #32
 800346c:	d805      	bhi.n	800347a <QK_activate_+0x46>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <QK_activate_+0x46>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d904      	bls.n	8003484 <QK_activate_+0x50>
 800347a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800347e:	4866      	ldr	r0, [pc, #408]	; (8003618 <QK_activate_+0x1e4>)
 8003480:	f7fd fa90 	bl	80009a4 <Q_onError>

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <QK_activate_+0x1e0>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 800348a:	4b62      	ldr	r3, [pc, #392]	; (8003614 <QK_activate_+0x1e0>)
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	621a      	str	r2, [r3, #32]
    #endif

    uint_fast8_t pthre_in;
    QActive *a;
    if (prio_in == 0U) { // preempting the idle thread?
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <QK_activate_+0x6a>
        pthre_in = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e01c      	b.n	80034d8 <QK_activate_+0xa4>
    }
    else {
        a = QActive_registry_[prio_in];
 800349e:	4a5f      	ldr	r2, [pc, #380]	; (800361c <QK_activate_+0x1e8>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <QK_activate_+0x84>
 80034ae:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80034b2:	4859      	ldr	r0, [pc, #356]	; (8003618 <QK_activate_+0x1e4>)
 80034b4:	f7fd fa76 	bl	80009a4 <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	7b5b      	ldrb	r3, [r3, #13]
 80034bc:	613b      	str	r3, [r7, #16]
        Q_ASSERT_INCRIT(511, pthre_in ==
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034c4:	43db      	mvns	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d004      	beq.n	80034d8 <QK_activate_+0xa4>
 80034ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034d2:	4851      	ldr	r0, [pc, #324]	; (8003618 <QK_activate_+0x1e4>)
 80034d4:	f7fd fa66 	bl	80009a4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        a = QActive_registry_[p]; // obtain the pointer to the AO
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <QK_activate_+0x1e8>)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <QK_activate_+0xbe>
 80034e8:	f44f 7102 	mov.w	r1, #520	; 0x208
 80034ec:	484a      	ldr	r0, [pc, #296]	; (8003618 <QK_activate_+0x1e4>)
 80034ee:	f7fd fa59 	bl	80009a4 <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	7b5b      	ldrb	r3, [r3, #13]
 80034f6:	607b      	str	r3, [r7, #4]
        Q_ASSERT_INCRIT(522, pthre ==
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034fe:	43db      	mvns	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d004      	beq.n	8003512 <QK_activate_+0xde>
 8003508:	f240 210a 	movw	r1, #522	; 0x20a
 800350c:	4842      	ldr	r0, [pc, #264]	; (8003618 <QK_activate_+0x1e4>)
 800350e:	f7fd fa49 	bl	80009a4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 8003512:	4a40      	ldr	r2, [pc, #256]	; (8003614 <QK_activate_+0x1e0>)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6053      	str	r3, [r2, #4]
        QK_priv_.actThre = pthre;
 8003518:	4a3e      	ldr	r2, [pc, #248]	; (8003614 <QK_activate_+0x1e0>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
        QK_priv_.actPrio_dis = (uint_fast8_t)(~p);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	43db      	mvns	r3, r3
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <QK_activate_+0x1e0>)
 8003524:	61d3      	str	r3, [r2, #28]
        QK_priv_.actThre_dis = (uint_fast8_t)(~pthre);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	43db      	mvns	r3, r3
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <QK_activate_+0x1e0>)
 800352c:	6253      	str	r3, [r2, #36]	; 0x24

            pprev = p; // update previous prio.
        }
    #endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 800352e:	f7ff fa5b 	bl	80029e8 <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 8003532:	68b8      	ldr	r0, [r7, #8]
 8003534:	f7ff fe14 	bl	8003160 <QActive_get_>
 8003538:	6038      	str	r0, [r7, #0]
        // NOTE QActive_get_() performs QF_MEM_APP() before return

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68b8      	ldr	r0, [r7, #8]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8003548:	6838      	ldr	r0, [r7, #0]
 800354a:	f7ff fe93 	bl	8003274 <QF_gc>
    #endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 800354e:	f7ff fa39 	bl	80029c4 <QF_int_disable_>
        QF_MEM_SYS();

        // internal integrity check (duplicate inverse storage)
        Q_ASSERT_INCRIT(532, QPSet_verify_(&QK_priv_.readySet,
 8003552:	4933      	ldr	r1, [pc, #204]	; (8003620 <QK_activate_+0x1ec>)
 8003554:	482f      	ldr	r0, [pc, #188]	; (8003614 <QK_activate_+0x1e0>)
 8003556:	f7ff ff58 	bl	800340a <QPSet_verify_>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <QK_activate_+0x136>
 8003560:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003564:	482c      	ldr	r0, [pc, #176]	; (8003618 <QK_activate_+0x1e4>)
 8003566:	f7fd fa1d 	bl	80009a4 <Q_onError>
                                           &QK_priv_.readySet_dis));

        if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <QK_activate_+0x14e>
            QPSet_remove(&QK_priv_.readySet, p);
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	4827      	ldr	r0, [pc, #156]	; (8003614 <QK_activate_+0x1e0>)
 8003576:	f7ff ff12 	bl	800339e <QPSet_remove>
    #ifndef Q_UNSAFE
            QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 800357a:	4929      	ldr	r1, [pc, #164]	; (8003620 <QK_activate_+0x1ec>)
 800357c:	4825      	ldr	r0, [pc, #148]	; (8003614 <QK_activate_+0x1e0>)
 800357e:	f7ff ff34 	bl	80033ea <QPSet_update_>
    #endif
        }

        if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8003582:	4824      	ldr	r0, [pc, #144]	; (8003614 <QK_activate_+0x1e0>)
 8003584:	f7ff fefa 	bl	800337c <QPSet_isEmpty>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <QK_activate_+0x160>
            p = 0U; // no activation needed
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e026      	b.n	80035e2 <QK_activate_+0x1ae>
        }
        else {
            // find new highest-prio AO ready to run...
            p = QPSet_findMax(&QK_priv_.readySet);
 8003594:	481f      	ldr	r0, [pc, #124]	; (8003614 <QK_activate_+0x1e0>)
 8003596:	f7ff ff18 	bl	80033ca <QPSet_findMax>
 800359a:	6178      	str	r0, [r7, #20]

            // is the new prio. below the initial preemption-threshold?
            if (p <= pthre_in) {
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d802      	bhi.n	80035aa <QK_activate_+0x176>
                p = 0U; // no activation needed
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e01b      	b.n	80035e2 <QK_activate_+0x1ae>
            }
            else {
                Q_ASSERT_INCRIT(542, QK_priv_.lockCeil
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <QK_activate_+0x1e0>)
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <QK_activate_+0x1e0>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	43db      	mvns	r3, r3
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d004      	beq.n	80035c2 <QK_activate_+0x18e>
 80035b8:	f240 211e 	movw	r1, #542	; 0x21e
 80035bc:	4816      	ldr	r0, [pc, #88]	; (8003618 <QK_activate_+0x1e4>)
 80035be:	f7fd f9f1 	bl	80009a4 <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

                // is the AO's prio. below the lock preemption-threshold?
                if (p <= QK_priv_.lockCeil) {
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <QK_activate_+0x1e0>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d802      	bhi.n	80035d2 <QK_activate_+0x19e>
                    p = 0U; // no activation needed
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e007      	b.n	80035e2 <QK_activate_+0x1ae>
                }
                else {
                    Q_ASSERT_INCRIT(550, p <= QF_MAX_ACTIVE);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d904      	bls.n	80035e2 <QK_activate_+0x1ae>
 80035d8:	f240 2126 	movw	r1, #550	; 0x226
 80035dc:	480e      	ldr	r0, [pc, #56]	; (8003618 <QK_activate_+0x1e4>)
 80035de:	f7fd f9e1 	bl	80009a4 <Q_onError>
                }
            }
        }
    } while (p != 0U);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f af77 	bne.w	80034d8 <QK_activate_+0xa4>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <QK_activate_+0x1e0>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6053      	str	r3, [r2, #4]
    QK_priv_.actThre = pthre_in;
 80035f0:	4a08      	ldr	r2, [pc, #32]	; (8003614 <QK_activate_+0x1e0>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
    QK_priv_.actPrio_dis = (uint_fast8_t)(~QK_priv_.actPrio);
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <QK_activate_+0x1e0>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <QK_activate_+0x1e0>)
 80035fe:	61d3      	str	r3, [r2, #28]
    QK_priv_.actThre_dis = (uint_fast8_t)(~QK_priv_.actThre);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <QK_activate_+0x1e0>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <QK_activate_+0x1e0>)
 8003608:	6253      	str	r3, [r2, #36]	; 0x24
    #ifdef QF_ON_CONTEXT_SW
    QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

    #endif // QF_ON_CONTEXT_SW || Q_SPY
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000190 	.word	0x20000190
 8003618:	080036f0 	.word	0x080036f0
 800361c:	200000cc 	.word	0x200000cc
 8003620:	200001a8 	.word	0x200001a8

08003624 <memset>:
 8003624:	4402      	add	r2, r0
 8003626:	4603      	mov	r3, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	f803 1b01 	strb.w	r1, [r3], #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <__libc_init_array>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	4d0d      	ldr	r5, [pc, #52]	; (800366c <__libc_init_array+0x38>)
 8003638:	4c0d      	ldr	r4, [pc, #52]	; (8003670 <__libc_init_array+0x3c>)
 800363a:	1b64      	subs	r4, r4, r5
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	2600      	movs	r6, #0
 8003640:	42a6      	cmp	r6, r4
 8003642:	d109      	bne.n	8003658 <__libc_init_array+0x24>
 8003644:	4d0b      	ldr	r5, [pc, #44]	; (8003674 <__libc_init_array+0x40>)
 8003646:	4c0c      	ldr	r4, [pc, #48]	; (8003678 <__libc_init_array+0x44>)
 8003648:	f000 f818 	bl	800367c <_init>
 800364c:	1b64      	subs	r4, r4, r5
 800364e:	10a4      	asrs	r4, r4, #2
 8003650:	2600      	movs	r6, #0
 8003652:	42a6      	cmp	r6, r4
 8003654:	d105      	bne.n	8003662 <__libc_init_array+0x2e>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	f855 3b04 	ldr.w	r3, [r5], #4
 800365c:	4798      	blx	r3
 800365e:	3601      	adds	r6, #1
 8003660:	e7ee      	b.n	8003640 <__libc_init_array+0xc>
 8003662:	f855 3b04 	ldr.w	r3, [r5], #4
 8003666:	4798      	blx	r3
 8003668:	3601      	adds	r6, #1
 800366a:	e7f2      	b.n	8003652 <__libc_init_array+0x1e>
 800366c:	080036fc 	.word	0x080036fc
 8003670:	080036fc 	.word	0x080036fc
 8003674:	080036fc 	.word	0x080036fc
 8003678:	08003700 	.word	0x08003700

0800367c <_init>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr

08003688 <_fini>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr
