
LED_Intensity_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f54  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004184  08004184  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800418c  0800418c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000014  080041a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080041a8  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011457  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326e  00000000  00000000  000314de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbe  00000000  00000000  00035670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ed1  00000000  00000000  0003622e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013393  00000000  00000000  000580ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d05b0  00000000  00000000  0006b492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d70  00000000  00000000  0013ba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004100 	.word	0x08004100

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004100 	.word	0x08004100

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Led_Control_initial>:

//${HSM::Led_Control} ........................................................
Led_Control Led_Control_obj;

//${HSM::Led_Control::SM} ....................................................
QState Led_Control_initial(Led_Control * const me, void const * const par) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
    //${HSM::Led_Control::SM::initial}
    LED_Intencity_Control(LED_OFF);
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <Led_Control_initial+0x2c>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f90a 	bl	8000728 <LED_Intencity_Control>
     HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 fc7a 	bl	8000e10 <HAL_Delay>
    return Q_TRAN(&Led_Control_LED_OFF);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a04      	ldr	r2, [pc, #16]	; (8000530 <Led_Control_initial+0x30>)
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	2308      	movs	r3, #8
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000030 	.word	0x20000030
 8000530:	0800055d 	.word	0x0800055d

08000534 <Led_Control_LED_CONTROL>:

//${HSM::Led_Control::SM::LED_CONTROL} .......................................
QState Led_Control_LED_CONTROL(Led_Control * const me, QEvt const * const e) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <Led_Control_LED_CONTROL+0x24>)
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
            break;
 8000548:	bf00      	nop
        }
    }
    return status_;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	08003a91 	.word	0x08003a91

0800055c <Led_Control_LED_OFF>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_OFF} ..............................
QState Led_Control_LED_OFF(Led_Control * const me, QEvt const * const e) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d10e      	bne.n	800058c <Led_Control_LED_OFF+0x30>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_OFF::LED_ON}
        case LED_ON_SIG: {
            LED_Intencity_Control(LED_DIM);
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <Led_Control_LED_OFF+0x48>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f8d8 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fc48 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_DIM);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <Led_Control_LED_OFF+0x4c>)
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	2308      	movs	r3, #8
 8000588:	73fb      	strb	r3, [r7, #15]
            break;
 800058a:	e005      	b.n	8000598 <Led_Control_LED_OFF+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <Led_Control_LED_OFF+0x50>)
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
            break;
 8000596:	bf00      	nop
        }
    }
    return status_;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	080005b1 	.word	0x080005b1
 80005ac:	08000535 	.word	0x08000535

080005b0 <Led_Control_LED_DIM>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_DIM} ..............................
QState Led_Control_LED_DIM(Led_Control * const me, QEvt const * const e) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	2b04      	cmp	r3, #4
 80005c0:	d010      	beq.n	80005e4 <Led_Control_LED_DIM+0x34>
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d11d      	bne.n	8000602 <Led_Control_LED_DIM+0x52>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_DIM::LED_ON}
        case LED_ON_SIG: {
            LED_Intencity_Control(LED_MEDIUM);
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <Led_Control_LED_DIM+0x68>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8ac 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fc1c 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_MEDIUM);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <Led_Control_LED_DIM+0x6c>)
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	2308      	movs	r3, #8
 80005e0:	73fb      	strb	r3, [r7, #15]
            break;
 80005e2:	e014      	b.n	800060e <Led_Control_LED_DIM+0x5e>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_DIM::LED_OFF}
        case LED_OFF_SIG: {
            LED_Intencity_Control(LED_OFF);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <Led_Control_LED_DIM+0x70>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f89d 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 fc0d 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <Led_Control_LED_DIM+0x74>)
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	2308      	movs	r3, #8
 80005fe:	73fb      	strb	r3, [r7, #15]
            break;
 8000600:	e005      	b.n	800060e <Led_Control_LED_DIM+0x5e>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <Led_Control_LED_DIM+0x78>)
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
            break;
 800060c:	bf00      	nop
        }
    }
    return status_;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000002 	.word	0x20000002
 800061c:	0800062d 	.word	0x0800062d
 8000620:	20000030 	.word	0x20000030
 8000624:	0800055d 	.word	0x0800055d
 8000628:	08000535 	.word	0x08000535

0800062c <Led_Control_LED_MEDIUM>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM} ...........................
QState Led_Control_LED_MEDIUM(Led_Control * const me, QEvt const * const e) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2b04      	cmp	r3, #4
 800063c:	d010      	beq.n	8000660 <Led_Control_LED_MEDIUM+0x34>
 800063e:	2b05      	cmp	r3, #5
 8000640:	d11d      	bne.n	800067e <Led_Control_LED_MEDIUM+0x52>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM::LED_ON}
        case LED_ON_SIG: {
            LED_Intencity_Control(LED_FULL);
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <Led_Control_LED_MEDIUM+0x68>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f86e 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f000 fbde 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_FULL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <Led_Control_LED_MEDIUM+0x6c>)
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	2308      	movs	r3, #8
 800065c:	73fb      	strb	r3, [r7, #15]
            break;
 800065e:	e014      	b.n	800068a <Led_Control_LED_MEDIUM+0x5e>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_MEDIUM::LED_OFF}
        case LED_OFF_SIG: {
            LED_Intencity_Control(LED_OFF);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <Led_Control_LED_MEDIUM+0x70>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f85f 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fbcf 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <Led_Control_LED_MEDIUM+0x74>)
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	2308      	movs	r3, #8
 800067a:	73fb      	strb	r3, [r7, #15]
            break;
 800067c:	e005      	b.n	800068a <Led_Control_LED_MEDIUM+0x5e>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <Led_Control_LED_MEDIUM+0x78>)
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
            break;
 8000688:	bf00      	nop
        }
    }
    return status_;
 800068a:	7bfb      	ldrb	r3, [r7, #15]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	080006a9 	.word	0x080006a9
 800069c:	20000030 	.word	0x20000030
 80006a0:	0800055d 	.word	0x0800055d
 80006a4:	08000535 	.word	0x08000535

080006a8 <Led_Control_LED_FULL>:

//${HSM::Led_Control::SM::LED_CONTROL::LED_FULL} .............................
QState Led_Control_LED_FULL(Led_Control * const me, QEvt const * const e) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d002      	beq.n	80006c0 <Led_Control_LED_FULL+0x18>
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d00f      	beq.n	80006de <Led_Control_LED_FULL+0x36>
 80006be:	e01d      	b.n	80006fc <Led_Control_LED_FULL+0x54>
        //${HSM::Led_Control::SM::LED_CONTROL::LED_FULL::LED_OFF}
        case LED_OFF_SIG: {
            LED_Intencity_Control(LED_OFF);
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <Led_Control_LED_FULL+0x6c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f82f 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ce:	f000 fb9f 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_OFF);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <Led_Control_LED_FULL+0x70>)
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	2308      	movs	r3, #8
 80006da:	73fb      	strb	r3, [r7, #15]
            break;
 80006dc:	e014      	b.n	8000708 <Led_Control_LED_FULL+0x60>
        }
        //${HSM::Led_Control::SM::LED_CONTROL::LED_FULL::LED_ON}
        case LED_ON_SIG: {
            LED_Intencity_Control(LED_DIM);
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <Led_Control_LED_FULL+0x74>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f820 	bl	8000728 <LED_Intencity_Control>
            HAL_Delay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fb90 	bl	8000e10 <HAL_Delay>
            status_ = Q_TRAN(&Led_Control_LED_DIM);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <Led_Control_LED_FULL+0x78>)
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	2308      	movs	r3, #8
 80006f8:	73fb      	strb	r3, [r7, #15]
            break;
 80006fa:	e005      	b.n	8000708 <Led_Control_LED_FULL+0x60>
        }
        default: {
            status_ = Q_SUPER(&Led_Control_LED_CONTROL);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <Led_Control_LED_FULL+0x7c>)
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
            break;
 8000706:	bf00      	nop
        }
    }
    return status_;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000030 	.word	0x20000030
 8000718:	0800055d 	.word	0x0800055d
 800071c:	20000004 	.word	0x20000004
 8000720:	080005b1 	.word	0x080005b1
 8000724:	08000535 	.word	0x08000535

08000728 <LED_Intencity_Control>:
//$enddef${HSM::Led_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${HSM::LED_Intencity_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_Intencity_Control} ..............................................
void LED_Intencity_Control(uint16_t duty_uint16_t) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,duty_uint16_t);
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LED_Intencity_Control+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	88fa      	ldrh	r2, [r7, #6]
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000044 	.word	0x20000044

0800074c <Led_Control_Ctor>:
//$enddef${HSM::LED_Intencity_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${HSM::Led_Control_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::Led_Control_Ctor} ...................................................
void Led_Control_Ctor(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    QHsm_ctor(super_Led_Control,Q_STATE_CAST(&Led_Control_initial));
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <Led_Control_Ctor+0x14>)
 8000752:	4904      	ldr	r1, [pc, #16]	; (8000764 <Led_Control_Ctor+0x18>)
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fe77 	bl	8003448 <QHsm_ctor>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000034 	.word	0x20000034
 8000764:	08000501 	.word	0x08000501

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	   QF_init();
 800076e:	f003 fc4f 	bl	8004010 <QF_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fadb 	bl	8000d2c <HAL_Init>

  /* USER CODE BEGIN Init */
  Led_Control_Ctor();
 8000776:	f7ff ffe9 	bl	800074c <Led_Control_Ctor>
  QHsm_init_(super_Led_Control, (void *)0, 0U);
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <main+0x64>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fe78 	bl	8003478 <QHsm_init_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f826 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f930 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000790:	f000 f904 	bl	800099c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000794:	f000 f88e 	bl	80008b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <main+0x68>)
 800079c:	f001 fcce 	bl	800213c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEvt e;
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET)
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <main+0x6c>)
 80007a6:	f000 fdfd 	bl	80013a4 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d102      	bne.n	80007b6 <main+0x4e>
	  {
//		//  e.sig = LED_ON_SIG;
		  e.sig = LED_OFF_SIG;
 80007b0:	2304      	movs	r3, #4
 80007b2:	80bb      	strh	r3, [r7, #4]
 80007b4:	e001      	b.n	80007ba <main+0x52>
	  }else
	  {
		 // e.sig = LED_OFF_SIG;
		  e.sig = LED_ON_SIG;
 80007b6:	2305      	movs	r3, #5
 80007b8:	80bb      	strh	r3, [r7, #4]
	  }
	  QHsm_dispatch_(super_Led_Control, &e, 0U);
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <main+0x64>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 ff02 	bl	80035cc <QHsm_dispatch_>
  {
 80007c8:	e7ea      	b.n	80007a0 <main+0x38>
 80007ca:	bf00      	nop
 80007cc:	08004118 	.word	0x08004118
 80007d0:	20000044 	.word	0x20000044
 80007d4:	40020800 	.word	0x40020800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fc5e 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SystemClock_Config+0xd4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <SystemClock_Config+0xd4>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <SystemClock_Config+0xd4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <SystemClock_Config+0xd8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <SystemClock_Config+0xd8>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <SystemClock_Config+0xd8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800084c:	2310      	movs	r3, #16
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000850:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000854:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000856:	2304      	movs	r3, #4
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f922 	bl	8001ab0 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000872:	f000 f92a 	bl	8000aca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2102      	movs	r1, #2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fdc2 	bl	800141c <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800089e:	f000 f914 	bl	8000aca <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	; 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_TIM2_Init+0xe4>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_TIM2_Init+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_TIM2_Init+0xe4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_TIM2_Init+0xe4>)
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_TIM2_Init+0xe4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_TIM2_Init+0xe4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090a:	4823      	ldr	r0, [pc, #140]	; (8000998 <MX_TIM2_Init+0xe4>)
 800090c:	f001 fb6e 	bl	8001fec <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000916:	f000 f8d8 	bl	8000aca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000924:	4619      	mov	r1, r3
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_TIM2_Init+0xe4>)
 8000928:	f001 fd92 	bl	8002450 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000932:	f000 f8ca 	bl	8000aca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_TIM2_Init+0xe4>)
 8000938:	f001 fba7 	bl	800208a <HAL_TIM_PWM_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000942:	f000 f8c2 	bl	8000aca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4619      	mov	r1, r3
 8000954:	4810      	ldr	r0, [pc, #64]	; (8000998 <MX_TIM2_Init+0xe4>)
 8000956:	f002 f95f 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000960:	f000 f8b3 	bl	8000aca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	; 0x60
 8000966:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM2_Init+0xe4>)
 800097c:	f001 fca6 	bl	80022cc <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000986:	f000 f8a0 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM2_Init+0xe4>)
 800098c:	f000 f8ea 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3738      	adds	r7, #56	; 0x38
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000044 	.word	0x20000044

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f002 f99c 	bl	8002d10 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f874 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_GPIO_Init+0xbc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a8e:	f000 faf5 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2028      	movs	r0, #40	; 0x28
 8000a98:	f000 fab9 	bl	800100e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a9c:	2028      	movs	r0, #40	; 0x28
 8000a9e:	f000 fad2 	bl	8001046 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <Q_onError>:

/* USER CODE BEGIN 4 */

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
//    for (;;) {
//    }
#endif

  //  NVIC_SystemReset();
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ace:	b672      	cpsid	i
}
 8000ad0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fa70 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d10d      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d11d      	bne.n	8000bc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <HAL_TIM_MspPostInit+0x6c>)
 8000bbe:	f000 fa5d 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4a:	f000 fa17 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <BusFault_Handler+0x4>

08000c76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f898 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f000 fb92 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 f9d7 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fd2d 	bl	8000768 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d1c:	08004194 	.word	0x08004194
  ldr r2, =_sbss
 8000d20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d24:	200001dc 	.word	0x200001dc

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f94f 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff feb8 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f967 	bl	8001062 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f92f 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000010 	.word	0x20000010
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000d4 	.word	0x200000d4

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000010 	.word	0x20000010

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff3e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e165      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8154 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ae 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_GPIO_Init+0x300>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_GPIO_Init+0x300>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_GPIO_Init+0x300>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x310>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x202>
 800127a:	2306      	movs	r3, #6
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800127e:	2307      	movs	r3, #7
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae96 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f806 	bl	8001404 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0cc      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d90c      	bls.n	8001458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800147a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d044      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e067      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fc74 	bl	8000df8 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fc70 	bl	8000df8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e04f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d20c      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f855 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fbd4 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	0800411c 	.word	0x0800411c
 80015e0:	20000008 	.word	0x20000008
 80015e4:	2000000c 	.word	0x2000000c

080015e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_RCC_GetHCLKFreq+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001604:	f7ff fff0 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0a9b      	lsrs	r3, r3, #10
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4903      	ldr	r1, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	0800412c 	.word	0x0800412c

08001628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800162c:	f7ff ffdc 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001630:	4602      	mov	r2, r0
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	0b5b      	lsrs	r3, r3, #13
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	4903      	ldr	r1, [pc, #12]	; (800164c <HAL_RCC_GetPCLK2Freq+0x24>)
 800163e:	5ccb      	ldrb	r3, [r1, r3]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	0800412c 	.word	0x0800412c

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b0ae      	sub	sp, #184	; 0xb8
 8001656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001676:	4bcb      	ldr	r3, [pc, #812]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b0c      	cmp	r3, #12
 8001680:	f200 8206 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x440>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016c1 	.word	0x080016c1
 8001690:	08001a91 	.word	0x08001a91
 8001694:	08001a91 	.word	0x08001a91
 8001698:	08001a91 	.word	0x08001a91
 800169c:	080016c9 	.word	0x080016c9
 80016a0:	08001a91 	.word	0x08001a91
 80016a4:	08001a91 	.word	0x08001a91
 80016a8:	08001a91 	.word	0x08001a91
 80016ac:	080016d1 	.word	0x080016d1
 80016b0:	08001a91 	.word	0x08001a91
 80016b4:	08001a91 	.word	0x08001a91
 80016b8:	08001a91 	.word	0x08001a91
 80016bc:	080018c1 	.word	0x080018c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c0:	4bb9      	ldr	r3, [pc, #740]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80016c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016c6:	e1e7      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016c8:	4bb8      	ldr	r3, [pc, #736]	; (80019ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ce:	e1e3      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d0:	4bb4      	ldr	r3, [pc, #720]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016dc:	4bb1      	ldr	r3, [pc, #708]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d071      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e8:	4bae      	ldr	r3, [pc, #696]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800170a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4621      	mov	r1, r4
 8001728:	1a51      	subs	r1, r2, r1
 800172a:	6439      	str	r1, [r7, #64]	; 0x40
 800172c:	4629      	mov	r1, r5
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001740:	4649      	mov	r1, r9
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4641      	mov	r1, r8
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4641      	mov	r1, r8
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4641      	mov	r1, r8
 8001750:	1a51      	subs	r1, r2, r1
 8001752:	63b9      	str	r1, [r7, #56]	; 0x38
 8001754:	4649      	mov	r1, r9
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001768:	4649      	mov	r1, r9
 800176a:	00cb      	lsls	r3, r1, #3
 800176c:	4641      	mov	r1, r8
 800176e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001772:	4641      	mov	r1, r8
 8001774:	00ca      	lsls	r2, r1, #3
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	4603      	mov	r3, r0
 800177c:	4622      	mov	r2, r4
 800177e:	189b      	adds	r3, r3, r2
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
 8001782:	462b      	mov	r3, r5
 8001784:	460a      	mov	r2, r1
 8001786:	eb42 0303 	adc.w	r3, r2, r3
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001798:	4629      	mov	r1, r5
 800179a:	024b      	lsls	r3, r1, #9
 800179c:	4621      	mov	r1, r4
 800179e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017a2:	4621      	mov	r1, r4
 80017a4:	024a      	lsls	r2, r1, #9
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017bc:	f7fe fd22 	bl	8000204 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ca:	e067      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80017e6:	2300      	movs	r3, #0
 80017e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	62b9      	str	r1, [r7, #40]	; 0x28
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001820:	4649      	mov	r1, r9
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4641      	mov	r1, r8
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4641      	mov	r1, r8
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4641      	mov	r1, r8
 8001830:	ebb2 0a01 	subs.w	sl, r2, r1
 8001834:	4649      	mov	r1, r9
 8001836:	eb63 0b01 	sbc.w	fp, r3, r1
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001846:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800184a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800184e:	4692      	mov	sl, r2
 8001850:	469b      	mov	fp, r3
 8001852:	4623      	mov	r3, r4
 8001854:	eb1a 0303 	adds.w	r3, sl, r3
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	462b      	mov	r3, r5
 800185c:	eb4b 0303 	adc.w	r3, fp, r3
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800186e:	4629      	mov	r1, r5
 8001870:	028b      	lsls	r3, r1, #10
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001878:	4621      	mov	r1, r4
 800187a:	028a      	lsls	r2, r1, #10
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001884:	2200      	movs	r2, #0
 8001886:	673b      	str	r3, [r7, #112]	; 0x70
 8001888:	677a      	str	r2, [r7, #116]	; 0x74
 800188a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800188e:	f7fe fcb9 	bl	8000204 <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4613      	mov	r3, r2
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	3301      	adds	r3, #1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 80018ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018be:	e0eb      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d06b      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80018e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ea:	663b      	str	r3, [r7, #96]	; 0x60
 80018ec:	2300      	movs	r3, #0
 80018ee:	667b      	str	r3, [r7, #100]	; 0x64
 80018f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018f4:	4622      	mov	r2, r4
 80018f6:	462b      	mov	r3, r5
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0159      	lsls	r1, r3, #5
 8001902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001906:	0150      	lsls	r0, r2, #5
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4621      	mov	r1, r4
 800190e:	1a51      	subs	r1, r2, r1
 8001910:	61b9      	str	r1, [r7, #24]
 8001912:	4629      	mov	r1, r5
 8001914:	eb63 0301 	sbc.w	r3, r3, r1
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001926:	4659      	mov	r1, fp
 8001928:	018b      	lsls	r3, r1, #6
 800192a:	4651      	mov	r1, sl
 800192c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001930:	4651      	mov	r1, sl
 8001932:	018a      	lsls	r2, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ebb2 0801 	subs.w	r8, r2, r1
 800193a:	4659      	mov	r1, fp
 800193c:	eb63 0901 	sbc.w	r9, r3, r1
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800194c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001950:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001954:	4690      	mov	r8, r2
 8001956:	4699      	mov	r9, r3
 8001958:	4623      	mov	r3, r4
 800195a:	eb18 0303 	adds.w	r3, r8, r3
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	462b      	mov	r3, r5
 8001962:	eb49 0303 	adc.w	r3, r9, r3
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001974:	4629      	mov	r1, r5
 8001976:	024b      	lsls	r3, r1, #9
 8001978:	4621      	mov	r1, r4
 800197a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800197e:	4621      	mov	r1, r4
 8001980:	024a      	lsls	r2, r1, #9
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800198a:	2200      	movs	r2, #0
 800198c:	65bb      	str	r3, [r7, #88]	; 0x58
 800198e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001990:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001994:	f7fe fc36 	bl	8000204 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019a2:	e065      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x420>
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	4611      	mov	r1, r2
 80019bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c0:	653b      	str	r3, [r7, #80]	; 0x50
 80019c2:	2300      	movs	r3, #0
 80019c4:	657b      	str	r3, [r7, #84]	; 0x54
 80019c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019ca:	4642      	mov	r2, r8
 80019cc:	464b      	mov	r3, r9
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	0159      	lsls	r1, r3, #5
 80019d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019dc:	0150      	lsls	r0, r2, #5
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4641      	mov	r1, r8
 80019e4:	1a51      	subs	r1, r2, r1
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	4649      	mov	r1, r9
 80019ea:	eb63 0301 	sbc.w	r3, r3, r1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019fc:	4659      	mov	r1, fp
 80019fe:	018b      	lsls	r3, r1, #6
 8001a00:	4651      	mov	r1, sl
 8001a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a06:	4651      	mov	r1, sl
 8001a08:	018a      	lsls	r2, r1, #6
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	1a54      	subs	r4, r2, r1
 8001a0e:	4659      	mov	r1, fp
 8001a10:	eb63 0501 	sbc.w	r5, r3, r1
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	00eb      	lsls	r3, r5, #3
 8001a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a22:	00e2      	lsls	r2, r4, #3
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4643      	mov	r3, r8
 8001a2a:	18e3      	adds	r3, r4, r3
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	464b      	mov	r3, r9
 8001a30:	eb45 0303 	adc.w	r3, r5, r3
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a58:	2200      	movs	r2, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a62:	f7fe fbcf 	bl	8000204 <__aeabi_uldivmod>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0f1b      	lsrs	r3, r3, #28
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8001a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a8e:	e003      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	37b8      	adds	r7, #184	; 0xb8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400

08001ab0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e28d      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8083 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d019      	beq.n	8001b10 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001adc:	4b91      	ldr	r3, [pc, #580]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ae8:	4b8e      	ldr	r3, [pc, #568]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af4:	d00c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d112      	bne.n	8001b28 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05b      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x124>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d157      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e25a      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x90>
 8001b32:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7b      	ldr	r2, [pc, #492]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xcc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0xb4>
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a75      	ldr	r2, [pc, #468]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xcc>
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6b      	ldr	r2, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f938 	bl	8000df8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f934 	bl	8000df8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e21f      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xdc>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f924 	bl	8000df8 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff f920 	bl	8000df8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e20b      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x104>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06f      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001be2:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d017      	beq.n	8001c1e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x186>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1d3      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4937      	ldr	r1, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x278>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f8cd 	bl	8000df8 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f8c9 	bl	8000df8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1b4      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4925      	ldr	r1, [pc, #148]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x278>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f8ac 	bl	8000df8 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f8a8 	bl	8000df8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e193      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d036      	beq.n	8001d3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f88c 	bl	8000df8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f888 	bl	8000df8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e173      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x234>
 8001d02:	e01b      	b.n	8001d3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_OscConfig+0x27c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f875 	bl	8000df8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff f871 	bl	8000df8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d907      	bls.n	8001d30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e15c      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470000 	.word	0x42470000
 8001d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b8a      	ldr	r3, [pc, #552]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ea      	bne.n	8001d12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8097 	beq.w	8001e78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x4b0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x4b0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4b0>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f831 	bl	8000df8 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff f82d 	bl	8000df8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e118      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <HAL_RCC_OscConfig+0x4b0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x31e>
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x358>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x340>
 8001dd6:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
 8001de2:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0x358>
 8001df0:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a59      	ldr	r2, [pc, #356]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d015      	beq.n	8001e3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7fe fff2 	bl	8000df8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe ffee 	bl	8000df8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0d7      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ee      	beq.n	8001e18 <HAL_RCC_OscConfig+0x368>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7fe ffdc 	bl	8000df8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe ffd8 	bl	8000df8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0c1      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ee      	bne.n	8001e44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80ad 	beq.w	8001fdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d060      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d145      	bne.n	8001f22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_OscConfig+0x4b4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ffac 	bl	8000df8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ffa8 	bl	8000df8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e093      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	071b      	lsls	r3, r3, #28
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4b4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe ff7d 	bl	8000df8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe ff79 	bl	8000df8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e064      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x452>
 8001f20:	e05c      	b.n	8001fdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4b4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff66 	bl	8000df8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff62 	bl	8000df8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04d      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x480>
 8001f4e:	e045      	b.n	8001fdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e040      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_RCC_OscConfig+0x538>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d030      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d129      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d122      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d119      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e041      	b.n	8002082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fd86 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 fad8 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e041      	b.n	8002120 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f839 	bl	8002128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f000 fa89 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_TIM_PWM_Start+0x24>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e022      	b.n	80021a6 <HAL_TIM_PWM_Start+0x6a>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d109      	bne.n	800217a <HAL_TIM_PWM_Start+0x3e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e015      	b.n	80021a6 <HAL_TIM_PWM_Start+0x6a>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d109      	bne.n	8002194 <HAL_TIM_PWM_Start+0x58>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e008      	b.n	80021a6 <HAL_TIM_PWM_Start+0x6a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07c      	b.n	80022a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <HAL_TIM_PWM_Start+0x82>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021bc:	e013      	b.n	80021e6 <HAL_TIM_PWM_Start+0xaa>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_PWM_Start+0x92>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021cc:	e00b      	b.n	80021e6 <HAL_TIM_PWM_Start+0xaa>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d104      	bne.n	80021de <HAL_TIM_PWM_Start+0xa2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	e003      	b.n	80021e6 <HAL_TIM_PWM_Start+0xaa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fcec 	bl	8002bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_TIM_PWM_Start+0x174>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_PWM_Start+0xcc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <HAL_TIM_PWM_Start+0x178>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_TIM_PWM_Start+0xd0>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_TIM_PWM_Start+0xd2>
 800220c:	2300      	movs	r3, #0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_TIM_PWM_Start+0x174>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d01d      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_TIM_PWM_Start+0x17c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_TIM_PWM_Start+0x180>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_TIM_PWM_Start+0x184>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_TIM_PWM_Start+0x178>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_TIM_PWM_Start+0x188>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIM_PWM_Start+0x136>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_PWM_Start+0x18c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d010      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002294:	e007      	b.n	80022a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40010400 	.word	0x40010400
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40001800 	.word	0x40001800

080022cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e0ae      	b.n	8002448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	f200 809f 	bhi.w	8002438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002335 	.word	0x08002335
 8002304:	08002439 	.word	0x08002439
 8002308:	08002439 	.word	0x08002439
 800230c:	08002439 	.word	0x08002439
 8002310:	08002375 	.word	0x08002375
 8002314:	08002439 	.word	0x08002439
 8002318:	08002439 	.word	0x08002439
 800231c:	08002439 	.word	0x08002439
 8002320:	080023b7 	.word	0x080023b7
 8002324:	08002439 	.word	0x08002439
 8002328:	08002439 	.word	0x08002439
 800232c:	08002439 	.word	0x08002439
 8002330:	080023f7 	.word	0x080023f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f9fc 	bl	8002738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0208 	orr.w	r2, r2, #8
 800234e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0204 	bic.w	r2, r2, #4
 800235e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6999      	ldr	r1, [r3, #24]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	619a      	str	r2, [r3, #24]
      break;
 8002372:	e064      	b.n	800243e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fa4c 	bl	8002818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6999      	ldr	r1, [r3, #24]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	021a      	lsls	r2, r3, #8
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	619a      	str	r2, [r3, #24]
      break;
 80023b4:	e043      	b.n	800243e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 faa1 	bl	8002904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0208 	orr.w	r2, r2, #8
 80023d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0204 	bic.w	r2, r2, #4
 80023e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	61da      	str	r2, [r3, #28]
      break;
 80023f4:	e023      	b.n	800243e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 faf5 	bl	80029ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69d9      	ldr	r1, [r3, #28]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	61da      	str	r2, [r3, #28]
      break;
 8002436:	e002      	b.n	800243e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
      break;
 800243c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIM_ConfigClockSource+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e0b4      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0x186>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d03e      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xd4>
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	f200 8087 	bhi.w	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	f000 8086 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x172>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d87f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d01a      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xa6>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d87b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d050      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x11a>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d877      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d03c      	beq.n	800254a <HAL_TIM_ConfigClockSource+0xfa>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d873      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d058      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x13a>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d86f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d064      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d86b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d060      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d867      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d05a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	e062      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002506:	f000 fb41 	bl	8002b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
      break;
 8002522:	e04f      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002534:	f000 fb2a 	bl	8002b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	609a      	str	r2, [r3, #8]
      break;
 8002548:	e03c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002556:	461a      	mov	r2, r3
 8002558:	f000 fa9e 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2150      	movs	r1, #80	; 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f000 faf7 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002568:	e02c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002576:	461a      	mov	r2, r3
 8002578:	f000 fabd 	bl	8002af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fae7 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002588:	e01c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	461a      	mov	r2, r3
 8002598:	f000 fa7e 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fad7 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e00c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 face 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      break;
 80025c0:	e000      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a46      	ldr	r2, [pc, #280]	; (800270c <TIM_Base_SetConfig+0x12c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d00f      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a43      	ldr	r2, [pc, #268]	; (8002710 <TIM_Base_SetConfig+0x130>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a42      	ldr	r2, [pc, #264]	; (8002714 <TIM_Base_SetConfig+0x134>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a41      	ldr	r2, [pc, #260]	; (8002718 <TIM_Base_SetConfig+0x138>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a40      	ldr	r2, [pc, #256]	; (800271c <TIM_Base_SetConfig+0x13c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <TIM_Base_SetConfig+0x12c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d02b      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d027      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a32      	ldr	r2, [pc, #200]	; (8002710 <TIM_Base_SetConfig+0x130>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d023      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a31      	ldr	r2, [pc, #196]	; (8002714 <TIM_Base_SetConfig+0x134>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01f      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a30      	ldr	r2, [pc, #192]	; (8002718 <TIM_Base_SetConfig+0x138>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01b      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2f      	ldr	r2, [pc, #188]	; (800271c <TIM_Base_SetConfig+0x13c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d017      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <TIM_Base_SetConfig+0x140>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <TIM_Base_SetConfig+0x144>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00f      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <TIM_Base_SetConfig+0x148>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00b      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <TIM_Base_SetConfig+0x14c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <TIM_Base_SetConfig+0x150>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <TIM_Base_SetConfig+0x154>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <TIM_Base_SetConfig+0x12c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0xf8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <TIM_Base_SetConfig+0x13c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d103      	bne.n	80026e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	611a      	str	r2, [r3, #16]
  }
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800
 8002718:	40000c00 	.word	0x40000c00
 800271c:	40010400 	.word	0x40010400
 8002720:	40014000 	.word	0x40014000
 8002724:	40014400 	.word	0x40014400
 8002728:	40014800 	.word	0x40014800
 800272c:	40001800 	.word	0x40001800
 8002730:	40001c00 	.word	0x40001c00
 8002734:	40002000 	.word	0x40002000

08002738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f023 0201 	bic.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <TIM_OC1_SetConfig+0xd8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_OC1_SetConfig+0x64>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <TIM_OC1_SetConfig+0xdc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0308 	bic.w	r3, r3, #8
 80027a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <TIM_OC1_SetConfig+0xd8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC1_SetConfig+0x8e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <TIM_OC1_SetConfig+0xdc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40010000 	.word	0x40010000
 8002814:	40010400 	.word	0x40010400

08002818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f023 0210 	bic.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0320 	bic.w	r3, r3, #32
 8002862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <TIM_OC2_SetConfig+0xe4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_OC2_SetConfig+0x68>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a21      	ldr	r2, [pc, #132]	; (8002900 <TIM_OC2_SetConfig+0xe8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10d      	bne.n	800289c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800289a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <TIM_OC2_SetConfig+0xe4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_OC2_SetConfig+0x94>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <TIM_OC2_SetConfig+0xe8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d113      	bne.n	80028d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800294c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <TIM_OC3_SetConfig+0xe0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_OC3_SetConfig+0x66>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <TIM_OC3_SetConfig+0xe4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10d      	bne.n	8002986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC3_SetConfig+0xe0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_OC3_SetConfig+0x92>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC3_SetConfig+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800299c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010400 	.word	0x40010400

080029ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	031b      	lsls	r3, r3, #12
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <TIM_OC4_SetConfig+0xa4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC4_SetConfig+0x68>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <TIM_OC4_SetConfig+0xa8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d109      	bne.n	8002a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010400 	.word	0x40010400

08002a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0201 	bic.w	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 030a 	bic.w	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 0210 	bic.w	r2, r3, #16
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0307 	orr.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	021a      	lsls	r2, r3, #8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2201      	movs	r2, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e05a      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d01d      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40001800 	.word	0x40001800

08002d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e042      	b.n	8002da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd ff4c 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f82b 	bl	8002db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b0c0      	sub	sp, #256	; 0x100
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	68d9      	ldr	r1, [r3, #12]
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	ea40 0301 	orr.w	r3, r0, r1
 8002dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e08:	f021 010c 	bic.w	r1, r1, #12
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e16:	430b      	orrs	r3, r1
 8002e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	6999      	ldr	r1, [r3, #24]
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	ea40 0301 	orr.w	r3, r0, r1
 8002e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b8f      	ldr	r3, [pc, #572]	; (800307c <UART_SetConfig+0x2cc>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d005      	beq.n	8002e50 <UART_SetConfig+0xa0>
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b8d      	ldr	r3, [pc, #564]	; (8003080 <UART_SetConfig+0x2d0>)
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d104      	bne.n	8002e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e50:	f7fe fbea 	bl	8001628 <HAL_RCC_GetPCLK2Freq>
 8002e54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e58:	e003      	b.n	8002e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e5a:	f7fe fbd1 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8002e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6c:	f040 810c 	bne.w	8003088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	1891      	adds	r1, r2, r2
 8002e88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e8a:	415b      	adcs	r3, r3
 8002e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e92:	4621      	mov	r1, r4
 8002e94:	eb12 0801 	adds.w	r8, r2, r1
 8002e98:	4629      	mov	r1, r5
 8002e9a:	eb43 0901 	adc.w	r9, r3, r1
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb2:	4690      	mov	r8, r2
 8002eb4:	4699      	mov	r9, r3
 8002eb6:	4623      	mov	r3, r4
 8002eb8:	eb18 0303 	adds.w	r3, r8, r3
 8002ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	eb49 0303 	adc.w	r3, r9, r3
 8002ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ede:	460b      	mov	r3, r1
 8002ee0:	18db      	adds	r3, r3, r3
 8002ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	eb42 0303 	adc.w	r3, r2, r3
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
 8002eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef4:	f7fd f986 	bl	8000204 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <UART_SetConfig+0x2d4>)
 8002efe:	fba3 2302 	umull	r2, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	011c      	lsls	r4, r3, #4
 8002f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	1891      	adds	r1, r2, r2
 8002f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f20:	415b      	adcs	r3, r3
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f28:	4641      	mov	r1, r8
 8002f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f2e:	4649      	mov	r1, r9
 8002f30:	eb43 0b01 	adc.w	fp, r3, r1
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f48:	4692      	mov	sl, r2
 8002f4a:	469b      	mov	fp, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f56:	464b      	mov	r3, r9
 8002f58:	eb4b 0303 	adc.w	r3, fp, r3
 8002f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f74:	460b      	mov	r3, r1
 8002f76:	18db      	adds	r3, r3, r3
 8002f78:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	eb42 0303 	adc.w	r3, r2, r3
 8002f80:	647b      	str	r3, [r7, #68]	; 0x44
 8002f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f8a:	f7fd f93b 	bl	8000204 <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <UART_SetConfig+0x2d4>)
 8002f96:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2264      	movs	r2, #100	; 0x64
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	1acb      	subs	r3, r1, r3
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002faa:	4b36      	ldr	r3, [pc, #216]	; (8003084 <UART_SetConfig+0x2d4>)
 8002fac:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb8:	441c      	add	r4, r3
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fdc:	4641      	mov	r1, r8
 8002fde:	1851      	adds	r1, r2, r1
 8002fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	414b      	adcs	r3, r1
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	00cb      	lsls	r3, r1, #3
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffe:	4651      	mov	r1, sl
 8003000:	00ca      	lsls	r2, r1, #3
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	4603      	mov	r3, r0
 8003008:	4642      	mov	r2, r8
 800300a:	189b      	adds	r3, r3, r2
 800300c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003010:	464b      	mov	r3, r9
 8003012:	460a      	mov	r2, r1
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003028:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800302c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003030:	460b      	mov	r3, r1
 8003032:	18db      	adds	r3, r3, r3
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	4613      	mov	r3, r2
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003046:	f7fd f8dd 	bl	8000204 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <UART_SetConfig+0x2d4>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	; 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <UART_SetConfig+0x2d4>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	f003 0207 	and.w	r2, r3, #7
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4422      	add	r2, r4
 8003076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003078:	e106      	b.n	8003288 <UART_SetConfig+0x4d8>
 800307a:	bf00      	nop
 800307c:	40011000 	.word	0x40011000
 8003080:	40011400 	.word	0x40011400
 8003084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800309a:	4642      	mov	r2, r8
 800309c:	464b      	mov	r3, r9
 800309e:	1891      	adds	r1, r2, r2
 80030a0:	6239      	str	r1, [r7, #32]
 80030a2:	415b      	adcs	r3, r3
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030aa:	4641      	mov	r1, r8
 80030ac:	1854      	adds	r4, r2, r1
 80030ae:	4649      	mov	r1, r9
 80030b0:	eb43 0501 	adc.w	r5, r3, r1
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	00eb      	lsls	r3, r5, #3
 80030be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c2:	00e2      	lsls	r2, r4, #3
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	4643      	mov	r3, r8
 80030ca:	18e3      	adds	r3, r4, r3
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030d0:	464b      	mov	r3, r9
 80030d2:	eb45 0303 	adc.w	r3, r5, r3
 80030d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030f6:	4629      	mov	r1, r5
 80030f8:	008b      	lsls	r3, r1, #2
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003100:	4621      	mov	r1, r4
 8003102:	008a      	lsls	r2, r1, #2
 8003104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003108:	f7fd f87c 	bl	8000204 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <UART_SetConfig+0x4e4>)
 8003112:	fba3 2302 	umull	r2, r3, r3, r2
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	011c      	lsls	r4, r3, #4
 800311a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	1891      	adds	r1, r2, r2
 8003132:	61b9      	str	r1, [r7, #24]
 8003134:	415b      	adcs	r3, r3
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313c:	4641      	mov	r1, r8
 800313e:	1851      	adds	r1, r2, r1
 8003140:	6139      	str	r1, [r7, #16]
 8003142:	4649      	mov	r1, r9
 8003144:	414b      	adcs	r3, r1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003154:	4659      	mov	r1, fp
 8003156:	00cb      	lsls	r3, r1, #3
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315e:	4651      	mov	r1, sl
 8003160:	00ca      	lsls	r2, r1, #3
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	4603      	mov	r3, r0
 8003168:	4642      	mov	r2, r8
 800316a:	189b      	adds	r3, r3, r2
 800316c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003170:	464b      	mov	r3, r9
 8003172:	460a      	mov	r2, r1
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	67bb      	str	r3, [r7, #120]	; 0x78
 8003186:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003194:	4649      	mov	r1, r9
 8003196:	008b      	lsls	r3, r1, #2
 8003198:	4641      	mov	r1, r8
 800319a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319e:	4641      	mov	r1, r8
 80031a0:	008a      	lsls	r2, r1, #2
 80031a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031a6:	f7fd f82d 	bl	8000204 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	4b38      	ldr	r3, [pc, #224]	; (8003294 <UART_SetConfig+0x4e4>)
 80031b2:	fba3 2301 	umull	r2, r3, r3, r1
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2264      	movs	r2, #100	; 0x64
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	1acb      	subs	r3, r1, r3
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a33      	ldr	r2, [pc, #204]	; (8003294 <UART_SetConfig+0x4e4>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d0:	441c      	add	r4, r3
 80031d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d6:	2200      	movs	r2, #0
 80031d8:	673b      	str	r3, [r7, #112]	; 0x70
 80031da:	677a      	str	r2, [r7, #116]	; 0x74
 80031dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	415b      	adcs	r3, r3
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f0:	4641      	mov	r1, r8
 80031f2:	1851      	adds	r1, r2, r1
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	4649      	mov	r1, r9
 80031f8:	414b      	adcs	r3, r1
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003208:	4659      	mov	r1, fp
 800320a:	00cb      	lsls	r3, r1, #3
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003212:	4651      	mov	r1, sl
 8003214:	00ca      	lsls	r2, r1, #3
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	4603      	mov	r3, r0
 800321c:	4642      	mov	r2, r8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	66bb      	str	r3, [r7, #104]	; 0x68
 8003222:	464b      	mov	r3, r9
 8003224:	460a      	mov	r2, r1
 8003226:	eb42 0303 	adc.w	r3, r2, r3
 800322a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	663b      	str	r3, [r7, #96]	; 0x60
 8003236:	667a      	str	r2, [r7, #100]	; 0x64
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003244:	4649      	mov	r1, r9
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	4641      	mov	r1, r8
 800324a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324e:	4641      	mov	r1, r8
 8003250:	008a      	lsls	r2, r1, #2
 8003252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003256:	f7fc ffd5 	bl	8000204 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <UART_SetConfig+0x4e4>)
 8003260:	fba3 1302 	umull	r1, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2164      	movs	r1, #100	; 0x64
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	3332      	adds	r3, #50	; 0x32
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <UART_SetConfig+0x4e4>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4422      	add	r2, r4
 8003286:	609a      	str	r2, [r3, #8]
}
 8003288:	bf00      	nop
 800328a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003294:	51eb851f 	.word	0x51eb851f

08003298 <QF_int_disable_>:
// On ARMv7-M and higher, interrupts are disabled *selectively* with the
// BASEPRI register.
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_disable_(void) {
__asm volatile (
 8003298:	f3ef 8011 	mrs	r0, BASEPRI
 800329c:	213f      	movs	r1, #63	; 0x3f
 800329e:	f381 8811 	msr	BASEPRI, r1
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d100      	bne.n	80032a8 <QF_int_disable_error>
 80032a6:	4770      	bx	lr

080032a8 <QF_int_disable_error>:
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <QF_int_disable_error+0xc>)
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	4a02      	ldr	r2, [pc, #8]	; (80032b8 <QF_int_disable_error+0x10>)
 80032ae:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80032b0:	bf00      	nop
 80032b2:	0000      	.short	0x0000
 80032b4:	08004134 	.word	0x08004134
 80032b8:	08000ab5 	.word	0x08000ab5

080032bc <QF_int_enable_>:
// On ARMv6-M, interrupts are enabled with the PRIMASK register.
// On ARMv7-M and higher, interrupts are enabled with the BASEPRI register.
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_enable_(void) {
__asm volatile (
 80032bc:	f3ef 8011 	mrs	r0, BASEPRI
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d003      	beq.n	80032cc <QF_int_enable_error>
 80032c4:	2100      	movs	r1, #0
 80032c6:	f381 8811 	msr	BASEPRI, r1
 80032ca:	4770      	bx	lr

080032cc <QF_int_enable_error>:
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <QF_int_enable_error+0xc>)
 80032ce:	2165      	movs	r1, #101	; 0x65
 80032d0:	4a02      	ldr	r2, [pc, #8]	; (80032dc <QF_int_enable_error+0x10>)
 80032d2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80032d4:	bf00      	nop
 80032d6:	0000      	.short	0x0000
 80032d8:	08004134 	.word	0x08004134
 80032dc:	08000ab5 	.word	0x08000ab5

080032e0 <QF_crit_entry_>:
// NOT disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_entry_(void) {
__asm volatile (
 80032e0:	f3ef 8011 	mrs	r0, BASEPRI
 80032e4:	213f      	movs	r1, #63	; 0x3f
 80032e6:	f381 8811 	msr	BASEPRI, r1
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d100      	bne.n	80032f0 <QF_crit_entry_error>
 80032ee:	4770      	bx	lr

080032f0 <QF_crit_entry_error>:
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <QF_crit_entry_error+0xc>)
 80032f2:	216e      	movs	r1, #110	; 0x6e
 80032f4:	4a02      	ldr	r2, [pc, #8]	; (8003300 <QF_crit_entry_error+0x10>)
 80032f6:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80032f8:	bf00      	nop
 80032fa:	0000      	.short	0x0000
 80032fc:	08004134 	.word	0x08004134
 8003300:	08000ab5 	.word	0x08000ab5

08003304 <QF_crit_exit_>:
// disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_exit_(void) {
__asm volatile (
 8003304:	f3ef 8011 	mrs	r0, BASEPRI
 8003308:	2800      	cmp	r0, #0
 800330a:	d003      	beq.n	8003314 <QF_crit_exit_error>
 800330c:	2100      	movs	r1, #0
 800330e:	f381 8811 	msr	BASEPRI, r1
 8003312:	4770      	bx	lr

08003314 <QF_crit_exit_error>:
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <QF_crit_exit_error+0xc>)
 8003316:	216f      	movs	r1, #111	; 0x6f
 8003318:	4a02      	ldr	r2, [pc, #8]	; (8003324 <QF_crit_exit_error+0x10>)
 800331a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800331c:	bf00      	nop
 800331e:	0000      	.short	0x0000
 8003320:	08004134 	.word	0x08004134
 8003324:	08000ab5 	.word	0x08000ab5

08003328 <QK_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// The interrupt priorities established in QK_init() can be later
// changed by the application-level code.
void QK_init(void) {
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <QK_init+0x68>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <QK_init+0x68>)
 8003334:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8003338:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	e00b      	b.n	8003358 <QK_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003348:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800334c:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8003350:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3301      	adds	r3, #1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b3b      	cmp	r3, #59	; 0x3b
 800335c:	d9f0      	bls.n	8003340 <QK_init+0x18>
    }

#endif                  //--------- ARMv7-M or higher

    // SCB_SYSPRI[2]: PendSV set to priority 0xFF (lowest)
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (0xFFU << 16U));
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <QK_init+0x68>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <QK_init+0x68>)
 8003364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003368:	6013      	str	r3, [r2, #0]
    NVIC_EN[QK_USE_IRQ_NUM >> 5U] = (1U << (QK_USE_IRQ_NUM & 0x1FU));
#endif                  //--------- QK IRQ specified

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <QK_init+0x6c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <QK_init+0x6c>)
 8003370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003374:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <QK_init+0x70>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <QK_init+0x70>)
 800337c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003380:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed20 	.word	0xe000ed20
 8003394:	e000ed88 	.word	0xe000ed88
 8003398:	e000ef34 	.word	0xe000ef34

0800339c <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 800339c:	b501      	push	{r0, lr}
 800339e:	480c      	ldr	r0, [pc, #48]	; (80033d0 <PendSV_Handler+0x34>)
 80033a0:	4780      	blx	r0
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <PendSV_Handler+0x38>)
 80033a4:	f04f 0101 	mov.w	r1, #1
 80033a8:	ea4f 61c1 	mov.w	r1, r1, lsl #27
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <PendSV_Handler+0x3c>)
 80033b4:	f1a2 0201 	sub.w	r2, r2, #1
 80033b8:	4908      	ldr	r1, [pc, #32]	; (80033dc <PendSV_Handler+0x40>)
 80033ba:	b088      	sub	sp, #32
 80033bc:	a805      	add	r0, sp, #20
 80033be:	c00e      	stmia	r0!, {r1, r2, r3}
 80033c0:	f04f 0006 	mov.w	r0, #6
 80033c4:	ea6f 0000 	mvn.w	r0, r0
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 80033ce:	bf00      	nop
 80033d0:	08003299 	.word	0x08003299
 80033d4:	e000ed04 	.word	0xe000ed04
 80033d8:	08003e21 	.word	0x08003e21
 80033dc:	080033e1 	.word	0x080033e1

080033e0 <QK_thread_ret>:
//
// NOTE: QK_thread_ret does not execute in the PendSV context!
// NOTE: QK_thread_ret is entered with interrupts DISABLED.
__attribute__ ((naked, used, optimize("-fno-stack-protector")))
void QK_thread_ret(void) {
__asm volatile (
 80033e0:	f3ef 8014 	mrs	r0, CONTROL
 80033e4:	f020 0004 	bic.w	r0, r0, #4
 80033e8:	f380 8814 	msr	CONTROL, r0
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	4803      	ldr	r0, [pc, #12]	; (8003400 <QK_thread_ret+0x20>)
 80033f2:	f04f 0101 	mov.w	r1, #1
 80033f6:	ea4f 71c1 	mov.w	r1, r1, lsl #31
 80033fa:	6001      	str	r1, [r0, #0]
 80033fc:	e7fe      	b.n	80033fc <QK_thread_ret+0x1c>
#endif                  //--------- use IRQ

    // NOTE! interrupts are still disabled when NMI is used
    "  B       .                \n" // wait for preemption by NMI/IRQ
    );
}
 80033fe:	bf00      	nop
 8003400:	e000ed04 	.word	0xe000ed04

08003404 <NMI_Handler>:
__attribute__ ((naked, optimize("-fno-stack-protector")))
#ifndef QK_USE_IRQ_NUM  //--------- IRQ NOT defined, use NMI by default

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
void NMI_Handler(void) {
__asm volatile (
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <NMI_Handler+0xc>)
 8003406:	4780      	blx	r0
// NOTE: The IRQ Handler is entered with interrupts already ENABLED
void QK_USE_IRQ_HANDLER(void) {
#endif                  //--------- use IRQ

  // ...continue here from either NMI_Handler() or IRQ_Handler()
__asm volatile (
 8003408:	b008      	add	sp, #32
 800340a:	bd01      	pop	{r0, pc}
    "  ADD     sp,sp,#(8*4)     \n" // remove one 8-register exception frame
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
}
 800340c:	bf00      	nop
 800340e:	0000      	.short	0x0000
 8003410:	080032bd 	.word	0x080032bd

08003414 <QEvt_verify_>:
}

// private:

//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    return (me != (QEvt const *)0)
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <QEvt_verify_+0x1e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	2be0      	cmp	r3, #224	; 0xe0
 800342c:	d101      	bne.n	8003432 <QEvt_verify_+0x1e>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <QEvt_verify_+0x20>
 8003432:	2300      	movs	r3, #0
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <QHsm_ctor+0x28>)
 8003456:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a06      	ldr	r2, [pc, #24]	; (8003474 <QHsm_ctor+0x2c>)
 800345c:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	08004154 	.word	0x08004154
 8003474:	08003a91 	.word	0x08003a91

08003478 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	; 0x38
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler t = me->state.fun;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	637b      	str	r3, [r7, #52]	; 0x34

    QF_CRIT_ENTRY();
 800348a:	f7ff ff29 	bl	80032e0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <QHsm_init_+0x2e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <QHsm_init_+0x2e>
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a0:	4a45      	ldr	r2, [pc, #276]	; (80035b8 <QHsm_init_+0x140>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <QHsm_init_+0x36>
 80034a6:	21c8      	movs	r1, #200	; 0xc8
 80034a8:	4844      	ldr	r0, [pc, #272]	; (80035bc <QHsm_init_+0x144>)
 80034aa:	f7fd fb03 	bl	8000ab4 <Q_onError>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 80034ae:	f7ff ff29 	bl	8003304 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	4798      	blx	r3
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    QF_CRIT_ENTRY();
 80034c2:	f7ff ff0d 	bl	80032e0 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 80034c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d003      	beq.n	80034d6 <QHsm_init_+0x5e>
 80034ce:	21d2      	movs	r1, #210	; 0xd2
 80034d0:	483a      	ldr	r0, [pc, #232]	; (80035bc <QHsm_init_+0x144>)
 80034d2:	f7fd faef 	bl	8000ab4 <Q_onError>
        QS_FUN_PRE_(t);            // the source state
        QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 80034d6:	f7ff ff15 	bl	8003304 <QF_crit_exit_>

    // drill down into the state hierarchy with initial transitions...
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 80034da:	2306      	movs	r3, #6
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran entry path array
        int_fast8_t ip = 0; // tran entry path index
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        path[0] = me->temp.fun;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	613b      	str	r3, [r7, #16]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4934      	ldr	r1, [pc, #208]	; (80035c0 <QHsm_init_+0x148>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80034f2:	e00f      	b.n	8003514 <QHsm_init_+0x9c>
            ++ip;
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	3301      	adds	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[ip] = me->temp.fun;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	3338      	adds	r3, #56	; 0x38
 8003504:	443b      	add	r3, r7
 8003506:	f843 2c28 	str.w	r2, [r3, #-40]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	492c      	ldr	r1, [pc, #176]	; (80035c0 <QHsm_init_+0x148>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351a:	429a      	cmp	r2, r3
 800351c:	d002      	beq.n	8003524 <QHsm_init_+0xac>
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b04      	cmp	r3, #4
 8003522:	dde7      	ble.n	80034f4 <QHsm_init_+0x7c>
        }
        QF_CRIT_ENTRY();
 8003524:	f7ff fedc 	bl	80032e0 <QF_crit_entry_>
        // The initial transition source state must be reached
        // Too many state nesting levels or "malformed" HSM.
        Q_ASSERT_INCRIT(220, me->temp.fun == t);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352e:	429a      	cmp	r2, r3
 8003530:	d003      	beq.n	800353a <QHsm_init_+0xc2>
 8003532:	21dc      	movs	r1, #220	; 0xdc
 8003534:	4821      	ldr	r0, [pc, #132]	; (80035bc <QHsm_init_+0x144>)
 8003536:	f7fd fabd 	bl	8000ab4 <Q_onError>
        QF_CRIT_EXIT();
 800353a:	f7ff fee3 	bl	8003304 <QF_crit_exit_>

        me->temp.fun = path[0];
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3338      	adds	r3, #56	; 0x38
 800354a:	443b      	add	r3, r7
 800354c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003550:	491c      	ldr	r1, [pc, #112]	; (80035c4 <QHsm_init_+0x14c>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	3b01      	subs	r3, #1
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (ip >= 0);
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	daf0      	bge.n	8003544 <QHsm_init_+0xcc>

        t = path[0]; // current state becomes the new source
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	637b      	str	r3, [r7, #52]	; 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	4917      	ldr	r1, [pc, #92]	; (80035c8 <QHsm_init_+0x150>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	4798      	blx	r3
 800356e:	4603      	mov	r3, r0
 8003570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        --limit;
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	3b01      	subs	r3, #1
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
    } while ((r == Q_RET_TRAN) && (limit > 0));
 800357a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800357e:	2b08      	cmp	r3, #8
 8003580:	d102      	bne.n	8003588 <QHsm_init_+0x110>
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	2b00      	cmp	r3, #0
 8003586:	dcaa      	bgt.n	80034de <QHsm_init_+0x66>

    QF_CRIT_ENTRY();
 8003588:	f7ff feaa 	bl	80032e0 <QF_crit_entry_>
    // Loop limit must not be reached.
    // Too many state nesting levels or likely "malformed" HSM
    Q_ENSURE_INCRIT(290, limit > 0);
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	dc04      	bgt.n	800359c <QHsm_init_+0x124>
 8003592:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003596:	4809      	ldr	r0, [pc, #36]	; (80035bc <QHsm_init_+0x144>)
 8003598:	f7fd fa8c 	bl	8000ab4 <Q_onError>
        QS_OBJ_PRE_(me);   // this state machine object
        QS_FUN_PRE_(t);    // the new active state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 800359c:	f7ff feb2 	bl	8003304 <QF_crit_exit_>

    me->state.fun = t;   // change the current active state
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a4:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]
    #endif
}
 80035b0:	bf00      	nop
 80035b2:	3738      	adds	r7, #56	; 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	08003a91 	.word	0x08003a91
 80035bc:	0800413c 	.word	0x0800413c
 80035c0:	08004144 	.word	0x08004144
 80035c4:	08004148 	.word	0x08004148
 80035c8:	08004150 	.word	0x08004150

080035cc <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b090      	sub	sp, #64	; 0x40
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    QStateHandler t = s;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 80035e2:	f7ff fe7d 	bl	80032e0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (s != Q_STATE_CAST(0))
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d006      	beq.n	80035fa <QHsm_dispatch_+0x2e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d004      	beq.n	8003604 <QHsm_dispatch_+0x38>
 80035fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80035fe:	4874      	ldr	r0, [pc, #464]	; (80037d0 <QHsm_dispatch_+0x204>)
 8003600:	f7fd fa58 	bl	8000ab4 <Q_onError>
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    Q_REQUIRE_INCRIT(302, QEvt_verify_(e));
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f7ff ff05 	bl	8003414 <QEvt_verify_>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <QHsm_dispatch_+0x4e>
 8003610:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003614:	486e      	ldr	r0, [pc, #440]	; (80037d0 <QHsm_dispatch_+0x204>)
 8003616:	f7fd fa4d 	bl	8000ab4 <Q_onError>
        QS_OBJ_PRE_(me);     // this state machine object
        QS_FUN_PRE_(s);      // the current state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 800361a:	f7ff fe73 	bl	8003304 <QF_crit_exit_>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003622:	609a      	str	r2, [r3, #8]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8003624:	2306      	movs	r3, #6
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
    do {
        s = me->temp.fun;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
        r = (*s)(me, e); // invoke state handler s
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	4798      	blx	r3
 8003636:	4603      	mov	r3, r0
 8003638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 800363c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003640:	2b02      	cmp	r3, #2
 8003642:	d106      	bne.n	8003652 <QHsm_dispatch_+0x86>
                QS_FUN_PRE_(s);      // the current state
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	4963      	ldr	r1, [pc, #396]	; (80037d4 <QHsm_dispatch_+0x208>)
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	4798      	blx	r3
 800364c:	4603      	mov	r3, r0
 800364e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        --limit;
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	3b01      	subs	r3, #1
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
    } while ((r == Q_RET_SUPER) && (limit > 0));
 8003658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <QHsm_dispatch_+0x9a>
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	dce0      	bgt.n	8003628 <QHsm_dispatch_+0x5c>

    QF_CRIT_ENTRY();
 8003666:	f7ff fe3b 	bl	80032e0 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, limit > 0);
 800366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366c:	2b00      	cmp	r3, #0
 800366e:	dc04      	bgt.n	800367a <QHsm_dispatch_+0xae>
 8003670:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003674:	4856      	ldr	r0, [pc, #344]	; (80037d0 <QHsm_dispatch_+0x204>)
 8003676:	f7fd fa1d 	bl	8000ab4 <Q_onError>
    QF_CRIT_EXIT();
 800367a:	f7ff fe43 	bl	8003304 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // regular tran. taken?
 800367e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003682:	2b07      	cmp	r3, #7
 8003684:	f240 8098 	bls.w	80037b8 <QHsm_dispatch_+0x1ec>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; // tran. target
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	617b      	str	r3, [r7, #20]
        path[1] = t; // current state
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	61bb      	str	r3, [r7, #24]
        path[2] = s; // tran. source
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	61fb      	str	r3, [r7, #28]

        // exit current state to tran. source s...
        limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8003696:	2306      	movs	r3, #6
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 800369a:	e010      	b.n	80036be <QHsm_dispatch_+0xf2>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	494e      	ldr	r1, [pc, #312]	; (80037d8 <QHsm_dispatch_+0x20c>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	4798      	blx	r3
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d103      	bne.n	80036b2 <QHsm_dispatch_+0xe6>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	4949      	ldr	r1, [pc, #292]	; (80037d4 <QHsm_dispatch_+0x208>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	4798      	blx	r3
            }
            --limit;
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	3b01      	subs	r3, #1
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d002      	beq.n	80036cc <QHsm_dispatch_+0x100>
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dce7      	bgt.n	800369c <QHsm_dispatch_+0xd0>
        }
        QF_CRIT_ENTRY();
 80036cc:	f7ff fe08 	bl	80032e0 <QF_crit_entry_>
        Q_ASSERT_INCRIT(320, limit > 0);
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	dc04      	bgt.n	80036e0 <QHsm_dispatch_+0x114>
 80036d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80036da:	483d      	ldr	r0, [pc, #244]	; (80037d0 <QHsm_dispatch_+0x204>)
 80036dc:	f7fd f9ea 	bl	8000ab4 <Q_onError>
        QF_CRIT_EXIT();
 80036e0:	f7ff fe10 	bl	8003304 <QF_crit_exit_>

        int_fast8_t ip = QHsm_tran_(me, path, qsId); // take the tran.
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8cb 	bl	8003888 <QHsm_tran_>
 80036f2:	6338      	str	r0, [r7, #48]	; 0x30
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        // execute state entry actions in the desired order...
        for (; ip >= 0; --ip) {
 80036f4:	e00b      	b.n	800370e <QHsm_dispatch_+0x142>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3340      	adds	r3, #64	; 0x40
 80036fc:	443b      	add	r3, r7
 80036fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003702:	4936      	ldr	r1, [pc, #216]	; (80037dc <QHsm_dispatch_+0x210>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	3b01      	subs	r3, #1
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	2b00      	cmp	r3, #0
 8003712:	daf0      	bge.n	80036f6 <QHsm_dispatch_+0x12a>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
        me->temp.fun = t; // update the next state
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800371c:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 800371e:	e044      	b.n	80037aa <QHsm_dispatch_+0x1de>
                QS_FUN_PRE_(me->temp.fun); // the target of the tran.
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
            path[0] = me->temp.fun;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4929      	ldr	r1, [pc, #164]	; (80037d4 <QHsm_dispatch_+0x208>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	4798      	blx	r3

            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003734:	e00f      	b.n	8003756 <QHsm_dispatch_+0x18a>
                ++ip;
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	3301      	adds	r3, #1
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
                path[ip] = me->temp.fun;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3340      	adds	r3, #64	; 0x40
 8003746:	443b      	add	r3, r7
 8003748:	f843 2c2c 	str.w	r2, [r3, #-44]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4920      	ldr	r1, [pc, #128]	; (80037d4 <QHsm_dispatch_+0x208>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800375c:	429a      	cmp	r2, r3
 800375e:	d002      	beq.n	8003766 <QHsm_dispatch_+0x19a>
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2b04      	cmp	r3, #4
 8003764:	dde7      	ble.n	8003736 <QHsm_dispatch_+0x16a>
            }
            QF_CRIT_ENTRY();
 8003766:	f7ff fdbb 	bl	80032e0 <QF_crit_entry_>
            // The initial transition source state must be reached.
            // Too many state nesting levels or "malformed" HSM.
            Q_ASSERT_INCRIT(330, me->temp.fun == t);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003770:	429a      	cmp	r2, r3
 8003772:	d004      	beq.n	800377e <QHsm_dispatch_+0x1b2>
 8003774:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003778:	4815      	ldr	r0, [pc, #84]	; (80037d0 <QHsm_dispatch_+0x204>)
 800377a:	f7fd f99b 	bl	8000ab4 <Q_onError>
            QF_CRIT_EXIT();
 800377e:	f7ff fdc1 	bl	8003304 <QF_crit_exit_>

            me->temp.fun = path[0];
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3340      	adds	r3, #64	; 0x40
 800378e:	443b      	add	r3, r7
 8003790:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003794:	4911      	ldr	r1, [pc, #68]	; (80037dc <QHsm_dispatch_+0x210>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	3b01      	subs	r3, #1
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
            } while (ip >= 0);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	daf0      	bge.n	8003788 <QHsm_dispatch_+0x1bc>

            t = path[0]; // current state becomes the new source
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <QHsm_dispatch_+0x214>)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d0b3      	beq.n	8003720 <QHsm_dispatch_+0x154>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037bc:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
    #endif
}
 80037c8:	bf00      	nop
 80037ca:	3740      	adds	r7, #64	; 0x40
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	0800413c 	.word	0x0800413c
 80037d4:	08004144 	.word	0x08004144
 80037d8:	0800414c 	.word	0x0800414c
 80037dc:	08004148 	.word	0x08004148
 80037e0:	08004150 	.word	0x08004150

080037e4 <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80037ee:	f7ff fd77 	bl	80032e0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(602, me->state.uint
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d004      	beq.n	800380a <QHsm_isIn_+0x26>
 8003800:	f240 215a 	movw	r1, #602	; 0x25a
 8003804:	481e      	ldr	r0, [pc, #120]	; (8003880 <QHsm_isIn_+0x9c>)
 8003806:	f7fd f955 	bl	8000ab4 <Q_onError>
                      == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 800380a:	f7ff fd7b 	bl	8003304 <QF_crit_exit_>

    bool inState = false; // assume that this HSM is not in 'state'
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	613b      	str	r3, [r7, #16]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_ + 1; // loop hard limit
 8003818:	2307      	movs	r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 800381c:	2300      	movs	r3, #0
 800381e:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8003820:	e012      	b.n	8003848 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d102      	bne.n	8003830 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 800382e:	e011      	b.n	8003854 <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4914      	ldr	r1, [pc, #80]	; (8003884 <QHsm_isIn_+0xa0>)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	4603      	mov	r3, r0
 800383a:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3b01      	subs	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d002      	beq.n	8003854 <QHsm_isIn_+0x70>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	dce6      	bgt.n	8003822 <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8003854:	f7ff fd44 	bl	80032e0 <QF_crit_entry_>
    Q_ENSURE_INCRIT(690, limit > 0);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	dc04      	bgt.n	8003868 <QHsm_isIn_+0x84>
 800385e:	f240 21b2 	movw	r1, #690	; 0x2b2
 8003862:	4807      	ldr	r0, [pc, #28]	; (8003880 <QHsm_isIn_+0x9c>)
 8003864:	f7fd f926 	bl	8000ab4 <Q_onError>
    QF_CRIT_EXIT();
 8003868:	f7ff fd4c 	bl	8003304 <QF_crit_exit_>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	0800413c 	.word	0x0800413c
 8003884:	08004144 	.word	0x08004144

08003888 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d106      	bne.n	80038bc <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4974      	ldr	r1, [pc, #464]	; (8003a84 <QHsm_tran_+0x1fc>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	e0d1      	b.n	8003a60 <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	4972      	ldr	r1, [pc, #456]	; (8003a88 <QHsm_tran_+0x200>)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	4798      	blx	r3

        t = me->temp.fun;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d102      	bne.n	80038d8 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e0c3      	b.n	8003a60 <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	496b      	ldr	r1, [pc, #428]	; (8003a88 <QHsm_tran_+0x200>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d106      	bne.n	80038f8 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4965      	ldr	r1, [pc, #404]	; (8003a84 <QHsm_tran_+0x1fc>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	e0b3      	b.n	8003a60 <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d104      	bne.n	800390e <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	495f      	ldr	r1, [pc, #380]	; (8003a84 <QHsm_tran_+0x1fc>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	4798      	blx	r3
 800390c:	e0a8      	b.n	8003a60 <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 8003912:	2301      	movs	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      // save the superstate of target
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3304      	adds	r3, #4
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3304      	adds	r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4957      	ldr	r1, [pc, #348]	; (8003a88 <QHsm_tran_+0x200>)
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	4798      	blx	r3
 8003930:	4603      	mov	r3, r0
 8003932:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 8003934:	e01d      	b.n	8003972 <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	3301      	adds	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; // store the entry path
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	4413      	add	r3, r2
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 8003954:	2301      	movs	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	3b01      	subs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 800395e:	2303      	movs	r3, #3
 8003960:	76fb      	strb	r3, [r7, #27]
 8003962:	e006      	b.n	8003972 <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4947      	ldr	r1, [pc, #284]	; (8003a88 <QHsm_tran_+0x200>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	4798      	blx	r3
 800396e:	4603      	mov	r3, r0
 8003970:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 8003972:	7efb      	ldrb	r3, [r7, #27]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <QHsm_tran_+0xf6>
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b04      	cmp	r3, #4
 800397c:	dddb      	ble.n	8003936 <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 800397e:	f7ff fcaf 	bl	80032e0 <QF_crit_entry_>
                    // Tran. source must be found within the nesting depth
                    // Too many state nesting levels or "malformed" HSM.
                    Q_ASSERT_INCRIT(510, r != Q_RET_SUPER);
 8003982:	7efb      	ldrb	r3, [r7, #27]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <QHsm_tran_+0x10a>
 8003988:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800398c:	483f      	ldr	r0, [pc, #252]	; (8003a8c <QHsm_tran_+0x204>)
 800398e:	f7fd f891 	bl	8000ab4 <Q_onError>
                    QF_CRIT_EXIT();
 8003992:	f7ff fcb7 	bl	8003304 <QF_crit_exit_>

                    // the LCA not found yet?
                    if (iq == 0) {
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d161      	bne.n	8003a60 <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4939      	ldr	r1, [pc, #228]	; (8003a84 <QHsm_tran_+0x1fc>)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 80039a8:	2304      	movs	r3, #4
 80039aa:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { // is this the LCA?
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	4413      	add	r3, r2
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d108      	bne.n	80039ce <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 80039bc:	2303      	movs	r3, #3
 80039be:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; // cause termination of the loop
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e002      	b.n	80039d4 <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dae8      	bge.n	80039ac <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 80039da:	7efb      	ldrb	r3, [r7, #27]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d03f      	beq.n	8003a60 <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 80039e0:	2304      	movs	r3, #4
 80039e2:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t limit = QHSM_MAX_NEST_DEPTH_;
 80039e4:	2306      	movs	r3, #6
 80039e6:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	4926      	ldr	r1, [pc, #152]	; (8003a84 <QHsm_tran_+0x1fc>)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	4798      	blx	r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d103      	bne.n	80039fe <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	4923      	ldr	r1, [pc, #140]	; (8003a88 <QHsm_tran_+0x200>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	4413      	add	r3, r2
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d108      	bne.n	8003a2a <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1;     // break out of inner loop
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 8003a24:	2303      	movs	r3, #3
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	e002      	b.n	8003a30 <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dae8      	bge.n	8003a08 <QHsm_tran_+0x180>

                                --limit;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (limit > 0));
 8003a3c:	7efb      	ldrb	r3, [r7, #27]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d002      	beq.n	8003a48 <QHsm_tran_+0x1c0>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dccf      	bgt.n	80039e8 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 8003a48:	f7ff fc4a 	bl	80032e0 <QF_crit_entry_>
                            Q_ASSERT_INCRIT(530, limit > 0);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dc04      	bgt.n	8003a5c <QHsm_tran_+0x1d4>
 8003a52:	f240 2112 	movw	r1, #530	; 0x212
 8003a56:	480d      	ldr	r0, [pc, #52]	; (8003a8c <QHsm_tran_+0x204>)
 8003a58:	f7fd f82c 	bl	8000ab4 <Q_onError>
                            QF_CRIT_EXIT();
 8003a5c:	f7ff fc52 	bl	8003304 <QF_crit_exit_>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 8003a60:	f7ff fc3e 	bl	80032e0 <QF_crit_entry_>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	dd04      	ble.n	8003a74 <QHsm_tran_+0x1ec>
 8003a6a:	f240 214e 	movw	r1, #590	; 0x24e
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <QHsm_tran_+0x204>)
 8003a70:	f7fd f820 	bl	8000ab4 <Q_onError>
    QF_CRIT_EXIT();
 8003a74:	f7ff fc46 	bl	8003304 <QF_crit_exit_>
    return ip;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	0800414c 	.word	0x0800414c
 8003a88:	08004144 	.word	0x08004144
 8003a8c:	0800413c 	.word	0x0800413c

08003a90 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8003a9a:	2304      	movs	r3, #4
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	e008      	b.n	8003ace <QF_bzero_+0x26>
        *ptr = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f3      	bne.n	8003abc <QF_bzero_+0x14>
    }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <QActive_get_>:
//$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::get_} .......................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003aec:	f7ff fbf8 	bl	80032e0 <QF_crit_entry_>
    QF_MEM_SYS();

    QACTIVE_EQUEUE_WAIT_(me); // wait for event to arrive directly
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <QActive_get_+0x1e>
 8003af8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003afc:	4821      	ldr	r0, [pc, #132]	; (8003b84 <QActive_get_+0xa0>)
 8003afe:	f7fc ffd9 	bl	8000ab4 <Q_onError>

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; // get volatile into tmp
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7fdb      	ldrb	r3, [r3, #31]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; // update the # free
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7afa      	ldrb	r2, [r7, #11]
 8003b16:	77da      	strb	r2, [r3, #31]

    if (nFree <= me->eQueue.end) { // any events in the ring buffer?
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7f1b      	ldrb	r3, [r3, #28]
 8003b1c:	7afa      	ldrb	r2, [r7, #11]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d81a      	bhi.n	8003b58 <QActive_get_+0x74>
        // remove event from the tail
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7f9b      	ldrb	r3, [r3, #30]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	615a      	str	r2, [r3, #20]
        if (me->eQueue.tail == 0U) { // need to wrap the tail?
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7f9b      	ldrb	r3, [r3, #30]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <QActive_get_+0x64>
            me->eQueue.tail = me->eQueue.end; // wrap around
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7f1a      	ldrb	r2, [r3, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	779a      	strb	r2, [r3, #30]
        }
        --me->eQueue.tail;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7f9b      	ldrb	r3, [r3, #30]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	779a      	strb	r2, [r3, #30]
 8003b56:	e00d      	b.n	8003b74 <QActive_get_+0x90>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE_(nFree);   // # free entries
        QS_END_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(310, nFree == (me->eQueue.end + 1U));
 8003b5e:	7afa      	ldrb	r2, [r7, #11]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7f1b      	ldrb	r3, [r3, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d004      	beq.n	8003b74 <QActive_get_+0x90>
 8003b6a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003b6e:	4805      	ldr	r0, [pc, #20]	; (8003b84 <QActive_get_+0xa0>)
 8003b70:	f7fc ffa0 	bl	8000ab4 <Q_onError>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
        QS_END_PRE_()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003b74:	f7ff fbc6 	bl	8003304 <QF_crit_exit_>

    return e;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08004160 	.word	0x08004160

08003b88 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <QEvt_verify_+0x1e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9e:	2be0      	cmp	r3, #224	; 0xe0
 8003ba0:	d101      	bne.n	8003ba6 <QEvt_verify_+0x1e>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <QEvt_verify_+0x20>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <QEvt_getPoolNum_>:

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <QEvt_refCtr_dec_>:
static inline void QEvt_refCtr_inc_(QEvt const *me) {
    ++((QEvt *)me)->refCtr_;
}

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	789b      	ldrb	r3, [r3, #2]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	709a      	strb	r2, [r3, #2]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <QF_gc>:
    return e;
}

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003c00:	f7ff fb6e 	bl	80032e0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(402, QEvt_verify_(e));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ffbf 	bl	8003b88 <QEvt_verify_>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <QF_gc+0x22>
 8003c10:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8003c14:	481b      	ldr	r0, [pc, #108]	; (8003c84 <QF_gc+0x8c>)
 8003c16:	f7fc ff4d 	bl	8000ab4 <Q_onError>

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ffcd 	bl	8003bba <QEvt_getPoolNum_>
 8003c20:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d027      	beq.n	8003c78 <QF_gc+0x80>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	789b      	ldrb	r3, [r3, #2]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d905      	bls.n	8003c3e <QF_gc+0x46>
                QS_TIME_PRE_();       // timestamp
                QS_SIG_PRE_(e->sig);  // the signal of the event
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
            QS_END_PRE_()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffcf 	bl	8003bd6 <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8003c38:	f7ff fb64 	bl	8003304 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8003c3c:	e01e      	b.n	8003c7c <QF_gc+0x84>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <QF_gc+0x90>)
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d802      	bhi.n	8003c4e <QF_gc+0x56>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d904      	bls.n	8003c58 <QF_gc+0x60>
 8003c4e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003c52:	480c      	ldr	r0, [pc, #48]	; (8003c84 <QF_gc+0x8c>)
 8003c54:	f7fc ff2e 	bl	8000ab4 <Q_onError>
            QF_CRIT_EXIT();
 8003c58:	f7ff fb54 	bl	8003304 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e5a      	subs	r2, r3, #1
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <QF_gc+0x90>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f80b 	bl	8003c8c <QMPool_put>
}
 8003c76:	e001      	b.n	8003c7c <QF_gc+0x84>
        QF_CRIT_EXIT();
 8003c78:	f7ff fb44 	bl	8003304 <QF_crit_exit_>
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	08004168 	.word	0x08004168
 8003c88:	2000015c 	.word	0x2000015c

08003c8c <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003c9c:	f7ff fb20 	bl	80032e0 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, (me->nFree < me->nTot)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8a1b      	ldrh	r3, [r3, #16]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	89db      	ldrh	r3, [r3, #14]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d209      	bcs.n	8003cc2 <QMPool_put+0x36>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d304      	bcc.n	8003cc2 <QMPool_put+0x36>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d903      	bls.n	8003cca <QMPool_put+0x3e>
 8003cc2:	21c8      	movs	r1, #200	; 0xc8
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <QMPool_put+0x70>)
 8003cc6:	f7fc fef5 	bl	8000ab4 <Q_onError>
                           && (me->start <= fb) && (fb <= me->end));

    fb->next = me->free_head; // link into list
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	605a      	str	r2, [r3, #4]
    #endif

    // set as new head of the free list
    me->free_head = fb;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	609a      	str	r2, [r3, #8]

    ++me->nFree; // one more free block in this pool
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8a1b      	ldrh	r3, [r3, #16]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	821a      	strh	r2, [r3, #16]
        QS_OBJ_PRE_(me);        // this memory pool
        QS_MPC_PRE_(me->nFree); // the # free blocks in the pool
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003cf0:	f7ff fb08 	bl	8003304 <QF_crit_exit_>
}
 8003cf4:	bf00      	nop
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	08004170 	.word	0x08004170

08003d00 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003d0e:	f7ff fae7 	bl	80032e0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <QTimeEvt_ctorX+0x1e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <QTimeEvt_ctorX+0x28>
 8003d1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003d22:	4810      	ldr	r0, [pc, #64]	; (8003d64 <QTimeEvt_ctorX+0x64>)
 8003d24:	f7fc fec6 	bl	8000ab4 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8003d28:	f7ff faec 	bl	8003304 <QF_crit_exit_>

    // Initialize the QEvt superclass:
    // NOTE: The refCtr_ attribute is not used in time events,
    // so it is reused to hold the tickRate as well as other
    // information about the status of the time event.
    me->super.sig     = (QSignal)sig;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	801a      	strh	r2, [r3, #0]
    me->super.refCtr_ = (uint8_t)tickRate;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	709a      	strb	r2, [r3, #2]
    me->super.evtTag_ = QEVT_MARKER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	22e0      	movs	r2, #224	; 0xe0
 8003d40:	70da      	strb	r2, [r3, #3]

    me->next     = (QTimeEvt *)0;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	08004178 	.word	0x08004178

08003d68 <QPSet_isEmpty>:
    me->bits[1] = 0U;
    #endif
}

//! @public @memberof QPSet
static inline bool QPSet_isEmpty(QPSet const * const me) {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return (me->bits[0] == 0U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == 0U) ? (me->bits[1] == 0U) : false;
    #endif
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <QPSet_remove>:
}

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	401a      	ands	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
    #endif
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	f1c3 0320 	rsb	r3, r3, #32
    #else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
    #endif
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <QK_activate_>:
    return p;
}

//${QK::QK-base::activate_} ..................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <QK_activate_+0x1e0>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8003e2c:	4b74      	ldr	r3, [pc, #464]	; (8004000 <QK_activate_+0x1e0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_INCRIT(502,
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <QK_activate_+0x1e0>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d105      	bne.n	8003e4a <QK_activate_+0x2a>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <QK_activate_+0x1e0>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d004      	beq.n	8003e54 <QK_activate_+0x34>
 8003e4a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8003e4e:	486d      	ldr	r0, [pc, #436]	; (8004004 <QK_activate_+0x1e4>)
 8003e50:	f7fc fe30 	bl	8000ab4 <Q_onError>
       (prio_in == (uint_fast8_t)(~QK_priv_.actPrio_dis))
       && (p == (uint_fast8_t)(~QK_priv_.nextPrio_dis)));
    Q_REQUIRE_INCRIT(510, (prio_in <= QF_MAX_ACTIVE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d805      	bhi.n	8003e66 <QK_activate_+0x46>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <QK_activate_+0x46>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d904      	bls.n	8003e70 <QK_activate_+0x50>
 8003e66:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003e6a:	4866      	ldr	r0, [pc, #408]	; (8004004 <QK_activate_+0x1e4>)
 8003e6c:	f7fc fe22 	bl	8000ab4 <Q_onError>

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 8003e70:	4b63      	ldr	r3, [pc, #396]	; (8004000 <QK_activate_+0x1e0>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <QK_activate_+0x1e0>)
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	621a      	str	r2, [r3, #32]
    #endif

    uint_fast8_t pthre_in;
    QActive *a;
    if (prio_in == 0U) { // preempting the idle thread?
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <QK_activate_+0x6a>
        pthre_in = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e01c      	b.n	8003ec4 <QK_activate_+0xa4>
    }
    else {
        a = QActive_registry_[prio_in];
 8003e8a:	4a5f      	ldr	r2, [pc, #380]	; (8004008 <QK_activate_+0x1e8>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <QK_activate_+0x84>
 8003e9a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003e9e:	4859      	ldr	r0, [pc, #356]	; (8004004 <QK_activate_+0x1e4>)
 8003ea0:	f7fc fe08 	bl	8000ab4 <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	7b5b      	ldrb	r3, [r3, #13]
 8003ea8:	613b      	str	r3, [r7, #16]
        Q_ASSERT_INCRIT(511, pthre_in ==
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d004      	beq.n	8003ec4 <QK_activate_+0xa4>
 8003eba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ebe:	4851      	ldr	r0, [pc, #324]	; (8004004 <QK_activate_+0x1e4>)
 8003ec0:	f7fc fdf8 	bl	8000ab4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        a = QActive_registry_[p]; // obtain the pointer to the AO
 8003ec4:	4a50      	ldr	r2, [pc, #320]	; (8004008 <QK_activate_+0x1e8>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <QK_activate_+0xbe>
 8003ed4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003ed8:	484a      	ldr	r0, [pc, #296]	; (8004004 <QK_activate_+0x1e4>)
 8003eda:	f7fc fdeb 	bl	8000ab4 <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	7b5b      	ldrb	r3, [r3, #13]
 8003ee2:	607b      	str	r3, [r7, #4]
        Q_ASSERT_INCRIT(522, pthre ==
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003eea:	43db      	mvns	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d004      	beq.n	8003efe <QK_activate_+0xde>
 8003ef4:	f240 210a 	movw	r1, #522	; 0x20a
 8003ef8:	4842      	ldr	r0, [pc, #264]	; (8004004 <QK_activate_+0x1e4>)
 8003efa:	f7fc fddb 	bl	8000ab4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 8003efe:	4a40      	ldr	r2, [pc, #256]	; (8004000 <QK_activate_+0x1e0>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6053      	str	r3, [r2, #4]
        QK_priv_.actThre = pthre;
 8003f04:	4a3e      	ldr	r2, [pc, #248]	; (8004000 <QK_activate_+0x1e0>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
        QK_priv_.actPrio_dis = (uint_fast8_t)(~p);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <QK_activate_+0x1e0>)
 8003f10:	61d3      	str	r3, [r2, #28]
        QK_priv_.actThre_dis = (uint_fast8_t)(~pthre);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <QK_activate_+0x1e0>)
 8003f18:	6253      	str	r3, [r2, #36]	; 0x24

            pprev = p; // update previous prio.
        }
    #endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 8003f1a:	f7ff f9cf 	bl	80032bc <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f7ff fde0 	bl	8003ae4 <QActive_get_>
 8003f24:	6038      	str	r0, [r7, #0]
        // NOTE QActive_get_() performs QF_MEM_APP() before return

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8003f34:	6838      	ldr	r0, [r7, #0]
 8003f36:	f7ff fe5f 	bl	8003bf8 <QF_gc>
    #endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 8003f3a:	f7ff f9ad 	bl	8003298 <QF_int_disable_>
        QF_MEM_SYS();

        // internal integrity check (duplicate inverse storage)
        Q_ASSERT_INCRIT(532, QPSet_verify_(&QK_priv_.readySet,
 8003f3e:	4933      	ldr	r1, [pc, #204]	; (800400c <QK_activate_+0x1ec>)
 8003f40:	482f      	ldr	r0, [pc, #188]	; (8004000 <QK_activate_+0x1e0>)
 8003f42:	f7ff ff58 	bl	8003df6 <QPSet_verify_>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <QK_activate_+0x136>
 8003f4c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003f50:	482c      	ldr	r0, [pc, #176]	; (8004004 <QK_activate_+0x1e4>)
 8003f52:	f7fc fdaf 	bl	8000ab4 <Q_onError>
                                           &QK_priv_.readySet_dis));

        if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <QK_activate_+0x14e>
            QPSet_remove(&QK_priv_.readySet, p);
 8003f5e:	6979      	ldr	r1, [r7, #20]
 8003f60:	4827      	ldr	r0, [pc, #156]	; (8004000 <QK_activate_+0x1e0>)
 8003f62:	f7ff ff12 	bl	8003d8a <QPSet_remove>
    #ifndef Q_UNSAFE
            QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8003f66:	4929      	ldr	r1, [pc, #164]	; (800400c <QK_activate_+0x1ec>)
 8003f68:	4825      	ldr	r0, [pc, #148]	; (8004000 <QK_activate_+0x1e0>)
 8003f6a:	f7ff ff34 	bl	8003dd6 <QPSet_update_>
    #endif
        }

        if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8003f6e:	4824      	ldr	r0, [pc, #144]	; (8004000 <QK_activate_+0x1e0>)
 8003f70:	f7ff fefa 	bl	8003d68 <QPSet_isEmpty>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <QK_activate_+0x160>
            p = 0U; // no activation needed
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e026      	b.n	8003fce <QK_activate_+0x1ae>
        }
        else {
            // find new highest-prio AO ready to run...
            p = QPSet_findMax(&QK_priv_.readySet);
 8003f80:	481f      	ldr	r0, [pc, #124]	; (8004000 <QK_activate_+0x1e0>)
 8003f82:	f7ff ff18 	bl	8003db6 <QPSet_findMax>
 8003f86:	6178      	str	r0, [r7, #20]

            // is the new prio. below the initial preemption-threshold?
            if (p <= pthre_in) {
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d802      	bhi.n	8003f96 <QK_activate_+0x176>
                p = 0U; // no activation needed
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e01b      	b.n	8003fce <QK_activate_+0x1ae>
            }
            else {
                Q_ASSERT_INCRIT(542, QK_priv_.lockCeil
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <QK_activate_+0x1e0>)
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <QK_activate_+0x1e0>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d004      	beq.n	8003fae <QK_activate_+0x18e>
 8003fa4:	f240 211e 	movw	r1, #542	; 0x21e
 8003fa8:	4816      	ldr	r0, [pc, #88]	; (8004004 <QK_activate_+0x1e4>)
 8003faa:	f7fc fd83 	bl	8000ab4 <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

                // is the AO's prio. below the lock preemption-threshold?
                if (p <= QK_priv_.lockCeil) {
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <QK_activate_+0x1e0>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d802      	bhi.n	8003fbe <QK_activate_+0x19e>
                    p = 0U; // no activation needed
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <QK_activate_+0x1ae>
                }
                else {
                    Q_ASSERT_INCRIT(550, p <= QF_MAX_ACTIVE);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d904      	bls.n	8003fce <QK_activate_+0x1ae>
 8003fc4:	f240 2126 	movw	r1, #550	; 0x226
 8003fc8:	480e      	ldr	r0, [pc, #56]	; (8004004 <QK_activate_+0x1e4>)
 8003fca:	f7fc fd73 	bl	8000ab4 <Q_onError>
                }
            }
        }
    } while (p != 0U);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f47f af77 	bne.w	8003ec4 <QK_activate_+0xa4>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <QK_activate_+0x1e0>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6053      	str	r3, [r2, #4]
    QK_priv_.actThre = pthre_in;
 8003fdc:	4a08      	ldr	r2, [pc, #32]	; (8004000 <QK_activate_+0x1e0>)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
    QK_priv_.actPrio_dis = (uint_fast8_t)(~QK_priv_.actPrio);
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <QK_activate_+0x1e0>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	4a05      	ldr	r2, [pc, #20]	; (8004000 <QK_activate_+0x1e0>)
 8003fea:	61d3      	str	r3, [r2, #28]
    QK_priv_.actThre_dis = (uint_fast8_t)(~QK_priv_.actThre);
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <QK_activate_+0x1e0>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	4a03      	ldr	r2, [pc, #12]	; (8004000 <QK_activate_+0x1e0>)
 8003ff4:	6253      	str	r3, [r2, #36]	; 0x24
    #ifdef QF_ON_CONTEXT_SW
    QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

    #endif // QF_ON_CONTEXT_SW || Q_SPY
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200001b0 	.word	0x200001b0
 8004004:	08004180 	.word	0x08004180
 8004008:	200000d8 	.word	0x200000d8
 800400c:	200001c8 	.word	0x200001c8

08004010 <QF_init>:

//$define${QK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QK::QF-cust::init} .......................................................
//! @static @public @memberof QF
void QF_init(void) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 8004016:	2140      	movs	r1, #64	; 0x40
 8004018:	481e      	ldr	r0, [pc, #120]	; (8004094 <QF_init+0x84>)
 800401a:	f7ff fd45 	bl	8003aa8 <QF_bzero_>
    QF_bzero_(&QK_priv_,                 sizeof(QK_priv_));
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	481d      	ldr	r0, [pc, #116]	; (8004098 <QF_init+0x88>)
 8004022:	f7ff fd41 	bl	8003aa8 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 8004026:	2184      	movs	r1, #132	; 0x84
 8004028:	481c      	ldr	r0, [pc, #112]	; (800409c <QF_init+0x8c>)
 800402a:	f7ff fd3d 	bl	8003aa8 <QF_bzero_>

    // setup the QK scheduler as initially locked and not running
    QK_priv_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <QF_init+0x88>)
 8004030:	2221      	movs	r2, #33	; 0x21
 8004032:	611a      	str	r2, [r3, #16]

    #ifndef Q_UNSAFE
    QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8004034:	491a      	ldr	r1, [pc, #104]	; (80040a0 <QF_init+0x90>)
 8004036:	4818      	ldr	r0, [pc, #96]	; (8004098 <QF_init+0x88>)
 8004038:	f7ff fecd 	bl	8003dd6 <QPSet_update_>
    QK_priv_.actPrio_dis  = (uint_fast8_t)(~0U);
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <QF_init+0x88>)
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	61da      	str	r2, [r3, #28]
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <QF_init+0x88>)
 8004046:	f04f 32ff 	mov.w	r2, #4294967295
 800404a:	621a      	str	r2, [r3, #32]
    QK_priv_.actThre_dis  = (uint_fast8_t)(~0U);
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <QF_init+0x88>)
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~QK_priv_.lockCeil);
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <QF_init+0x88>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <QF_init+0x88>)
 800405c:	6293      	str	r3, [r2, #40]	; 0x28
    #endif

    for (uint_fast8_t tickRate = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	e00e      	b.n	8004082 <QF_init+0x72>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <QF_init+0x94>)
 8004070:	1898      	adds	r0, r3, r2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2204      	movs	r2, #4
 8004076:	2100      	movs	r1, #0
 8004078:	f7ff fe42 	bl	8003d00 <QTimeEvt_ctorX>
         ++tickRate)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ed      	beq.n	8004064 <QF_init+0x54>
                       (QActive *)0, (enum_t)Q_USER_SIG, tickRate);
    }

    #ifdef QK_INIT
    QK_INIT(); // port-specific initialization of the QK kernel
 8004088:	f7ff f94e 	bl	8003328 <QK_init>
    #endif
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2000015c 	.word	0x2000015c
 8004098:	200001b0 	.word	0x200001b0
 800409c:	200000d8 	.word	0x200000d8
 80040a0:	200001c8 	.word	0x200001c8
 80040a4:	2000019c 	.word	0x2000019c

080040a8 <memset>:
 80040a8:	4402      	add	r2, r0
 80040aa:	4603      	mov	r3, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	f803 1b01 	strb.w	r1, [r3], #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f818 	bl	8004100 <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	0800418c 	.word	0x0800418c
 80040f4:	0800418c 	.word	0x0800418c
 80040f8:	0800418c 	.word	0x0800418c
 80040fc:	08004190 	.word	0x08004190

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
