//$file${HSM::../Quantum_Leaps::LED_Control.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: LED_Control_Model.qm
// File:  ${HSM::../Quantum_Leaps::LED_Control.h}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${HSM::../Quantum_Leaps::LED_Control.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef LED_CONTROL_H_
#define LED_CONTROL_H_
#include"qpc.h"

typedef enum
{
LED_OFF_SIG=Q_USER_SIG,
LED_ON_SIG
}LED_State_t;
//$declare${HSM::Led_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::Led_Control} ........................................................
typedef struct Led_Control {
// protected:
    QHsm super;

// public:
    uint8_t LED_Status;
} Led_Control;

extern Led_Control Led_Control_obj;

// protected:
QState Led_Control_initial(Led_Control * const me, void const * const par);
QState Led_Control_LED_CONTROL(Led_Control * const me, QEvt const * const e);
QState Led_Control_LED_OFF(Led_Control * const me, QEvt const * const e);
QState Led_Control_LED_DIM(Led_Control * const me, QEvt const * const e);
QState Led_Control_LED_MEDIUM(Led_Control * const me, QEvt const * const e);
QState Led_Control_LED_FULL(Led_Control * const me, QEvt const * const e);
//$enddecl${HSM::Led_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::LED_Intencity_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_Intencity_Control} ..............................................
void LED_Intencity_Control(uint16_t duty_uint16_t);
//$enddecl${HSM::LED_Intencity_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::LED_FULL} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_FULL} ...........................................................
extern uint16_t LED_FULL;
//$enddecl${HSM::LED_FULL} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::LED_MEDIUM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_MEDIUM} .........................................................
extern uint16_t LED_MEDIUM;
//$enddecl${HSM::LED_MEDIUM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::LED_DIM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_DIM} ............................................................
extern uint16_t LED_DIM;
//$enddecl${HSM::LED_DIM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::LED_OFF} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::LED_OFF} ............................................................
extern uint16_t LED_OFF;
//$enddecl${HSM::LED_OFF} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::super_Led_Control} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::super_Led_Control} ..................................................
extern QHsm  *const super_Led_Control;
//$enddecl${HSM::super_Led_Control} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${HSM::Led_Control_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${HSM::Led_Control_Ctor} ...................................................
void Led_Control_Ctor(void);
//$enddecl${HSM::Led_Control_Ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
